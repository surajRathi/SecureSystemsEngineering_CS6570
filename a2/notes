wget 'https://bootstrap.pypa.io/pip/3.5/get-pip.py'
python3 get-pip.py
python3 -m pip install filebytes keystone-engine ropper ROPGadget


wget 'https://bootstrap.pypa.io/pip/2.7/get-pip.py'
python get-pip.py
python -m pip install filebytes keystone-engine ropper ROPGadget

by breaking at fgets, we stored that the first user entry is stored in the symbol plaintext

gef➤  info proc map
process 2518
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x8049000     0x1000        0x0 /home/esctf/sse/assis/a2/lab_2_rop
	 0x8049000  0x80b4000    0x6b000     0x1000 /home/esctf/sse/assis/a2/lab_2_rop
	 0x80b4000  0x80e3000    0x2f000    0x6c000 /home/esctf/sse/assis/a2/lab_2_rop
	 0x80e3000  0x80e5000     0x2000    0x9a000 /home/esctf/sse/assis/a2/lab_2_rop
	 0x80e5000  0x80e7000     0x2000    0x9c000 /home/esctf/sse/assis/a2/lab_2_rop
	 0x80e7000  0x810a000    0x23000        0x0 [heap]
	0xf7ff9000 0xf7ffc000     0x3000        0x0 [vvar]
	0xf7ffc000 0xf7ffe000     0x2000        0x0 [vdso]
	0xfffdd000 0xffffe000    0x21000        0x0 [stack]
gef➤

gef➤  x/32xw &plaintext
0x80e6ce0 <plaintext>:	0x41414141	0x41414141	0x41414141	0x41414141
0x80e6cf0 <plaintext+16>:	0x41414141	0x41414141	0x41414141	0x41414141
0x80e6d00 <plaintext+32>:	0x41414141	0x41414141	0x41414141	0x41414141
0x80e6d10 <plaintext+48>:	0x41414141	0x41414141	0x41414141	0x00000a41
0x80e6d20 <plaintext+64>:	0x00000000	0x00000000	0x00000000	0x00000000
0x80e6d30 <plaintext+80>:	0x00000000	0x00000000	0x00000000	0x00000000
0x80e6d40 <plaintext+96>:	0x00000000	0x00000000	0x00000000	0x00000000
0x80e6d50 <plaintext+112>:	0x00000000	0x00000000	0x00000000	0x00000000
gef➤



gef➤  info file
Symbols from "/home/esctf/sse/assis/a2/lab_2_rop".
Local exec file:
	`/home/esctf/sse/assis/a2/lab_2_rop', file type elf32-i386.
	Entry point: 0x8049c20
	0x08048154 - 0x08048178 is .note.gnu.build-id
	0x08048178 - 0x08048194 is .note.gnu.property
	0x08048194 - 0x080481b4 is .note.ABI-tag
	0x080481b4 - 0x08048224 is .rel.plt
	0x08049000 - 0x08049024 is .init
	0x08049030 - 0x08049110 is .plt
	0x08049110 - 0x080b2bb1 is .text
	0x080b2bc0 - 0x080b374f is __libc_freeres_fn
	0x080b3750 - 0x080b3768 is .fini
	0x080b4000 - 0x080cf3c4 is .rodata
	0x080cf3c4 - 0x080e2304 is .eh_frame
	0x080e2304 - 0x080e23db is .gcc_except_table
	0x080e36a0 - 0x080e36b0 is .tdata
	0x080e36b0 - 0x080e36d0 is .tbss
	0x080e36b0 - 0x080e36b8 is .init_array
	0x080e36b8 - 0x080e36c0 is .fini_array
	0x080e36c0 - 0x080e4fd4 is .data.rel.ro
	0x080e4fd4 - 0x080e4ff8 is .got
	0x080e5000 - 0x080e5044 is .got.plt
	0x080e5060 - 0x080e5f40 is .data
	0x080e5f40 - 0x080e5f64 is __libc_subfreeres
	0x080e5f80 - 0x080e62d4 is __libc_IO_vtables
	0x080e62d4 - 0x080e62d8 is __libc_atexit
	0x080e62e0 - 0x080e741c is .bss
	0x080e741c - 0x080e7430 is __libc_freeres_ptrs
gef➤

plaintext is in the .bss section


Notes: int puts(const char *str)



break *concatenate_first_chars+55 : where fgets is called.
break *concatenate_first_chars+108 : where teh next fgets is called
break *concatenate_first_chars+204: the final printf
When calling fgets for the first time, "0x80e6ce0" is put on the eax register

char *fgets(char *str, int n, FILE *stream)
fgets (
   [sp + 0x0] = 0x080e6ce0 → 0x00000000,
   [sp + 0x4] = 0x000003e8,
   [sp + 0x8] = 0x080e5320 → 0xfbad2088
)
char *str = 0x080e6ce0 <= aka plaintext, which is stored in the .bss section
int n = 0x3E8 = 1000
FILE *stream = 0x080e5320 -> 0xfbad2088 "STDIN?"


Second fgets call:
fgets (
   [sp + 0x0] = 0xffffcfe0 → 0x00000001,
   [sp + 0x4] = 0x00000010
)

0xffffcfe0: Writing to the stack.
And writing 16 characters to the stack

gef➤  p $esp
$5 = (void *) 0xffffcfd0
gef➤  p $ebp
$6 = (void *) 0xffffd008
gef➤  p 0xffffcfe0
$7 = 0xffffcfe0
gef➤




For the printf:
gef➤  x/s $ebx-0x30fd4
0x80b402c:	"Here are the first characters from the 10 words concatenated:\n%s\n"
gef➤

printf (
   [sp + 0x0] = 0x080b402c → "Here are the first characters from the 10 words co[...]",
   [sp + 0x4] = 0xffffcff4 → "abdefghijk",
   [sp + 0x8] = 0x080e5320 → 0xfbad2288
)



- Where is the input data stored
- Is it, and where is it getting coppied
- Is it getting overwritten anywhere
- Canaries?
-



gef➤  info frame
Stack level 0, frame at 0xffffd010:
 eip = 0x8049e61 in concatenate_first_chars; saved eip = 0x8049eb7
 called by frame at 0xffffd030
 Arglist at 0xffffcfcc, args:
 Locals at 0xffffcfcc, Previous frame's sp is 0xffffd010
 Saved registers:
  ebx at 0xffffd004, ebp at 0xffffd008, eip at 0xffffd00c
gef➤  bt
#0  0x08049e61 in concatenate_first_chars ()
#1  0x08049eb7 in main ()
gef➤  x/xw 0xffffd00c
0xffffd00c:	0x08049eb7
gef➤

Return address stored at: 0xffffd00c

gef➤  p $ebp-0x14
$12 = (void *) 0xffffcff4
gef➤

Output buffer: 0xffffcff4

Need to write 24 bytes then the return address and set i to be 9
>>> 0xffffd00c-0xffffcff4
24
>>>


First: Try to set the value of i to 9
Then: Overflow the stack to overwrite the return address
Final: Do the actual ROP stuff.


gef➤  p exit
$1 = {<text variable, no debug info>} 0x80507f0 <exit>
gef➤



break *concatenate_first_chars+183
run < a
x/16xw $esp

break *concatenate_first_chars+183
run < a
x/16xw $esp



```
esctf@osboxes:~/sse/assis/a2$ python -c 'print("\xf0B")' | wc -c
3
esctf@osboxes:~/sse/assis/a2$ python3 -c 'import sys; sys.stdout.buffer.write(b"\xf0B\n")' | wc -c
3
esctf@osboxes:~/sse/assis/a2$
```


gef➤  x/s 0x80e6cc0
0x80e6cc0 <glb>:	""
gef➤

gef➤  x/s 0x80b40a4
0x80b40a4:	"Value in glb is %d\n"
gef➤


gef➤  x/s $ebx+0x70
0x80e5070 <rollnumber2>:	"CSXX002"
gef➤  x/s $ebx+0x68
0x80e5068 <rollnumber1>:	"CSXX001"
gef➤



TODO:
1. Modify the python script to write a set of addresses to the stack.
2. Figure out the ROP to write some number to the esp address
	a. Load a value from stack; load &glb from stack; and copy the vlue to glb; return to main.
3. Figure out how to return to main? or return to the printf call directly?



Can come back to main by setting ebx to the correct value.


Registers right before the ret instruciton in concatenate chars (normal

$eax   : 0x49
$ebx   : 0x080e5000  →  0x00000000
$ecx   : 0x7fffffb7
$edx   : 0x080b406d  →  0x61737500
$esp   : 0xffffd00c  →  0x08049eb7  →  <main+73> sub esp, 0x4
$ebp   : 0xffffd018  →  0x00000000
$esi   : 0x080e5000  →  0x00000000
$edi   : 0x080e5000  →  0x00000000
$eip   : 0x08049e6d  →  <concatenate_first_chars+216> ret
$eflags: [carry parity adjust zero SIGN trap INTERRUPT direction overflow resume virtualx86 identification]
$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063


Annotation of the assembly, and some "manual disassembly": https://docs.google.com/document/d/17q2QAsoEKqlhMzmKahYQq1D_ahDHasAA-f29_Ji8uJs/edit

Ceaser Cipher:
for(int i = 0; i < len(text); i ++)
    text[i] = (text[i] - 'A' + key) % 26 + 'A'

Steps:
  1. Store the key in memory or a register
  2. Figure out how to iterate through the string; how to stop at the end
  3. How to increment and mod
  4. Return to main (done)

Useful instructions
0x080b0439: inc eax; dec eax; ret;
0x080b04a9: inc eax; dec esp; ret;

0x08075000: inc eax; pop ebp; pop ebx; pop esi; pop edi; ret;

0x08069d76: inc edx; pop es; sub eax, ecx; ret;

0x08088a9e: inc eax; ret;
0x0807751a: inc ebx; ret;
0x0807c165: inc ecx; ret;
0x08066194: inc edx; ret;

0x08070b64: add eax, ecx; ret;
0x08071393: add eax, edx; ret;
0x08049d37: add ecx, ecx; ret;

0x080a36c8: mov dword ptr [eax], edx; ret;
0x0805f932: mov dword ptr [edx], eax; ret;
0x0805fc44: mov eax, dword ptr [eax]; ret;
0x08098db0: mov eax, ecx; ret;
0x0805c66e: mov eax, edx; ret;


0x08065fe6: pop edx; pop ebx; pop esi; ret;
0x0805ebf9: pop edx; pop ebx; ret;
0x080ad381: pop edx; push cs; or bh, al; ret;
0x08070de5: pop edx; xor eax, eax; pop edi; ret;


Rough:

# ecx or edx is the counter

# Initialize ecx to
0x0804fc70: xor eax, eax; ret;
0x08098db8: mov ecx, eax; mov eax, ecx; ret;

0x08098db0: mov eax, ecx; ret;
0x0805c66e: mov eax, edx; ret;

0x0807c165: inc ecx; ret;
0x08066194: inc edx; ret;

0x0805fc44: mov eax, dword ptr [eax]; ret;


Rough 2:

# ecx is the counter

# Initialize ecx to the start address
0x0805ebf9: pop edx; pop ebx; ret;

start:
# Load the value into eax
0x0805c66e: mov eax, edx; ret;
0x0805fc44: mov eax, dword ptr [eax]; ret;

# check for \0
Break then.

# Do the operation

# Write the value

#
# Increment ecx
0x08066194: inc edx; ret;

Go to startsudo p




0x0805f980 : sub eax, edx ; ret
0x08088b2e : sub bh, al ; ret
0x080577ea : sub byte ptr [eax], al ; or byte ptr [eax], al ; add bl, ch ; ret
0x08070e25 : cmp byte ptr [eax], ah ; pop edi ; ret
0x08070e15 : cmp byte ptr [eax], dl ; pop edi ; ret
0x08070df5 : cmp al, dh ; pop edi ; ret
0x0808ce95 : inc dword ptr [ecx] ; ret
0x08088a9e : inc eax ; ret
0x08066194 : inc edx ; ret
0x0807751a : inc ebx ; ret
0x0807c165 : inc ecx ; ret
0x08063823 : add al, 0 ; add byte ptr [ecx], bh ; ret
0x080b20bf : nop ; pop ebx ; ret
0x080640c1 : pop ecx ; add al, 0xf6 ; ret
0x080707e4 : sub byte ptr [ecx], al ; add byte ptr [eax], al ; lea eax, [edi + 7] ; pop edi ; ret
0x0805f97d : mov eax, dword ptr [ecx + 8] ; sub eax, edx ; ret
0x0806dac2 : mov byte ptr [edx], al ; mov eax, edx ; ret
0x08090b7b : idiv bh ; dec dword ptr [edi] ; xchg ebp, eax ; ret
0x0806dac0 : mov al, byte ptr [ecx] ; mov byte ptr [edx], al ; mov eax, edx ; ret
0x080640c1 : pop ecx ; add al, 0xf6 ; ret
0x0805ebf9 : pop edx ; pop ebx ; ret
0x0806dac2 : mov byte ptr [edx], al ; mov eax, edx ; ret
0x0805bfe5 : sub byte ptr [ebx - 0x76d3db94], cl ; ret
0x080670ce : add byte ptr [ebx - 0x39], dl ; ret
0x08098db0 : mov eax, ecx ; ret
0x08074696 : xchg edx, eax ; ret
0x080750c1 : mov byte ptr [edi], ah ; mov eax, dword ptr [esp + 0x10] ; pop ebx ; pop esi ; pop edi ; ret
0x08082d28 : xchg edi, eax ; ret
0x080a0f5b : push dword ptr [ecx] ; shr cl, cl ; ret
0x0804af53 : xchg dword ptr [esi], eax ; add byte ptr [ebx + 0x5e5b04c4], al ; ret
0x08074e13 : mov esi, edx ; ret
0x08071836 : and ch, 0 ; add byte ptr [eax], al ; lea eax, [eax + 0xb] ; pop edi ; ret
0x080b04ea : push eax ; ret
0x08062abe : xchg ebp, eax ; ret
0x08075307 : mov byte ptr [edi], ah ; mov eax, edi ; pop ebx ; pop esi ; pop edi ; ret
0x08049c55 : add ah, dh ; mov ebx, dword ptr [esp] ; ret
0x0809898a : mov eax, esi ; pop ebx ; pop esi ; ret


0x080a2988 : clc ; mov edx, ebp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x0804b3e1 : clc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080509a1 : clc ; pop ebx ; pop esi ; pop edi ; ret
0x0806a16f : clc ; pop edi ; ret



0x0806c646: xlatb; ret;
Set AL to memory byte DS:[(E)BX + unsigned AL].