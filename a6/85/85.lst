
85:     file format elf64-x86-64


Disassembly of section .interp:

0000000000400238 <.interp>:
  400238:	2f                   	(bad)  
  400239:	6c                   	ins    BYTE PTR es:[rdi],dx
  40023a:	69 62 36 34 2f 6c 64 	imul   esp,DWORD PTR [rdx+0x36],0x646c2f34
  400241:	2d 6c 69 6e 75       	sub    eax,0x756e696c
  400246:	78 2d                	js     400275 <_init-0x1583>
  400248:	78 38                	js     400282 <_init-0x1576>
  40024a:	36 2d 36 34 2e 73    	ss sub eax,0x732e3436
  400250:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400251:	2e 32 00             	xor    al,BYTE PTR cs:[rax]

Disassembly of section .note.ABI-tag:

0000000000400254 <.note.ABI-tag>:
  400254:	04 00                	add    al,0x0
  400256:	00 00                	add    BYTE PTR [rax],al
  400258:	10 00                	adc    BYTE PTR [rax],al
  40025a:	00 00                	add    BYTE PTR [rax],al
  40025c:	01 00                	add    DWORD PTR [rax],eax
  40025e:	00 00                	add    BYTE PTR [rax],al
  400260:	47                   	rex.RXB
  400261:	4e 55                	rex.WRX push rbp
  400263:	00 00                	add    BYTE PTR [rax],al
  400265:	00 00                	add    BYTE PTR [rax],al
  400267:	00 02                	add    BYTE PTR [rdx],al
  400269:	00 00                	add    BYTE PTR [rax],al
  40026b:	00 06                	add    BYTE PTR [rsi],al
  40026d:	00 00                	add    BYTE PTR [rax],al
  40026f:	00 20                	add    BYTE PTR [rax],ah
  400271:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .note.gnu.build-id:

0000000000400274 <.note.gnu.build-id>:
  400274:	04 00                	add    al,0x0
  400276:	00 00                	add    BYTE PTR [rax],al
  400278:	14 00                	adc    al,0x0
  40027a:	00 00                	add    BYTE PTR [rax],al
  40027c:	03 00                	add    eax,DWORD PTR [rax]
  40027e:	00 00                	add    BYTE PTR [rax],al
  400280:	47                   	rex.RXB
  400281:	4e 55                	rex.WRX push rbp
  400283:	00 12                	add    BYTE PTR [rdx],dl
  400285:	1e                   	(bad)  
  400286:	4f 20 0e             	rex.WRXB and BYTE PTR [r14],r9b
  400289:	5c                   	pop    rsp
  40028a:	4d a6                	rex.WRB cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  40028c:	fa                   	cli    
  40028d:	2a 9a 01 ca 9d 03    	sub    bl,BYTE PTR [rdx+0x39dca01]
  400293:	94                   	xchg   esp,eax
  400294:	76 21                	jbe    4002b7 <_init-0x1541>
  400296:	14 95                	adc    al,0x95

Disassembly of section .gnu.hash:

0000000000400298 <.gnu.hash>:
  400298:	03 00                	add    eax,DWORD PTR [rax]
  40029a:	00 00                	add    BYTE PTR [rax],al
  40029c:	2f                   	(bad)  
  40029d:	00 00                	add    BYTE PTR [rax],al
  40029f:	00 02                	add    BYTE PTR [rdx],al
  4002a1:	00 00                	add    BYTE PTR [rax],al
  4002a3:	00 07                	add    BYTE PTR [rdi],al
  4002a5:	00 00                	add    BYTE PTR [rax],al
  4002a7:	00 40 85             	add    BYTE PTR [rax-0x7b],al
  4002aa:	14 41                	adc    al,0x41
  4002ac:	00 01                	add    BYTE PTR [rcx],al
  4002ae:	21 02                	and    DWORD PTR [rdx],eax
  4002b0:	20 04 24             	and    BYTE PTR [rsp],al
  4002b3:	00 10                	add    BYTE PTR [rax],dl
  4002b5:	1d 0f 29 2f 00       	sbb    eax,0x2f290f
  4002ba:	00 00                	add    BYTE PTR [rax],al
  4002bc:	33 00                	xor    eax,DWORD PTR [rax]
  4002be:	00 00                	add    BYTE PTR [rax],al
  4002c0:	37                   	(bad)  
  4002c1:	00 00                	add    BYTE PTR [rax],al
  4002c3:	00 72 96             	add    BYTE PTR [rdx-0x6a],dh
  4002c6:	07                   	(bad)  
  4002c7:	02 fc                	add    bh,ah
  4002c9:	6a 80                	push   0xffffffffffffff80
  4002cb:	23 f0                	and    esi,eax
  4002cd:	42                   	rex.X
  4002ce:	4e 75 35             	rex.WRX jne 400306 <_init-0x14f2>
  4002d1:	03 79 cf             	add    edi,DWORD PTR [rcx-0x31]
  4002d4:	72 bc                	jb     400292 <_init-0x1566>
  4002d6:	06                   	(bad)  
  4002d7:	3a 6a 95             	cmp    ch,BYTE PTR [rdx-0x6b]
  4002da:	b4 2d                	mov    ah,0x2d
  4002dc:	70 12                	jo     4002f0 <_init-0x1508>
  4002de:	77 63                	ja     400343 <_init-0x14b5>
  4002e0:	0f 84 1d e6 12 4c    	je     4c52e903 <_end+0x4bf21163>
  4002e6:	74 50                	je     400338 <_init-0x14c0>
  4002e8:	28 45 d5             	sub    BYTE PTR [rbp-0x2b],al
  4002eb:	4c 14 98             	rex.WR adc al,0x98
  4002ee:	0c 43                	or     al,0x43
  4002f0:	9e                   	sahf   
  4002f1:	1c 70                	sbb    al,0x70
  4002f3:	b8 78 49 6b b6       	mov    eax,0xb66b4978
  4002f8:	7a b4                	jp     4002ae <_init-0x154a>
  4002fa:	04 f1                	add    al,0xf1
  4002fc:	73 85                	jae    400283 <_init-0x1575>
  4002fe:	4c                   	rex.WR
  4002ff:	1b                   	.byte 0x1b

Disassembly of section .dynsym:

0000000000400300 <.dynsym>:
	...
  400318:	67 01 00             	add    DWORD PTR [eax],eax
  40031b:	00 12                	add    BYTE PTR [rdx],dl
	...
  40032d:	00 00                	add    BYTE PTR [rax],al
  40032f:	00 dd                	add    ch,bl
  400331:	06                   	(bad)  
  400332:	00 00                	add    BYTE PTR [rax],al
  400334:	12 00                	adc    al,BYTE PTR [rax]
	...
  400346:	00 00                	add    BYTE PTR [rax],al
  400348:	12 03                	adc    al,BYTE PTR [rbx]
  40034a:	00 00                	add    BYTE PTR [rax],al
  40034c:	12 00                	adc    al,BYTE PTR [rax]
	...
  40035e:	00 00                	add    BYTE PTR [rax],al
  400360:	fd                   	std    
  400361:	04 00                	add    al,0x0
  400363:	00 12                	add    BYTE PTR [rdx],dl
	...
  400375:	00 00                	add    BYTE PTR [rax],al
  400377:	00 10                	add    BYTE PTR [rax],dl
  400379:	00 00                	add    BYTE PTR [rax],al
  40037b:	00 20                	add    BYTE PTR [rax],ah
	...
  40038d:	00 00                	add    BYTE PTR [rax],al
  40038f:	00 1f                	add    BYTE PTR [rdi],bl
  400391:	00 00                	add    BYTE PTR [rax],al
  400393:	00 20                	add    BYTE PTR [rax],ah
	...
  4003a5:	00 00                	add    BYTE PTR [rax],al
  4003a7:	00 b6 01 00 00 12    	add    BYTE PTR [rsi+0x12000001],dh
	...
  4003bd:	00 00                	add    BYTE PTR [rax],al
  4003bf:	00 60 01             	add    BYTE PTR [rax+0x1],ah
  4003c2:	00 00                	add    BYTE PTR [rax],al
  4003c4:	12 00                	adc    al,BYTE PTR [rax]
	...
  4003d6:	00 00                	add    BYTE PTR [rax],al
  4003d8:	3f                   	(bad)  
  4003d9:	01 00                	add    DWORD PTR [rax],eax
  4003db:	00 12                	add    BYTE PTR [rdx],dl
	...
  4003ed:	00 00                	add    BYTE PTR [rax],al
  4003ef:	00 71 07             	add    BYTE PTR [rcx+0x7],dh
  4003f2:	00 00                	add    BYTE PTR [rax],al
  4003f4:	12 00                	adc    al,BYTE PTR [rax]
	...
  400406:	00 00                	add    BYTE PTR [rax],al
  400408:	fc                   	cld    
  400409:	05 00 00 12 00       	add    eax,0x120000
	...
  40041e:	00 00                	add    BYTE PTR [rax],al
  400420:	6d                   	ins    DWORD PTR es:[rdi],dx
  400421:	03 00                	add    eax,DWORD PTR [rax]
  400423:	00 12                	add    BYTE PTR [rdx],dl
	...
  400435:	00 00                	add    BYTE PTR [rax],al
  400437:	00 b0 04 00 00 12    	add    BYTE PTR [rax+0x12000004],dh
	...
  40044d:	00 00                	add    BYTE PTR [rax],al
  40044f:	00 b5 07 00 00 12    	add    BYTE PTR [rbp+0x12000007],dh
	...
  400465:	00 00                	add    BYTE PTR [rax],al
  400467:	00 8f 07 00 00 12    	add    BYTE PTR [rdi+0x12000007],cl
	...
  40047d:	00 00                	add    BYTE PTR [rax],al
  40047f:	00 f6                	add    dh,dh
  400481:	03 00                	add    eax,DWORD PTR [rax]
  400483:	00 12                	add    BYTE PTR [rdx],dl
	...
  400495:	00 00                	add    BYTE PTR [rax],al
  400497:	00 33                	add    BYTE PTR [rbx],dh
  400499:	00 00                	add    BYTE PTR [rax],al
  40049b:	00 20                	add    BYTE PTR [rax],ah
	...
  4004ad:	00 00                	add    BYTE PTR [rax],al
  4004af:	00 4f 00             	add    BYTE PTR [rdi+0x0],cl
  4004b2:	00 00                	add    BYTE PTR [rax],al
  4004b4:	20 00                	and    BYTE PTR [rax],al
	...
  4004c6:	00 00                	add    BYTE PTR [rax],al
  4004c8:	89 06                	mov    DWORD PTR [rsi],eax
  4004ca:	00 00                	add    BYTE PTR [rax],al
  4004cc:	12 00                	adc    al,BYTE PTR [rax]
	...
  4004de:	00 00                	add    BYTE PTR [rax],al
  4004e0:	9f                   	lahf   
  4004e1:	04 00                	add    al,0x0
  4004e3:	00 12                	add    BYTE PTR [rdx],dl
	...
  4004f5:	00 00                	add    BYTE PTR [rax],al
  4004f7:	00 9d 03 00 00 12    	add    BYTE PTR [rbp+0x12000003],bl
	...
  40050d:	00 00                	add    BYTE PTR [rax],al
  40050f:	00 d5                	add    ch,dl
  400511:	01 00                	add    DWORD PTR [rax],eax
  400513:	00 12                	add    BYTE PTR [rdx],dl
	...
  400525:	00 00                	add    BYTE PTR [rax],al
  400527:	00 ad 07 00 00 12    	add    BYTE PTR [rbp+0x12000007],ch
	...
  40053d:	00 00                	add    BYTE PTR [rax],al
  40053f:	00 3f                	add    BYTE PTR [rdi],bh
  400541:	04 00                	add    al,0x0
  400543:	00 12                	add    BYTE PTR [rdx],dl
	...
  400555:	00 00                	add    BYTE PTR [rax],al
  400557:	00 cf                	add    bh,cl
  400559:	06                   	(bad)  
  40055a:	00 00                	add    BYTE PTR [rax],al
  40055c:	12 00                	adc    al,BYTE PTR [rax]
	...
  40056e:	00 00                	add    BYTE PTR [rax],al
  400570:	f1                   	icebp  
  400571:	02 00                	add    al,BYTE PTR [rax]
  400573:	00 12                	add    BYTE PTR [rdx],dl
	...
  400585:	00 00                	add    BYTE PTR [rax],al
  400587:	00 7e 07             	add    BYTE PTR [rsi+0x7],bh
  40058a:	00 00                	add    BYTE PTR [rax],al
  40058c:	12 00                	adc    al,BYTE PTR [rax]
	...
  40059e:	00 00                	add    BYTE PTR [rax],al
  4005a0:	af                   	scas   eax,DWORD PTR es:[rdi]
  4005a1:	02 00                	add    al,BYTE PTR [rax]
  4005a3:	00 12                	add    BYTE PTR [rdx],dl
	...
  4005b5:	00 00                	add    BYTE PTR [rax],al
  4005b7:	00 bc 01 00 00 12 00 	add    BYTE PTR [rcx+rax*1+0x120000],bh
	...
  4005ce:	00 00                	add    BYTE PTR [rax],al
  4005d0:	e7 05                	out    0x5,eax
  4005d2:	00 00                	add    BYTE PTR [rax],al
  4005d4:	12 00                	adc    al,BYTE PTR [rax]
	...
  4005e6:	00 00                	add    BYTE PTR [rax],al
  4005e8:	ab                   	stos   DWORD PTR es:[rdi],eax
  4005e9:	01 00                	add    DWORD PTR [rax],eax
  4005eb:	00 12                	add    BYTE PTR [rdx],dl
	...
  4005fd:	00 00                	add    BYTE PTR [rax],al
  4005ff:	00 10                	add    BYTE PTR [rax],dl
  400601:	05 00 00 12 00       	add    eax,0x120000
	...
  400616:	00 00                	add    BYTE PTR [rax],al
  400618:	2a 03                	sub    al,BYTE PTR [rbx]
  40061a:	00 00                	add    BYTE PTR [rax],al
  40061c:	12 00                	adc    al,BYTE PTR [rax]
	...
  40062e:	00 00                	add    BYTE PTR [rax],al
  400630:	c2 02 00             	ret    0x2
  400633:	00 12                	add    BYTE PTR [rdx],dl
	...
  400645:	00 00                	add    BYTE PTR [rax],al
  400647:	00 93 04 00 00 12    	add    BYTE PTR [rbx+0x12000004],dl
	...
  40065d:	00 00                	add    BYTE PTR [rax],al
  40065f:	00 dd                	add    ch,bl
  400661:	03 00                	add    eax,DWORD PTR [rax]
  400663:	00 12                	add    BYTE PTR [rdx],dl
	...
  400675:	00 00                	add    BYTE PTR [rax],al
  400677:	00 48 05             	add    BYTE PTR [rax+0x5],cl
  40067a:	00 00                	add    BYTE PTR [rax],al
  40067c:	12 00                	adc    al,BYTE PTR [rax]
	...
  40068e:	00 00                	add    BYTE PTR [rax],al
  400690:	23 02                	and    eax,DWORD PTR [rdx]
  400692:	00 00                	add    BYTE PTR [rax],al
  400694:	12 00                	adc    al,BYTE PTR [rax]
	...
  4006a6:	00 00                	add    BYTE PTR [rax],al
  4006a8:	81 00 00 00 12 00    	add    DWORD PTR [rax],0x120000
	...
  4006be:	00 00                	add    BYTE PTR [rax],al
  4006c0:	84 04 00             	test   BYTE PTR [rax+rax*1],al
  4006c3:	00 12                	add    BYTE PTR [rdx],dl
	...
  4006d5:	00 00                	add    BYTE PTR [rax],al
  4006d7:	00 58 07             	add    BYTE PTR [rax+0x7],bl
  4006da:	00 00                	add    BYTE PTR [rax],al
  4006dc:	12 00                	adc    al,BYTE PTR [rax]
	...
  4006ee:	00 00                	add    BYTE PTR [rax],al
  4006f0:	5e                   	pop    rsi
  4006f1:	02 00                	add    al,BYTE PTR [rax]
  4006f3:	00 12                	add    BYTE PTR [rdx],dl
	...
  400705:	00 00                	add    BYTE PTR [rax],al
  400707:	00 45 07             	add    BYTE PTR [rbp+0x7],al
  40070a:	00 00                	add    BYTE PTR [rax],al
  40070c:	12 00                	adc    al,BYTE PTR [rax]
	...
  40071e:	00 00                	add    BYTE PTR [rax],al
  400720:	33 01                	xor    eax,DWORD PTR [rcx]
  400722:	00 00                	add    BYTE PTR [rax],al
  400724:	12 00                	adc    al,BYTE PTR [rax]
	...
  400736:	00 00                	add    BYTE PTR [rax],al
  400738:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  400739:	07                   	(bad)  
  40073a:	00 00                	add    BYTE PTR [rax],al
  40073c:	12 00                	adc    al,BYTE PTR [rax]
	...
  40074e:	00 00                	add    BYTE PTR [rax],al
  400750:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400751:	02 00                	add    al,BYTE PTR [rax]
  400753:	00 12                	add    BYTE PTR [rdx],dl
	...
  400765:	00 00                	add    BYTE PTR [rax],al
  400767:	00 8a 04 00 00 11    	add    BYTE PTR [rdx+0x11000004],cl
  40076d:	00 1b                	add    BYTE PTR [rbx],bl
  40076f:	00 c0                	add    al,al
  400771:	d2 60 00             	shl    BYTE PTR [rax+0x0],cl
  400774:	00 00                	add    BYTE PTR [rax],al
  400776:	00 00                	add    BYTE PTR [rax],al
  400778:	18 01                	sbb    BYTE PTR [rcx],al
  40077a:	00 00                	add    BYTE PTR [rax],al
  40077c:	00 00                	add    BYTE PTR [rax],al
  40077e:	00 00                	add    BYTE PTR [rax],al
  400780:	40 06                	rex (bad) 
  400782:	00 00                	add    BYTE PTR [rax],al
  400784:	21 00                	and    DWORD PTR [rax],eax
  400786:	1b 00                	sbb    eax,DWORD PTR [rax]
  400788:	d8 d3                	fcom   st(3)
  40078a:	60                   	(bad)  
  40078b:	00 00                	add    BYTE PTR [rax],al
  40078d:	00 00                	add    BYTE PTR [rax],al
  40078f:	00 78 00             	add    BYTE PTR [rax+0x0],bh
  400792:	00 00                	add    BYTE PTR [rax],al
  400794:	00 00                	add    BYTE PTR [rax],al
  400796:	00 00                	add    BYTE PTR [rax],al
  400798:	e7 06                	out    0x6,eax
  40079a:	00 00                	add    BYTE PTR [rax],al
  40079c:	21 00                	and    DWORD PTR [rax],eax
  40079e:	1b 00                	sbb    eax,DWORD PTR [rax]
  4007a0:	60                   	(bad)  
  4007a1:	d4                   	(bad)  
  4007a2:	60                   	(bad)  
  4007a3:	00 00                	add    BYTE PTR [rax],al
  4007a5:	00 00                	add    BYTE PTR [rax],al
  4007a7:	00 18                	add    BYTE PTR [rax],bl
  4007a9:	00 00                	add    BYTE PTR [rax],al
  4007ab:	00 00                	add    BYTE PTR [rax],al
  4007ad:	00 00                	add    BYTE PTR [rax],al
  4007af:	00 c9                	add    cl,cl
  4007b1:	02 00                	add    al,BYTE PTR [rax]
  4007b3:	00 21                	add    BYTE PTR [rcx],ah
  4007b5:	00 1b                	add    BYTE PTR [rbx],bl
  4007b7:	00 00                	add    BYTE PTR [rax],al
  4007b9:	d7                   	xlat   BYTE PTR ds:[rbx]
  4007ba:	60                   	(bad)  
  4007bb:	00 00                	add    BYTE PTR [rax],al
  4007bd:	00 00                	add    BYTE PTR [rax],al
  4007bf:	00 48 00             	add    BYTE PTR [rax+0x0],cl
  4007c2:	00 00                	add    BYTE PTR [rax],al
  4007c4:	00 00                	add    BYTE PTR [rax],al
  4007c6:	00 00                	add    BYTE PTR [rax],al
  4007c8:	85 01                	test   DWORD PTR [rcx],eax
  4007ca:	00 00                	add    BYTE PTR [rax],al
  4007cc:	21 00                	and    DWORD PTR [rax],eax
  4007ce:	1b 00                	sbb    eax,DWORD PTR [rax]
  4007d0:	80 d4 60             	adc    ah,0x60
  4007d3:	00 00                	add    BYTE PTR [rax],al
  4007d5:	00 00                	add    BYTE PTR [rax],al
  4007d7:	00 20                	add    BYTE PTR [rax],ah
  4007d9:	00 00                	add    BYTE PTR [rax],al
  4007db:	00 00                	add    BYTE PTR [rax],al
  4007dd:	00 00                	add    BYTE PTR [rax],al
  4007df:	00 ab 05 00 00 21    	add    BYTE PTR [rbx+0x21000005],ch
  4007e5:	00 1b                	add    BYTE PTR [rbx],bl
  4007e7:	00 a0 d4 60 00 00    	add    BYTE PTR [rax+0x60d4],ah
  4007ed:	00 00                	add    BYTE PTR [rax],al
  4007ef:	00 80 00 00 00 00    	add    BYTE PTR [rax+0x0],al
  4007f5:	00 00                	add    BYTE PTR [rax],al
  4007f7:	00 85 03 00 00 12    	add    BYTE PTR [rbp+0x12000003],al
  4007fd:	00 00                	add    BYTE PTR [rax],al
  4007ff:	00 f0                	add    al,dh
  400801:	18 40 00             	sbb    BYTE PTR [rax+0x0],al
	...
  400810:	9c                   	pushf  
  400811:	07                   	(bad)  
  400812:	00 00                	add    BYTE PTR [rax],al
  400814:	12 00                	adc    al,BYTE PTR [rax]
  400816:	00 00                	add    BYTE PTR [rax],al
  400818:	80 19 40             	sbb    BYTE PTR [rcx],0x40
	...
  400827:	00 c8                	add    al,cl
  400829:	00 00                	add    BYTE PTR [rax],al
  40082b:	00 21                	add    BYTE PTR [rcx],ah
  40082d:	00 1b                	add    BYTE PTR [rbx],bl
  40082f:	00 20                	add    BYTE PTR [rax],ah
  400831:	d5                   	(bad)  
  400832:	60                   	(bad)  
  400833:	00 00                	add    BYTE PTR [rax],al
  400835:	00 00                	add    BYTE PTR [rax],al
  400837:	00 40 00             	add    BYTE PTR [rax+0x0],al
  40083a:	00 00                	add    BYTE PTR [rax],al
  40083c:	00 00                	add    BYTE PTR [rax],al
  40083e:	00 00                	add    BYTE PTR [rax],al
  400840:	69 00 00 00 12 00    	imul   eax,DWORD PTR [rax],0x120000
  400846:	00 00                	add    BYTE PTR [rax],al
  400848:	20 19                	and    BYTE PTR [rcx],bl
  40084a:	40 00 00             	add    BYTE PTR [rax],al
	...
  400855:	00 00                	add    BYTE PTR [rax],al
  400857:	00 7f 06             	add    BYTE PTR [rdi+0x6],bh
  40085a:	00 00                	add    BYTE PTR [rax],al
  40085c:	11 00                	adc    DWORD PTR [rax],eax
  40085e:	1b 00                	sbb    eax,DWORD PTR [rax]
  400860:	60                   	(bad)  
  400861:	d5                   	(bad)  
  400862:	60                   	(bad)  
  400863:	00 00                	add    BYTE PTR [rax],al
  400865:	00 00                	add    BYTE PTR [rax],al
  400867:	00 10                	add    BYTE PTR [rax],dl
  400869:	01 00                	add    DWORD PTR [rax],eax
  40086b:	00 00                	add    BYTE PTR [rax],al
  40086d:	00 00                	add    BYTE PTR [rax],al
  40086f:	00 f1                	add    cl,dh
  400871:	00 00                	add    BYTE PTR [rax],al
  400873:	00 21                	add    BYTE PTR [rcx],ah
  400875:	00 1b                	add    BYTE PTR [rbx],bl
  400877:	00 80 d6 60 00 00    	add    BYTE PTR [rax+0x60d6],al
  40087d:	00 00                	add    BYTE PTR [rax],al
  40087f:	00 80 00 00 00 00    	add    BYTE PTR [rax+0x0],al
  400885:	00 00                	add    BYTE PTR [rax],al
  400887:	00 1e                	add    BYTE PTR [rsi],bl
  400889:	01 00                	add    DWORD PTR [rax],eax
  40088b:	00 12                	add    BYTE PTR [rdx],dl
  40088d:	00 00                	add    BYTE PTR [rax],al
  40088f:	00 90 1a 40 00 00    	add    BYTE PTR [rax+0x401a],dl
	...
  40089d:	00 00                	add    BYTE PTR [rax],al
  40089f:	00 fc                	add    ah,bh
  4008a1:	06                   	(bad)  
  4008a2:	00 00                	add    BYTE PTR [rax],al
  4008a4:	21 00                	and    DWORD PTR [rax],eax
  4008a6:	1b 00                	sbb    eax,DWORD PTR [rax]
  4008a8:	48 d7                	rex.W xlat BYTE PTR ds:[rbx]
  4008aa:	60                   	(bad)  
  4008ab:	00 00                	add    BYTE PTR [rax],al
  4008ad:	00 00                	add    BYTE PTR [rax],al
  4008af:	00 50 00             	add    BYTE PTR [rax+0x0],dl
  4008b2:	00 00                	add    BYTE PTR [rax],al
  4008b4:	00 00                	add    BYTE PTR [rax],al
  4008b6:	00 00                	add    BYTE PTR [rax],al
  4008b8:	2d 05 00 00 22       	sub    eax,0x22000005
  4008bd:	00 0e                	add    BYTE PTR [rsi],cl
  4008bf:	00 50 8b             	add    BYTE PTR [rax-0x75],dl
  4008c2:	40 00 00             	add    BYTE PTR [rax],al
  4008c5:	00 00                	add    BYTE PTR [rax],al
  4008c7:	00 03                	add    BYTE PTR [rbx],al
  4008c9:	00 00                	add    BYTE PTR [rax],al
  4008cb:	00 00                	add    BYTE PTR [rax],al
  4008cd:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .dynstr:

00000000004008d0 <.dynstr>:
  4008d0:	00 6c 69 62          	add    BYTE PTR [rcx+rbp*2+0x62],ch
  4008d4:	73 74                	jae    40094a <_init-0xeae>
  4008d6:	64 63 2b             	movsxd ebp,DWORD PTR fs:[rbx]
  4008d9:	2b 2e                	sub    ebp,DWORD PTR [rsi]
  4008db:	73 6f                	jae    40094c <_init-0xeac>
  4008dd:	2e 36 00 5f 5f       	cs add BYTE PTR ss:[rdi+0x5f],bl
  4008e2:	67 6d                	ins    DWORD PTR es:[edi],dx
  4008e4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  4008e5:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  4008e6:	5f                   	pop    rdi
  4008e7:	73 74                	jae    40095d <_init-0xe9b>
  4008e9:	61                   	(bad)  
  4008ea:	72 74                	jb     400960 <_init-0xe98>
  4008ec:	5f                   	pop    rdi
  4008ed:	5f                   	pop    rdi
  4008ee:	00 5f 4a             	add    BYTE PTR [rdi+0x4a],bl
  4008f1:	76 5f                	jbe    400952 <_init-0xea6>
  4008f3:	52                   	push   rdx
  4008f4:	65 67 69 73 74 65 72 	imul   esi,DWORD PTR gs:[ebx+0x74],0x6c437265
  4008fb:	43 6c 
  4008fd:	61                   	(bad)  
  4008fe:	73 73                	jae    400973 <_init-0xe85>
  400900:	65 73 00             	gs jae 400903 <_init-0xef5>
  400903:	5f                   	pop    rdi
  400904:	49 54                	rex.WB push r12
  400906:	4d 5f                	rex.WRB pop r15
  400908:	64 65 72 65          	fs gs jb 400971 <_init-0xe87>
  40090c:	67 69 73 74 65 72 54 	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
  400913:	4d 
  400914:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
  400916:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400917:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  400918:	65 54                	gs push rsp
  40091a:	61                   	(bad)  
  40091b:	62                   	(bad)  
  40091c:	6c                   	ins    BYTE PTR es:[rdi],dx
  40091d:	65 00 5f 49          	add    BYTE PTR gs:[rdi+0x49],bl
  400921:	54                   	push   rsp
  400922:	4d 5f                	rex.WRB pop r15
  400924:	72 65                	jb     40098b <_init-0xe6d>
  400926:	67 69 73 74 65 72 54 	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
  40092d:	4d 
  40092e:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
  400930:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400931:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  400932:	65 54                	gs push rsp
  400934:	61                   	(bad)  
  400935:	62                   	(bad)  
  400936:	6c                   	ins    BYTE PTR es:[rdi],dx
  400937:	65 00 5f 5a          	add    BYTE PTR gs:[rdi+0x5a],bl
  40093b:	4e 53                	rex.WRX push rbx
  40093d:	74 38                	je     400977 <_init-0xe81>
  40093f:	69 6f 73 5f 62 61 73 	imul   ebp,DWORD PTR [rdi+0x73],0x7361625f
  400946:	65 34 49             	gs xor al,0x49
  400949:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  40094a:	69 74 44 31 45 76 00 	imul   esi,DWORD PTR [rsp+rax*2+0x31],0x5f007645
  400951:	5f 
  400952:	5a                   	pop    rdx
  400953:	4e 53                	rex.WRX push rbx
  400955:	74 37                	je     40098e <_init-0xe6a>
  400957:	5f                   	pop    rdi
  400958:	5f                   	pop    rdi
  400959:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  40095c:	31 31                	xor    DWORD PTR [rcx],esi
  40095e:	31 32                	xor    DWORD PTR [rdx],esi
  400960:	62 61                	(bad)  
  400962:	73 69                	jae    4009cd <_init-0xe2b>
  400964:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400967:	74 72                	je     4009db <_init-0xe1d>
  400969:	69 6e 67 49 63 53 74 	imul   ebp,DWORD PTR [rsi+0x67],0x74536349
  400970:	31 31                	xor    DWORD PTR [rcx],esi
  400972:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400975:	72 5f                	jb     4009d6 <_init-0xe22>
  400977:	74 72                	je     4009eb <_init-0xe0d>
  400979:	61                   	(bad)  
  40097a:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400981:	61 
  400982:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400986:	39 5f 4d             	cmp    DWORD PTR [rdi+0x4d],ebx
  400989:	5f                   	pop    rdi
  40098a:	6d                   	ins    DWORD PTR es:[rdi],dx
  40098b:	75 74                	jne    400a01 <_init-0xdf7>
  40098d:	61                   	(bad)  
  40098e:	74 65                	je     4009f5 <_init-0xe03>
  400990:	45 6d                	rex.RB ins DWORD PTR es:[rdi],dx
  400992:	6d                   	ins    DWORD PTR es:[rdi],dx
  400993:	50                   	push   rax
  400994:	4b 63 6d 00          	rex.WXB movsxd rbp,DWORD PTR [r13+0x0]
  400998:	5f                   	pop    rdi
  400999:	5a                   	pop    rdx
  40099a:	54                   	push   rsp
  40099b:	56                   	push   rsi
  40099c:	4e 31 30             	rex.WRX xor QWORD PTR [rax],r14
  40099f:	5f                   	pop    rdi
  4009a0:	5f                   	pop    rdi
  4009a1:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  4009a4:	61                   	(bad)  
  4009a5:	62                   	(bad)  
  4009a6:	69 76 31 32 30 5f 5f 	imul   esi,DWORD PTR [rsi+0x31],0x5f5f3032
  4009ad:	66 75 6e             	data16 jne 400a1e <_init-0xdda>
  4009b0:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  4009b4:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  4009b5:	5f                   	pop    rdi
  4009b6:	74 79                	je     400a31 <_init-0xdc7>
  4009b8:	70 65                	jo     400a1f <_init-0xdd9>
  4009ba:	5f                   	pop    rdi
  4009bb:	69 6e 66 6f 45 00 5f 	imul   ebp,DWORD PTR [rsi+0x66],0x5f00456f
  4009c2:	5a                   	pop    rdx
  4009c3:	54                   	push   rsp
  4009c4:	56                   	push   rsi
  4009c5:	53                   	push   rbx
  4009c6:	74 31                	je     4009f9 <_init-0xdff>
  4009c8:	35 62 61 73 69       	xor    eax,0x69736162
  4009cd:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  4009d0:	74 72                	je     400a44 <_init-0xdb4>
  4009d2:	65 61                	gs (bad) 
  4009d4:	6d                   	ins    DWORD PTR es:[rdi],dx
  4009d5:	62                   	(bad)  
  4009d6:	75 66                	jne    400a3e <_init-0xdba>
  4009d8:	49 63 53 74          	movsxd rdx,DWORD PTR [r11+0x74]
  4009dc:	31 31                	xor    DWORD PTR [rcx],esi
  4009de:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  4009e1:	72 5f                	jb     400a42 <_init-0xdb6>
  4009e3:	74 72                	je     400a57 <_init-0xda1>
  4009e5:	61                   	(bad)  
  4009e6:	69 74 73 49 63 45 45 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x454563
  4009ed:	00 
  4009ee:	5f                   	pop    rdi
  4009ef:	5f                   	pop    rdi
  4009f0:	67 78 78             	addr32 js 400a6b <_init-0xd8d>
  4009f3:	5f                   	pop    rdi
  4009f4:	70 65                	jo     400a5b <_init-0xd9d>
  4009f6:	72 73                	jb     400a6b <_init-0xd8d>
  4009f8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  4009f9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  4009fa:	61                   	(bad)  
  4009fb:	6c                   	ins    BYTE PTR es:[rdi],dx
  4009fc:	69 74 79 5f 76 30 00 	imul   esi,DWORD PTR [rcx+rdi*2+0x5f],0x5f003076
  400a03:	5f 
  400a04:	5a                   	pop    rdx
  400a05:	4e 53                	rex.WRX push rbx
  400a07:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400a08:	33 70 75             	xor    esi,DWORD PTR [rax+0x75]
  400a0b:	74 45                	je     400a52 <_init-0xda6>
  400a0d:	63 00                	movsxd eax,DWORD PTR [rax]
  400a0f:	5f                   	pop    rdi
  400a10:	5a                   	pop    rdx
  400a11:	4e                   	rex.WRX
  400a12:	4b 53                	rex.WXB push r11
  400a14:	74 35                	je     400a4b <_init-0xdad>
  400a16:	63 74 79 70          	movsxd esi,DWORD PTR [rcx+rdi*2+0x70]
  400a1a:	65 49 63 45 31       	movsxd rax,DWORD PTR gs:[r13+0x31]
  400a1f:	33 5f 4d             	xor    ebx,DWORD PTR [rdi+0x4d]
  400a22:	5f                   	pop    rdi
  400a23:	77 69                	ja     400a8e <_init-0xd6a>
  400a25:	64 65 6e             	fs outs dx,BYTE PTR gs:[rsi]
  400a28:	5f                   	pop    rdi
  400a29:	69 6e 69 74 45 76 00 	imul   ebp,DWORD PTR [rsi+0x69],0x764574
  400a30:	5f                   	pop    rdi
  400a31:	5a                   	pop    rdx
  400a32:	64 6c                	fs ins BYTE PTR es:[rdi],dx
  400a34:	50                   	push   rax
  400a35:	76 00                	jbe    400a37 <_init-0xdc1>
  400a37:	5f                   	pop    rdi
  400a38:	5a                   	pop    rdx
  400a39:	53                   	push   rbx
  400a3a:	74 32                	je     400a6e <_init-0xd8a>
  400a3c:	30 5f 5f             	xor    BYTE PTR [rdi+0x5f],bl
  400a3f:	74 68                	je     400aa9 <_init-0xd4f>
  400a41:	72 6f                	jb     400ab2 <_init-0xd46>
  400a43:	77 5f                	ja     400aa4 <_init-0xd54>
  400a45:	6c                   	ins    BYTE PTR es:[rdi],dx
  400a46:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  400a48:	67 74 68             	addr32 je 400ab3 <_init-0xd45>
  400a4b:	5f                   	pop    rdi
  400a4c:	65 72 72             	gs jb  400ac1 <_init-0xd37>
  400a4f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400a50:	72 50                	jb     400aa2 <_init-0xd56>
  400a52:	4b 63 00             	rex.WXB movsxd rax,DWORD PTR [r8]
  400a55:	5f                   	pop    rdi
  400a56:	5a                   	pop    rdx
  400a57:	54                   	push   rsp
  400a58:	56                   	push   rsi
  400a59:	53                   	push   rbx
  400a5a:	74 39                	je     400a95 <_init-0xd63>
  400a5c:	62 61                	(bad)  
  400a5e:	73 69                	jae    400ac9 <_init-0xd2f>
  400a60:	63 5f 69             	movsxd ebx,DWORD PTR [rdi+0x69]
  400a63:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400a64:	73 49                	jae    400aaf <_init-0xd49>
  400a66:	63 53 74             	movsxd edx,DWORD PTR [rbx+0x74]
  400a69:	31 31                	xor    DWORD PTR [rcx],esi
  400a6b:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400a6e:	72 5f                	jb     400acf <_init-0xd29>
  400a70:	74 72                	je     400ae4 <_init-0xd14>
  400a72:	61                   	(bad)  
  400a73:	69 74 73 49 63 45 45 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x454563
  400a7a:	00 
  400a7b:	5f                   	pop    rdi
  400a7c:	5a                   	pop    rdx
  400a7d:	4e 53                	rex.WRX push rbx
  400a7f:	69 72 73 45 52 69 00 	imul   esi,DWORD PTR [rdx+0x73],0x695245
  400a86:	5f                   	pop    rdi
  400a87:	5a                   	pop    rdx
  400a88:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  400a89:	61                   	(bad)  
  400a8a:	6d                   	ins    DWORD PTR es:[rdi],dx
  400a8b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
  400a8e:	63 78 61             	movsxd edi,DWORD PTR [rax+0x61]
  400a91:	5f                   	pop    rdi
  400a92:	61                   	(bad)  
  400a93:	6c                   	ins    BYTE PTR es:[rdi],dx
  400a94:	6c                   	ins    BYTE PTR es:[rdi],dx
  400a95:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400a96:	63 61 74             	movsxd esp,DWORD PTR [rcx+0x74]
  400a99:	65 5f                	gs pop rdi
  400a9b:	65 78 63             	gs js  400b01 <_init-0xcf7>
  400a9e:	65 70 74             	gs jo  400b15 <_init-0xce3>
  400aa1:	69 6f 6e 00 5f 5a 53 	imul   ebp,DWORD PTR [rdi+0x6e],0x535a5f00
  400aa8:	74 31                	je     400adb <_init-0xd1d>
  400aaa:	36 5f                	ss pop rdi
  400aac:	5f                   	pop    rdi
  400aad:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400aae:	73 74                	jae    400b24 <_init-0xcd4>
  400ab0:	72 65                	jb     400b17 <_init-0xce1>
  400ab2:	61                   	(bad)  
  400ab3:	6d                   	ins    DWORD PTR es:[rdi],dx
  400ab4:	5f                   	pop    rdi
  400ab5:	69 6e 73 65 72 74 49 	imul   ebp,DWORD PTR [rsi+0x73],0x49747265
  400abc:	63 53 74             	movsxd edx,DWORD PTR [rbx+0x74]
  400abf:	31 31                	xor    DWORD PTR [rcx],esi
  400ac1:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400ac4:	72 5f                	jb     400b25 <_init-0xcd3>
  400ac6:	74 72                	je     400b3a <_init-0xcbe>
  400ac8:	61                   	(bad)  
  400ac9:	69 74 73 49 63 45 45 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x52454563
  400ad0:	52 
  400ad1:	53                   	push   rbx
  400ad2:	74 31                	je     400b05 <_init-0xcf3>
  400ad4:	33 62 61             	xor    esp,DWORD PTR [rdx+0x61]
  400ad7:	73 69                	jae    400b42 <_init-0xcb6>
  400ad9:	63 5f 6f             	movsxd ebx,DWORD PTR [rdi+0x6f]
  400adc:	73 74                	jae    400b52 <_init-0xca6>
  400ade:	72 65                	jb     400b45 <_init-0xcb3>
  400ae0:	61                   	(bad)  
  400ae1:	6d                   	ins    DWORD PTR es:[rdi],dx
  400ae2:	49 54                	rex.WB push r12
  400ae4:	5f                   	pop    rdi
  400ae5:	54                   	push   rsp
  400ae6:	30 5f 45             	xor    BYTE PTR [rdi+0x45],bl
  400ae9:	53                   	push   rbx
  400aea:	36 5f                	ss pop rdi
  400aec:	50                   	push   rax
  400aed:	4b 53                	rex.WXB push r11
  400aef:	33 5f 6c             	xor    ebx,DWORD PTR [rdi+0x6c]
  400af2:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400af5:	53                   	push   rbx
  400af6:	74 34                	je     400b2c <_init-0xccc>
  400af8:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  400afa:	64 6c                	fs ins BYTE PTR es:[rdi],dx
  400afc:	49 63 53 74          	movsxd rdx,DWORD PTR [r11+0x74]
  400b00:	31 31                	xor    DWORD PTR [rcx],esi
  400b02:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400b05:	72 5f                	jb     400b66 <_init-0xc92>
  400b07:	74 72                	je     400b7b <_init-0xc7d>
  400b09:	61                   	(bad)  
  400b0a:	69 74 73 49 63 45 45 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x52454563
  400b11:	52 
  400b12:	53                   	push   rbx
  400b13:	74 31                	je     400b46 <_init-0xcb2>
  400b15:	33 62 61             	xor    esp,DWORD PTR [rdx+0x61]
  400b18:	73 69                	jae    400b83 <_init-0xc75>
  400b1a:	63 5f 6f             	movsxd ebx,DWORD PTR [rdi+0x6f]
  400b1d:	73 74                	jae    400b93 <_init-0xc65>
  400b1f:	72 65                	jb     400b86 <_init-0xc72>
  400b21:	61                   	(bad)  
  400b22:	6d                   	ins    DWORD PTR es:[rdi],dx
  400b23:	49 54                	rex.WB push r12
  400b25:	5f                   	pop    rdi
  400b26:	54                   	push   rsp
  400b27:	30 5f 45             	xor    BYTE PTR [rdi+0x45],bl
  400b2a:	53                   	push   rbx
  400b2b:	36 5f                	ss pop rdi
  400b2d:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400b30:	4e 53                	rex.WRX push rbx
  400b32:	74 36                	je     400b6a <_init-0xc8e>
  400b34:	6c                   	ins    BYTE PTR es:[rdi],dx
  400b35:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400b36:	63 61 6c             	movsxd esp,DWORD PTR [rcx+0x6c]
  400b39:	65 44 31 45 76       	xor    DWORD PTR gs:[rbp+0x76],r8d
  400b3e:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400b41:	4e 53                	rex.WRX push rbx
  400b43:	74 37                	je     400b7c <_init-0xc7c>
  400b45:	5f                   	pop    rdi
  400b46:	5f                   	pop    rdi
  400b47:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400b4a:	31 31                	xor    DWORD PTR [rcx],esi
  400b4c:	31 38                	xor    DWORD PTR [rax],edi
  400b4e:	62 61                	(bad)  
  400b50:	73 69                	jae    400bbb <_init-0xc3d>
  400b52:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400b55:	74 72                	je     400bc9 <_init-0xc2f>
  400b57:	69 6e 67 73 74 72 65 	imul   ebp,DWORD PTR [rsi+0x67],0x65727473
  400b5e:	61                   	(bad)  
  400b5f:	6d                   	ins    DWORD PTR es:[rdi],dx
  400b60:	49 63 53 74          	movsxd rdx,DWORD PTR [r11+0x74]
  400b64:	31 31                	xor    DWORD PTR [rcx],esi
  400b66:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400b69:	72 5f                	jb     400bca <_init-0xc2e>
  400b6b:	74 72                	je     400bdf <_init-0xc19>
  400b6d:	61                   	(bad)  
  400b6e:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400b75:	61 
  400b76:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400b7a:	44 31 45 76          	xor    DWORD PTR [rbp+0x76],r8d
  400b7e:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400b81:	4e 53                	rex.WRX push rbx
  400b83:	74 38                	je     400bbd <_init-0xc3b>
  400b85:	69 6f 73 5f 62 61 73 	imul   ebp,DWORD PTR [rdi+0x73],0x7361625f
  400b8c:	65 44 32 45 76       	xor    r8b,BYTE PTR gs:[rbp+0x76]
  400b91:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400b94:	64 61                	fs (bad) 
  400b96:	50                   	push   rax
  400b97:	76 00                	jbe    400b99 <_init-0xc5f>
  400b99:	5f                   	pop    rdi
  400b9a:	5a                   	pop    rdx
  400b9b:	54                   	push   rsp
  400b9c:	56                   	push   rsi
  400b9d:	4e 31 30             	rex.WRX xor QWORD PTR [rax],r14
  400ba0:	5f                   	pop    rdi
  400ba1:	5f                   	pop    rdi
  400ba2:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400ba5:	61                   	(bad)  
  400ba6:	62                   	(bad)  
  400ba7:	69 76 31 31 39 5f 5f 	imul   esi,DWORD PTR [rsi+0x31],0x5f5f3931
  400bae:	70 6f                	jo     400c1f <_init-0xbd9>
  400bb0:	69 6e 74 65 72 5f 74 	imul   ebp,DWORD PTR [rsi+0x74],0x745f7265
  400bb7:	79 70                	jns    400c29 <_init-0xbcf>
  400bb9:	65 5f                	gs pop rdi
  400bbb:	69 6e 66 6f 45 00 5f 	imul   ebp,DWORD PTR [rsi+0x66],0x5f00456f
  400bc2:	5a                   	pop    rdx
  400bc3:	53                   	push   rbx
  400bc4:	74 32                	je     400bf8 <_init-0xc00>
  400bc6:	35 5f 5f 74 68       	xor    eax,0x68745f5f
  400bcb:	72 6f                	jb     400c3c <_init-0xbbc>
  400bcd:	77 5f                	ja     400c2e <_init-0xbca>
  400bcf:	62 61 64 5f 66       	(bad)  {k7}
  400bd4:	75 6e                	jne    400c44 <_init-0xbb4>
  400bd6:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  400bda:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  400bdb:	5f                   	pop    rdi
  400bdc:	63 61 6c             	movsxd esp,DWORD PTR [rcx+0x6c]
  400bdf:	6c                   	ins    BYTE PTR es:[rdi],dx
  400be0:	76 00                	jbe    400be2 <_init-0xc16>
  400be2:	5f                   	pop    rdi
  400be3:	5a                   	pop    rdx
  400be4:	53                   	push   rbx
  400be5:	74 31                	je     400c18 <_init-0xbe0>
  400be7:	36 5f                	ss pop rdi
  400be9:	5f                   	pop    rdi
  400bea:	74 68                	je     400c54 <_init-0xba4>
  400bec:	72 6f                	jb     400c5d <_init-0xb9b>
  400bee:	77 5f                	ja     400c4f <_init-0xba9>
  400bf0:	62 61 64 5f 63       	(bad)  {k7}
  400bf5:	61                   	(bad)  
  400bf6:	73 74                	jae    400c6c <_init-0xb8c>
  400bf8:	76 00                	jbe    400bfa <_init-0xbfe>
  400bfa:	5f                   	pop    rdi
  400bfb:	5a                   	pop    rdx
  400bfc:	4e                   	rex.WRX
  400bfd:	4b 53                	rex.WXB push r11
  400bff:	74 37                	je     400c38 <_init-0xbc0>
  400c01:	5f                   	pop    rdi
  400c02:	5f                   	pop    rdi
  400c03:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400c06:	31 31                	xor    DWORD PTR [rcx],esi
  400c08:	31 32                	xor    DWORD PTR [rdx],esi
  400c0a:	62 61                	(bad)  {k7}
  400c0c:	73 69                	jae    400c77 <_init-0xb81>
  400c0e:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400c11:	74 72                	je     400c85 <_init-0xb73>
  400c13:	69 6e 67 49 63 53 74 	imul   ebp,DWORD PTR [rsi+0x67],0x74536349
  400c1a:	31 31                	xor    DWORD PTR [rcx],esi
  400c1c:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400c1f:	72 5f                	jb     400c80 <_init-0xb78>
  400c21:	74 72                	je     400c95 <_init-0xb63>
  400c23:	61                   	(bad)  
  400c24:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400c2b:	61 
  400c2c:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400c30:	37                   	(bad)  
  400c31:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
  400c34:	70 61                	jo     400c97 <_init-0xb61>
  400c36:	72 65                	jb     400c9d <_init-0xb5b>
  400c38:	45 50                	rex.RB push r8
  400c3a:	4b 63 00             	rex.WXB movsxd rax,DWORD PTR [r8]
  400c3d:	5f                   	pop    rdi
  400c3e:	5a                   	pop    rdx
  400c3f:	4e 53                	rex.WRX push rbx
  400c41:	74 38                	je     400c7b <_init-0xb7d>
  400c43:	69 6f 73 5f 62 61 73 	imul   ebp,DWORD PTR [rdi+0x73],0x7361625f
  400c4a:	65 34 49             	gs xor al,0x49
  400c4d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  400c4e:	69 74 43 31 45 76 00 	imul   esi,DWORD PTR [rbx+rax*2+0x31],0x5f007645
  400c55:	5f 
  400c56:	5a                   	pop    rdx
  400c57:	4e 53                	rex.WRX push rbx
  400c59:	74 31                	je     400c8c <_init-0xb6c>
  400c5b:	32 6c 65 6e          	xor    ch,BYTE PTR [rbp+riz*2+0x6e]
  400c5f:	67 74 68             	addr32 je 400cca <_init-0xb2e>
  400c62:	5f                   	pop    rdi
  400c63:	65 72 72             	gs jb  400cd8 <_init-0xb20>
  400c66:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400c67:	72 44                	jb     400cad <_init-0xb4b>
  400c69:	31 45 76             	xor    DWORD PTR [rbp+0x76],eax
  400c6c:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400c6f:	4e 53                	rex.WRX push rbx
  400c71:	74 37                	je     400caa <_init-0xb4e>
  400c73:	5f                   	pop    rdi
  400c74:	5f                   	pop    rdi
  400c75:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400c78:	31 31                	xor    DWORD PTR [rcx],esi
  400c7a:	31 32                	xor    DWORD PTR [rdx],esi
  400c7c:	62 61                	(bad)  {k7}
  400c7e:	73 69                	jae    400ce9 <_init-0xb0f>
  400c80:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400c83:	74 72                	je     400cf7 <_init-0xb01>
  400c85:	69 6e 67 49 63 53 74 	imul   ebp,DWORD PTR [rsi+0x67],0x74536349
  400c8c:	31 31                	xor    DWORD PTR [rcx],esi
  400c8e:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400c91:	72 5f                	jb     400cf2 <_init-0xb06>
  400c93:	74 72                	je     400d07 <_init-0xaf1>
  400c95:	61                   	(bad)  
  400c96:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400c9d:	61 
  400c9e:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400ca2:	34 73                	xor    al,0x73
  400ca4:	77 61                	ja     400d07 <_init-0xaf1>
  400ca6:	70 45                	jo     400ced <_init-0xb0b>
  400ca8:	52                   	push   rdx
  400ca9:	53                   	push   rbx
  400caa:	34 5f                	xor    al,0x5f
  400cac:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400caf:	4e 53                	rex.WRX push rbx
  400cb1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400cb2:	39 5f 4d             	cmp    DWORD PTR [rdi+0x4d],ebx
  400cb5:	5f                   	pop    rdi
  400cb6:	69 6e 73 65 72 74 49 	imul   ebp,DWORD PTR [rsi+0x73],0x49747265
  400cbd:	6d                   	ins    DWORD PTR es:[rdi],dx
  400cbe:	45                   	rex.RB
  400cbf:	45 52                	rex.RB push r10
  400cc1:	53                   	push   rbx
  400cc2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400cc3:	54                   	push   rsp
  400cc4:	5f                   	pop    rdi
  400cc5:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400cc8:	4e 53                	rex.WRX push rbx
  400cca:	74 37                	je     400d03 <_init-0xaf5>
  400ccc:	5f                   	pop    rdi
  400ccd:	5f                   	pop    rdi
  400cce:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400cd1:	31 31                	xor    DWORD PTR [rcx],esi
  400cd3:	31 32                	xor    DWORD PTR [rdx],esi
  400cd5:	62 61                	(bad)  {k7}
  400cd7:	73 69                	jae    400d42 <_init-0xab6>
  400cd9:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400cdc:	74 72                	je     400d50 <_init-0xaa8>
  400cde:	69 6e 67 49 63 53 74 	imul   ebp,DWORD PTR [rsi+0x67],0x74536349
  400ce5:	31 31                	xor    DWORD PTR [rcx],esi
  400ce7:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400cea:	72 5f                	jb     400d4b <_init-0xaad>
  400cec:	74 72                	je     400d60 <_init-0xa98>
  400cee:	61                   	(bad)  
  400cef:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400cf6:	61 
  400cf7:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400cfb:	31 30                	xor    DWORD PTR [rax],esi
  400cfd:	5f                   	pop    rdi
  400cfe:	4d 5f                	rex.WRB pop r15
  400d00:	72 65                	jb     400d67 <_init-0xa91>
  400d02:	70 6c                	jo     400d70 <_init-0xa88>
  400d04:	61                   	(bad)  
  400d05:	63 65 45             	movsxd esp,DWORD PTR [rbp+0x45]
  400d08:	6d                   	ins    DWORD PTR es:[rdi],dx
  400d09:	6d                   	ins    DWORD PTR es:[rdi],dx
  400d0a:	50                   	push   rax
  400d0b:	4b 63 6d 00          	rex.WXB movsxd rbp,DWORD PTR [r13+0x0]
  400d0f:	5f                   	pop    rdi
  400d10:	5a                   	pop    rdx
  400d11:	4e 53                	rex.WRX push rbx
  400d13:	74 39                	je     400d4e <_init-0xaaa>
  400d15:	62 61                	(bad)  {k7}
  400d17:	73 69                	jae    400d82 <_init-0xa76>
  400d19:	63 5f 69             	movsxd ebx,DWORD PTR [rdi+0x69]
  400d1c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400d1d:	73 49                	jae    400d68 <_init-0xa90>
  400d1f:	63 53 74             	movsxd edx,DWORD PTR [rbx+0x74]
  400d22:	31 31                	xor    DWORD PTR [rcx],esi
  400d24:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400d27:	72 5f                	jb     400d88 <_init-0xa70>
  400d29:	74 72                	je     400d9d <_init-0xa5b>
  400d2b:	61                   	(bad)  
  400d2c:	69 74 73 49 63 45 45 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x34454563
  400d33:	34 
  400d34:	69 6e 69 74 45 50 53 	imul   ebp,DWORD PTR [rsi+0x69],0x53504574
  400d3b:	74 31                	je     400d6e <_init-0xa8a>
  400d3d:	35 62 61 73 69       	xor    eax,0x69736162
  400d42:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400d45:	74 72                	je     400db9 <_init-0xa3f>
  400d47:	65 61                	gs (bad) 
  400d49:	6d                   	ins    DWORD PTR es:[rdi],dx
  400d4a:	62                   	(bad)  {k7}
  400d4b:	75 66                	jne    400db3 <_init-0xa45>
  400d4d:	49 63 53 31          	movsxd rdx,DWORD PTR [r11+0x31]
  400d51:	5f                   	pop    rdi
  400d52:	45 00 5f 5a          	add    BYTE PTR [r15+0x5a],r11b
  400d56:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  400d57:	77 6d                	ja     400dc6 <_init-0xa32>
  400d59:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400d5c:	53                   	push   rbx
  400d5d:	74 33                	je     400d92 <_init-0xa66>
  400d5f:	63 69 6e             	movsxd ebp,DWORD PTR [rcx+0x6e]
  400d62:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
  400d65:	63 78 61             	movsxd edi,DWORD PTR [rax+0x61]
  400d68:	5f                   	pop    rdi
  400d69:	74 68                	je     400dd3 <_init-0xa25>
  400d6b:	72 6f                	jb     400ddc <_init-0xa1c>
  400d6d:	77 00                	ja     400d6f <_init-0xa89>
  400d6f:	5f                   	pop    rdi
  400d70:	5a                   	pop    rdx
  400d71:	4e 53                	rex.WRX push rbx
  400d73:	74 36                	je     400dab <_init-0xa4d>
  400d75:	6c                   	ins    BYTE PTR es:[rdi],dx
  400d76:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400d77:	63 61 6c             	movsxd esp,DWORD PTR [rcx+0x6c]
  400d7a:	65 43 31 45 76       	rex.XB xor DWORD PTR gs:[r13+0x76],eax
  400d7f:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400d82:	4e 53                	rex.WRX push rbx
  400d84:	74 31                	je     400db7 <_init-0xa41>
  400d86:	32 6c 65 6e          	xor    ch,BYTE PTR [rbp+riz*2+0x6e]
  400d8a:	67 74 68             	addr32 je 400df5 <_init-0xa03>
  400d8d:	5f                   	pop    rdi
  400d8e:	65 72 72             	gs jb  400e03 <_init-0x9f5>
  400d91:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400d92:	72 43                	jb     400dd7 <_init-0xa21>
  400d94:	31 45 52             	xor    DWORD PTR [rbp+0x52],eax
  400d97:	4b                   	rex.WXB
  400d98:	4e 53                	rex.WRX push rbx
  400d9a:	74 37                	je     400dd3 <_init-0xa25>
  400d9c:	5f                   	pop    rdi
  400d9d:	5f                   	pop    rdi
  400d9e:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400da1:	31 31                	xor    DWORD PTR [rcx],esi
  400da3:	31 32                	xor    DWORD PTR [rdx],esi
  400da5:	62 61                	(bad)  {k7}
  400da7:	73 69                	jae    400e12 <_init-0x9e6>
  400da9:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400dac:	74 72                	je     400e20 <_init-0x9d8>
  400dae:	69 6e 67 49 63 53 74 	imul   ebp,DWORD PTR [rsi+0x67],0x74536349
  400db5:	31 31                	xor    DWORD PTR [rcx],esi
  400db7:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400dba:	72 5f                	jb     400e1b <_init-0x9dd>
  400dbc:	74 72                	je     400e30 <_init-0x9c8>
  400dbe:	61                   	(bad)  
  400dbf:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400dc6:	61 
  400dc7:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400dcb:	45 00 5f 5a          	add    BYTE PTR [r15+0x5a],r11b
  400dcf:	4e 53                	rex.WRX push rbx
  400dd1:	74 38                	je     400e0b <_init-0x9ed>
  400dd3:	69 6f 73 5f 62 61 73 	imul   ebp,DWORD PTR [rdi+0x73],0x7361625f
  400dda:	65 43 32 45 76       	rex.XB xor al,BYTE PTR gs:[r13+0x76]
  400ddf:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400de2:	53                   	push   rbx
  400de3:	74 31                	je     400e16 <_init-0x9e2>
  400de5:	39 5f 5f             	cmp    DWORD PTR [rdi+0x5f],ebx
  400de8:	74 68                	je     400e52 <_init-0x9a6>
  400dea:	72 6f                	jb     400e5b <_init-0x99d>
  400dec:	77 5f                	ja     400e4d <_init-0x9ab>
  400dee:	6c                   	ins    BYTE PTR es:[rdi],dx
  400def:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400df0:	67 69 63 5f 65 72 72 	imul   esp,DWORD PTR [ebx+0x5f],0x6f727265
  400df7:	6f 
  400df8:	72 50                	jb     400e4a <_init-0x9ae>
  400dfa:	4b 63 00             	rex.WXB movsxd rax,DWORD PTR [r8]
  400dfd:	5f                   	pop    rdi
  400dfe:	5a                   	pop    rdx
  400dff:	4e                   	rex.WRX
  400e00:	4b 53                	rex.WXB push r11
  400e02:	74 35                	je     400e39 <_init-0x9bf>
  400e04:	63 74 79 70          	movsxd esi,DWORD PTR [rcx+rdi*2+0x70]
  400e08:	65 49 63 45 38       	movsxd rax,DWORD PTR gs:[r13+0x38]
  400e0d:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
  400e0f:	5f                   	pop    rdi
  400e10:	77 69                	ja     400e7b <_init-0x97d>
  400e12:	64 65 6e             	fs outs dx,BYTE PTR gs:[rsi]
  400e15:	45 63 00             	movsxd r8d,DWORD PTR [r8]
  400e18:	5f                   	pop    rdi
  400e19:	5a                   	pop    rdx
  400e1a:	53                   	push   rbx
  400e1b:	74 72                	je     400e8f <_init-0x969>
  400e1d:	73 49                	jae    400e68 <_init-0x990>
  400e1f:	63 53 74             	movsxd edx,DWORD PTR [rbx+0x74]
  400e22:	31 31                	xor    DWORD PTR [rcx],esi
  400e24:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400e27:	72 5f                	jb     400e88 <_init-0x970>
  400e29:	74 72                	je     400e9d <_init-0x95b>
  400e2b:	61                   	(bad)  
  400e2c:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400e33:	61 
  400e34:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400e38:	52                   	push   rdx
  400e39:	53                   	push   rbx
  400e3a:	74 31                	je     400e6d <_init-0x98b>
  400e3c:	33 62 61             	xor    esp,DWORD PTR [rdx+0x61]
  400e3f:	73 69                	jae    400eaa <_init-0x94e>
  400e41:	63 5f 69             	movsxd ebx,DWORD PTR [rdi+0x69]
  400e44:	73 74                	jae    400eba <_init-0x93e>
  400e46:	72 65                	jb     400ead <_init-0x94b>
  400e48:	61                   	(bad)  
  400e49:	6d                   	ins    DWORD PTR es:[rdi],dx
  400e4a:	49 54                	rex.WB push r12
  400e4c:	5f                   	pop    rdi
  400e4d:	54                   	push   rsp
  400e4e:	30 5f 45             	xor    BYTE PTR [rdi+0x45],bl
  400e51:	53                   	push   rbx
  400e52:	37                   	(bad)  
  400e53:	5f                   	pop    rdi
  400e54:	52                   	push   rdx
  400e55:	4e 53                	rex.WRX push rbx
  400e57:	74 37                	je     400e90 <_init-0x968>
  400e59:	5f                   	pop    rdi
  400e5a:	5f                   	pop    rdi
  400e5b:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400e5e:	31 31                	xor    DWORD PTR [rcx],esi
  400e60:	31 32                	xor    DWORD PTR [rdx],esi
  400e62:	62 61                	(bad)  {k7}
  400e64:	73 69                	jae    400ecf <_init-0x929>
  400e66:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400e69:	74 72                	je     400edd <_init-0x91b>
  400e6b:	69 6e 67 49 53 34 5f 	imul   ebp,DWORD PTR [rsi+0x67],0x5f345349
  400e72:	53                   	push   rbx
  400e73:	35 5f 54 31 5f       	xor    eax,0x5f31545f
  400e78:	45                   	rex.RB
  400e79:	45 00 5f 5a          	add    BYTE PTR [r15+0x5a],r11b
  400e7d:	54                   	push   rsp
  400e7e:	56                   	push   rsi
  400e7f:	4e 53                	rex.WRX push rbx
  400e81:	74 37                	je     400eba <_init-0x93e>
  400e83:	5f                   	pop    rdi
  400e84:	5f                   	pop    rdi
  400e85:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400e88:	31 31                	xor    DWORD PTR [rcx],esi
  400e8a:	31 35 62 61 73 69    	xor    DWORD PTR [rip+0x69736162],esi        # 69b36ff2 <_end+0x69529852>
  400e90:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400e93:	74 72                	je     400f07 <_init-0x8f1>
  400e95:	69 6e 67 62 75 66 49 	imul   ebp,DWORD PTR [rsi+0x67],0x49667562
  400e9c:	63 53 74             	movsxd edx,DWORD PTR [rbx+0x74]
  400e9f:	31 31                	xor    DWORD PTR [rcx],esi
  400ea1:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400ea4:	72 5f                	jb     400f05 <_init-0x8f3>
  400ea6:	74 72                	je     400f1a <_init-0x8de>
  400ea8:	61                   	(bad)  
  400ea9:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400eb0:	61 
  400eb1:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400eb5:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
  400eb9:	63 78 61             	movsxd edi,DWORD PTR [rax+0x61]
  400ebc:	5f                   	pop    rdi
  400ebd:	66 72 65             	data16 jb 400f25 <_init-0x8d3>
  400ec0:	65 5f                	gs pop rdi
  400ec2:	65 78 63             	gs js  400f28 <_init-0x8d0>
  400ec5:	65 70 74             	gs jo  400f3c <_init-0x8bc>
  400ec8:	69 6f 6e 00 5f 5a 4e 	imul   ebp,DWORD PTR [rdi+0x6e],0x4e5a5f00
  400ecf:	53                   	push   rbx
  400ed0:	74 37                	je     400f09 <_init-0x8ef>
  400ed2:	5f                   	pop    rdi
  400ed3:	5f                   	pop    rdi
  400ed4:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400ed7:	31 31                	xor    DWORD PTR [rcx],esi
  400ed9:	31 32                	xor    DWORD PTR [rdx],esi
  400edb:	62 61                	(bad)  {k7}
  400edd:	73 69                	jae    400f48 <_init-0x8b0>
  400edf:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400ee2:	74 72                	je     400f56 <_init-0x8a2>
  400ee4:	69 6e 67 49 63 53 74 	imul   ebp,DWORD PTR [rsi+0x67],0x74536349
  400eeb:	31 31                	xor    DWORD PTR [rcx],esi
  400eed:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400ef0:	72 5f                	jb     400f51 <_init-0x8a7>
  400ef2:	74 72                	je     400f66 <_init-0x892>
  400ef4:	61                   	(bad)  
  400ef5:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400efc:	61 
  400efd:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400f01:	39 5f 4d             	cmp    DWORD PTR [rdi+0x4d],ebx
  400f04:	5f                   	pop    rdi
  400f05:	63 72 65             	movsxd esi,DWORD PTR [rdx+0x65]
  400f08:	61                   	(bad)  
  400f09:	74 65                	je     400f70 <_init-0x888>
  400f0b:	45 52                	rex.RB push r10
  400f0d:	6d                   	ins    DWORD PTR es:[rdi],dx
  400f0e:	6d                   	ins    DWORD PTR es:[rdi],dx
  400f0f:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400f12:	54                   	push   rsp
  400f13:	56                   	push   rsi
  400f14:	4e 53                	rex.WRX push rbx
  400f16:	74 37                	je     400f4f <_init-0x8a9>
  400f18:	5f                   	pop    rdi
  400f19:	5f                   	pop    rdi
  400f1a:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400f1d:	31 31                	xor    DWORD PTR [rcx],esi
  400f1f:	31 38                	xor    DWORD PTR [rax],edi
  400f21:	62 61                	(bad)  {k7}
  400f23:	73 69                	jae    400f8e <_init-0x86a>
  400f25:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400f28:	74 72                	je     400f9c <_init-0x85c>
  400f2a:	69 6e 67 73 74 72 65 	imul   ebp,DWORD PTR [rsi+0x67],0x65727473
  400f31:	61                   	(bad)  
  400f32:	6d                   	ins    DWORD PTR es:[rdi],dx
  400f33:	49 63 53 74          	movsxd rdx,DWORD PTR [r11+0x74]
  400f37:	31 31                	xor    DWORD PTR [rcx],esi
  400f39:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400f3c:	72 5f                	jb     400f9d <_init-0x85b>
  400f3e:	74 72                	je     400fb2 <_init-0x846>
  400f40:	61                   	(bad)  
  400f41:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400f48:	61 
  400f49:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400f4d:	45 00 5f 5a          	add    BYTE PTR [r15+0x5a],r11b
  400f51:	53                   	push   rbx
  400f52:	74 34                	je     400f88 <_init-0x870>
  400f54:	63 6f 75             	movsxd ebp,DWORD PTR [rdi+0x75]
  400f57:	74 00                	je     400f59 <_init-0x89f>
  400f59:	5f                   	pop    rdi
  400f5a:	5a                   	pop    rdx
  400f5b:	4e 53                	rex.WRX push rbx
  400f5d:	74 37                	je     400f96 <_init-0x862>
  400f5f:	5f                   	pop    rdi
  400f60:	5f                   	pop    rdi
  400f61:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400f64:	31 31                	xor    DWORD PTR [rcx],esi
  400f66:	31 32                	xor    DWORD PTR [rdx],esi
  400f68:	62 61                	(bad)  {k7}
  400f6a:	73 69                	jae    400fd5 <_init-0x823>
  400f6c:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400f6f:	74 72                	je     400fe3 <_init-0x815>
  400f71:	69 6e 67 49 63 53 74 	imul   ebp,DWORD PTR [rsi+0x67],0x74536349
  400f78:	31 31                	xor    DWORD PTR [rcx],esi
  400f7a:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400f7d:	72 5f                	jb     400fde <_init-0x81a>
  400f7f:	74 72                	je     400ff3 <_init-0x805>
  400f81:	61                   	(bad)  
  400f82:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  400f89:	61 
  400f8a:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  400f8e:	39 5f 4d             	cmp    DWORD PTR [rdi+0x4d],ebx
  400f91:	5f                   	pop    rdi
  400f92:	61                   	(bad)  
  400f93:	73 73                	jae    401008 <_init-0x7f0>
  400f95:	69 67 6e 45 52 4b 53 	imul   esp,DWORD PTR [rdi+0x6e],0x534b5245
  400f9c:	34 5f                	xor    al,0x5f
  400f9e:	00 5f 5a             	add    BYTE PTR [rdi+0x5a],bl
  400fa1:	4e 53                	rex.WRX push rbx
  400fa3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400fa4:	35 66 6c 75 73       	xor    eax,0x73756c66
  400fa9:	68 45 76 00 5f       	push   0x5f007645
  400fae:	5a                   	pop    rdx
  400faf:	4e 53                	rex.WRX push rbx
  400fb1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400fb2:	6c                   	ins    BYTE PTR es:[rdi],dx
  400fb3:	73 45                	jae    400ffa <_init-0x7fe>
  400fb5:	69 00 5f 5a 54 49    	imul   eax,DWORD PTR [rax],0x49545a5f
  400fbb:	53                   	push   rbx
  400fbc:	74 31                	je     400fef <_init-0x809>
  400fbe:	32 6c 65 6e          	xor    ch,BYTE PTR [rbp+riz*2+0x6e]
  400fc2:	67 74 68             	addr32 je 40102d <_init-0x7cb>
  400fc5:	5f                   	pop    rdi
  400fc6:	65 72 72             	gs jb  40103b <_init-0x7bd>
  400fc9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  400fca:	72 00                	jb     400fcc <_init-0x82c>
  400fcc:	5f                   	pop    rdi
  400fcd:	5a                   	pop    rdx
  400fce:	54                   	push   rsp
  400fcf:	54                   	push   rsp
  400fd0:	4e 53                	rex.WRX push rbx
  400fd2:	74 37                	je     40100b <_init-0x7ed>
  400fd4:	5f                   	pop    rdi
  400fd5:	5f                   	pop    rdi
  400fd6:	63 78 78             	movsxd edi,DWORD PTR [rax+0x78]
  400fd9:	31 31                	xor    DWORD PTR [rcx],esi
  400fdb:	31 38                	xor    DWORD PTR [rax],edi
  400fdd:	62 61                	(bad)  {k7}
  400fdf:	73 69                	jae    40104a <_init-0x7ae>
  400fe1:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  400fe4:	74 72                	je     401058 <_init-0x7a0>
  400fe6:	69 6e 67 73 74 72 65 	imul   ebp,DWORD PTR [rsi+0x67],0x65727473
  400fed:	61                   	(bad)  
  400fee:	6d                   	ins    DWORD PTR es:[rdi],dx
  400fef:	49 63 53 74          	movsxd rdx,DWORD PTR [r11+0x74]
  400ff3:	31 31                	xor    DWORD PTR [rcx],esi
  400ff5:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
  400ff8:	72 5f                	jb     401059 <_init-0x79f>
  400ffa:	74 72                	je     40106e <_init-0x78a>
  400ffc:	61                   	(bad)  
  400ffd:	69 74 73 49 63 45 53 	imul   esi,DWORD PTR [rbx+rsi*2+0x49],0x61534563
  401004:	61 
  401005:	49 63 45 45          	movsxd rax,DWORD PTR [r13+0x45]
  401009:	45 00 6c 69 62       	add    BYTE PTR [r9+rbp*2+0x62],r13b
  40100e:	6d                   	ins    DWORD PTR es:[rdi],dx
  40100f:	2e 73 6f             	cs jae 401081 <_init-0x777>
  401012:	2e 36 00 73 71       	cs add BYTE PTR ss:[rbx+0x71],dh
  401017:	72 74                	jb     40108d <_init-0x76b>
  401019:	00 6c 69 62          	add    BYTE PTR [rcx+rbp*2+0x62],ch
  40101d:	67 63 63 5f          	movsxd esp,DWORD PTR [ebx+0x5f]
  401021:	73 2e                	jae    401051 <_init-0x7a7>
  401023:	73 6f                	jae    401094 <_init-0x764>
  401025:	2e 31 00             	xor    DWORD PTR cs:[rax],eax
  401028:	5f                   	pop    rdi
  401029:	55                   	push   rbp
  40102a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  40102b:	77 69                	ja     401096 <_init-0x762>
  40102d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  40102e:	64 5f                	fs pop rdi
  401030:	52                   	push   rdx
  401031:	65 73 75             	gs jae 4010a9 <_init-0x74f>
  401034:	6d                   	ins    DWORD PTR es:[rdi],dx
  401035:	65 00 6c 69 62       	add    BYTE PTR gs:[rcx+rbp*2+0x62],ch
  40103a:	63 2e                	movsxd ebp,DWORD PTR [rsi]
  40103c:	73 6f                	jae    4010ad <_init-0x74b>
  40103e:	2e 36 00 5f 5f       	cs add BYTE PTR ss:[rdi+0x5f],bl
  401043:	70 72                	jo     4010b7 <_init-0x741>
  401045:	69 6e 74 66 5f 63 68 	imul   ebp,DWORD PTR [rsi+0x74],0x68635f66
  40104c:	6b 00 5f             	imul   eax,DWORD PTR [rax],0x5f
  40104f:	5f                   	pop    rdi
  401050:	73 74                	jae    4010c6 <_init-0x732>
  401052:	61                   	(bad)  
  401053:	63 6b 5f             	movsxd ebp,DWORD PTR [rbx+0x5f]
  401056:	63 68 6b             	movsxd ebp,DWORD PTR [rax+0x6b]
  401059:	5f                   	pop    rdi
  40105a:	66 61                	data16 (bad) 
  40105c:	69 6c 00 5f 5f 63 78 	imul   ebp,DWORD PTR [rax+rax*1+0x5f],0x6178635f
  401063:	61 
  401064:	5f                   	pop    rdi
  401065:	61                   	(bad)  
  401066:	74 65                	je     4010cd <_init-0x72b>
  401068:	78 69                	js     4010d3 <_init-0x725>
  40106a:	74 00                	je     40106c <_init-0x78c>
  40106c:	76 73                	jbe    4010e1 <_init-0x717>
  40106e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  40106f:	70 72                	jo     4010e3 <_init-0x715>
  401071:	69 6e 74 66 00 6d 65 	imul   ebp,DWORD PTR [rsi+0x74],0x656d0066
  401078:	6d                   	ins    DWORD PTR es:[rdi],dx
  401079:	63 70 79             	movsxd esi,DWORD PTR [rax+0x79]
  40107c:	00 6d 65             	add    BYTE PTR [rbp+0x65],ch
  40107f:	6d                   	ins    DWORD PTR es:[rdi],dx
  401080:	6d                   	ins    DWORD PTR es:[rdi],dx
  401081:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  401082:	76 65                	jbe    4010e9 <_init-0x70f>
  401084:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
  401087:	6c                   	ins    BYTE PTR es:[rdi],dx
  401088:	69 62 63 5f 73 74 61 	imul   esp,DWORD PTR [rdx+0x63],0x6174735f
  40108f:	72 74                	jb     401105 <_init-0x6f3>
  401091:	5f                   	pop    rdi
  401092:	6d                   	ins    DWORD PTR es:[rdi],dx
  401093:	61                   	(bad)  
  401094:	69 6e 00 47 4c 49 42 	imul   ebp,DWORD PTR [rsi+0x0],0x42494c47
  40109b:	43 5f                	rex.XB pop r15
  40109d:	32 2e                	xor    ch,BYTE PTR [rsi]
  40109f:	32 2e                	xor    ch,BYTE PTR [rsi]
  4010a1:	35 00 47 43 43       	xor    eax,0x43434700
  4010a6:	5f                   	pop    rdi
  4010a7:	33 2e                	xor    ebp,DWORD PTR [rsi]
  4010a9:	30 00                	xor    BYTE PTR [rax],al
  4010ab:	47                   	rex.RXB
  4010ac:	4c                   	rex.WR
  4010ad:	49                   	rex.WB
  4010ae:	42                   	rex.X
  4010af:	43 5f                	rex.XB pop r15
  4010b1:	32 2e                	xor    ch,BYTE PTR [rsi]
  4010b3:	31 34 00             	xor    DWORD PTR [rax+rax*1],esi
  4010b6:	47                   	rex.RXB
  4010b7:	4c                   	rex.WR
  4010b8:	49                   	rex.WB
  4010b9:	42                   	rex.X
  4010ba:	43 5f                	rex.XB pop r15
  4010bc:	32 2e                	xor    ch,BYTE PTR [rsi]
  4010be:	34 00                	xor    al,0x0
  4010c0:	47                   	rex.RXB
  4010c1:	4c                   	rex.WR
  4010c2:	49                   	rex.WB
  4010c3:	42                   	rex.X
  4010c4:	43 5f                	rex.XB pop r15
  4010c6:	32 2e                	xor    ch,BYTE PTR [rsi]
  4010c8:	33 2e                	xor    ebp,DWORD PTR [rsi]
  4010ca:	34 00                	xor    al,0x0
  4010cc:	47                   	rex.RXB
  4010cd:	4c                   	rex.WR
  4010ce:	49                   	rex.WB
  4010cf:	42                   	rex.X
  4010d0:	43 58                	rex.XB pop r8
  4010d2:	58                   	pop    rax
  4010d3:	5f                   	pop    rdi
  4010d4:	33 2e                	xor    ebp,DWORD PTR [rsi]
  4010d6:	34 2e                	xor    al,0x2e
  4010d8:	31 34 00             	xor    DWORD PTR [rax+rax*1],esi
  4010db:	47                   	rex.RXB
  4010dc:	4c                   	rex.WR
  4010dd:	49                   	rex.WB
  4010de:	42                   	rex.X
  4010df:	43 58                	rex.XB pop r8
  4010e1:	58                   	pop    rax
  4010e2:	5f                   	pop    rdi
  4010e3:	33 2e                	xor    ebp,DWORD PTR [rsi]
  4010e5:	34 2e                	xor    al,0x2e
  4010e7:	39 00                	cmp    DWORD PTR [rax],eax
  4010e9:	43 58                	rex.XB pop r8
  4010eb:	58                   	pop    rax
  4010ec:	41                   	rex.B
  4010ed:	42                   	rex.X
  4010ee:	49 5f                	rex.WB pop r15
  4010f0:	31 2e                	xor    DWORD PTR [rsi],ebp
  4010f2:	33 00                	xor    eax,DWORD PTR [rax]
  4010f4:	47                   	rex.RXB
  4010f5:	4c                   	rex.WR
  4010f6:	49                   	rex.WB
  4010f7:	42                   	rex.X
  4010f8:	43 58                	rex.XB pop r8
  4010fa:	58                   	pop    rax
  4010fb:	5f                   	pop    rdi
  4010fc:	33 2e                	xor    ebp,DWORD PTR [rsi]
  4010fe:	34 2e                	xor    al,0x2e
  401100:	31 31                	xor    DWORD PTR [rcx],esi
  401102:	00 47 4c             	add    BYTE PTR [rdi+0x4c],al
  401105:	49                   	rex.WB
  401106:	42                   	rex.X
  401107:	43 58                	rex.XB pop r8
  401109:	58                   	pop    rax
  40110a:	5f                   	pop    rdi
  40110b:	33 2e                	xor    ebp,DWORD PTR [rsi]
  40110d:	34 2e                	xor    al,0x2e
  40110f:	32 31                	xor    dh,BYTE PTR [rcx]
  401111:	00 47 4c             	add    BYTE PTR [rdi+0x4c],al
  401114:	49                   	rex.WB
  401115:	42                   	rex.X
  401116:	43 58                	rex.XB pop r8
  401118:	58                   	pop    rax
  401119:	5f                   	pop    rdi
  40111a:	33 2e                	xor    ebp,DWORD PTR [rsi]
  40111c:	34 00                	xor    al,0x0

Disassembly of section .gnu.version:

000000000040111e <.gnu.version>:
  40111e:	00 00                	add    BYTE PTR [rax],al
  401120:	02 00                	add    al,BYTE PTR [rax]
  401122:	02 00                	add    al,BYTE PTR [rax]
  401124:	02 00                	add    al,BYTE PTR [rax]
  401126:	02 00                	add    al,BYTE PTR [rax]
  401128:	00 00                	add    BYTE PTR [rax],al
  40112a:	00 00                	add    BYTE PTR [rax],al
  40112c:	02 00                	add    al,BYTE PTR [rax]
  40112e:	02 00                	add    al,BYTE PTR [rax]
  401130:	04 00                	add    al,0x0
  401132:	05 00 03 00 02       	add    eax,0x2000300
  401137:	00 03                	add    BYTE PTR [rbx],al
  401139:	00 07                	add    BYTE PTR [rdi],al
  40113b:	00 07                	add    BYTE PTR [rdi],al
  40113d:	00 03                	add    BYTE PTR [rbx],al
  40113f:	00 00                	add    BYTE PTR [rax],al
  401141:	00 00                	add    BYTE PTR [rax],al
  401143:	00 03                	add    BYTE PTR [rbx],al
  401145:	00 02                	add    BYTE PTR [rdx],al
  401147:	00 03                	add    BYTE PTR [rbx],al
  401149:	00 08                	add    BYTE PTR [rax],cl
  40114b:	00 07                	add    BYTE PTR [rdi],al
  40114d:	00 02                	add    BYTE PTR [rdx],al
  40114f:	00 02                	add    BYTE PTR [rdx],al
  401151:	00 09                	add    BYTE PTR [rcx],cl
  401153:	00 0a                	add    BYTE PTR [rdx],cl
  401155:	00 02                	add    BYTE PTR [rdx],al
  401157:	00 06                	add    BYTE PTR [rsi],al
  401159:	00 06                	add    BYTE PTR [rsi],al
  40115b:	00 02                	add    BYTE PTR [rdx],al
  40115d:	00 02                	add    BYTE PTR [rdx],al
  40115f:	00 03                	add    BYTE PTR [rbx],al
  401161:	00 02                	add    BYTE PTR [rdx],al
  401163:	00 06                	add    BYTE PTR [rsi],al
  401165:	00 08                	add    BYTE PTR [rax],cl
  401167:	00 03                	add    BYTE PTR [rbx],al
  401169:	00 02                	add    BYTE PTR [rdx],al
  40116b:	00 03                	add    BYTE PTR [rbx],al
  40116d:	00 02                	add    BYTE PTR [rdx],al
  40116f:	00 0b                	add    BYTE PTR [rbx],cl
  401171:	00 02                	add    BYTE PTR [rdx],al
  401173:	00 0c 00             	add    BYTE PTR [rax+rax*1],cl
  401176:	02 00                	add    al,BYTE PTR [rax]
  401178:	0d 00 03 00 02       	or     eax,0x2000300
  40117d:	00 03                	add    BYTE PTR [rbx],al
  40117f:	00 02                	add    BYTE PTR [rdx],al
  401181:	00 06                	add    BYTE PTR [rsi],al
  401183:	00 02                	add    BYTE PTR [rdx],al
  401185:	00 03                	add    BYTE PTR [rbx],al
  401187:	00 02                	add    BYTE PTR [rdx],al
  401189:	00 07                	add    BYTE PTR [rdi],al
  40118b:	00 06                	add    BYTE PTR [rsi],al
  40118d:	00 02                	add    BYTE PTR [rdx],al
  40118f:	00 02                	add    BYTE PTR [rdx],al
  401191:	00 02                	add    BYTE PTR [rdx],al
  401193:	00 06                	add    BYTE PTR [rsi],al
  401195:	00 03                	add    BYTE PTR [rbx],al
  401197:	00 01                	add    BYTE PTR [rcx],al
	...

Disassembly of section .gnu.version_r:

00000000004011a0 <.gnu.version_r>:
  4011a0:	01 00                	add    DWORD PTR [rax],eax
  4011a2:	01 00                	add    DWORD PTR [rax],eax
  4011a4:	3b 07                	cmp    eax,DWORD PTR [rdi]
  4011a6:	00 00                	add    BYTE PTR [rax],al
  4011a8:	10 00                	adc    BYTE PTR [rax],al
  4011aa:	00 00                	add    BYTE PTR [rax],al
  4011ac:	20 00                	and    BYTE PTR [rax],al
  4011ae:	00 00                	add    BYTE PTR [rax],al
  4011b0:	75 1a                	jne    4011cc <_init-0x62c>
  4011b2:	69 09 00 00 0c 00    	imul   ecx,DWORD PTR [rcx],0xc0000
  4011b8:	c7 07 00 00 00 00    	mov    DWORD PTR [rdi],0x0
  4011be:	00 00                	add    BYTE PTR [rax],al
  4011c0:	01 00                	add    DWORD PTR [rax],eax
  4011c2:	01 00                	add    DWORD PTR [rax],eax
  4011c4:	4a 07                	rex.WX (bad) 
  4011c6:	00 00                	add    BYTE PTR [rax],al
  4011c8:	10 00                	adc    BYTE PTR [rax],al
  4011ca:	00 00                	add    BYTE PTR [rax],al
  4011cc:	20 00                	and    BYTE PTR [rax],al
  4011ce:	00 00                	add    BYTE PTR [rax],al
  4011d0:	50                   	push   rax
  4011d1:	26 79 0b             	es jns 4011df <_init-0x619>
  4011d4:	00 00                	add    BYTE PTR [rax],al
  4011d6:	0b 00                	or     eax,DWORD PTR [rax]
  4011d8:	d3 07                	rol    DWORD PTR [rdi],cl
  4011da:	00 00                	add    BYTE PTR [rax],al
  4011dc:	00 00                	add    BYTE PTR [rax],al
  4011de:	00 00                	add    BYTE PTR [rax],al
  4011e0:	01 00                	add    DWORD PTR [rax],eax
  4011e2:	04 00                	add    al,0x0
  4011e4:	67 07                	addr32 (bad) 
  4011e6:	00 00                	add    BYTE PTR [rax],al
  4011e8:	10 00                	adc    BYTE PTR [rax],al
  4011ea:	00 00                	add    BYTE PTR [rax],al
  4011ec:	50                   	push   rax
  4011ed:	00 00                	add    BYTE PTR [rax],al
  4011ef:	00 94 91 96 06 00 00 	add    BYTE PTR [rcx+rdx*4+0x696],dl
  4011f6:	0d 00 db 07 00       	or     eax,0x7db00
  4011fb:	00 10                	add    BYTE PTR [rax],dl
  4011fd:	00 00                	add    BYTE PTR [rax],al
  4011ff:	00 14 69             	add    BYTE PTR [rcx+rbp*2],dl
  401202:	69 0d 00 00 0a 00 e6 	imul   ecx,DWORD PTR [rip+0xa0000],0x7e6        # 4a120c <__FRAME_END__+0x9535c>
  401209:	07 00 00 
  40120c:	10 00                	adc    BYTE PTR [rax],al
  40120e:	00 00                	add    BYTE PTR [rax],al
  401210:	75 1a                	jne    40122c <_init-0x5cc>
  401212:	69 09 00 00 07 00    	imul   ecx,DWORD PTR [rcx],0x70000
  401218:	c7 07 00 00 10 00    	mov    DWORD PTR [rdi],0x100000
  40121e:	00 00                	add    BYTE PTR [rax],al
  401220:	74 19                	je     40123b <_init-0x5bd>
  401222:	69 09 00 00 05 00    	imul   ecx,DWORD PTR [rcx],0x50000
  401228:	f0 07                	lock (bad) 
  40122a:	00 00                	add    BYTE PTR [rax],al
  40122c:	00 00                	add    BYTE PTR [rax],al
  40122e:	00 00                	add    BYTE PTR [rax],al
  401230:	01 00                	add    DWORD PTR [rax],eax
  401232:	06                   	(bad)  
  401233:	00 01                	add    BYTE PTR [rcx],al
  401235:	00 00                	add    BYTE PTR [rax],al
  401237:	00 10                	add    BYTE PTR [rax],dl
  401239:	00 00                	add    BYTE PTR [rax],al
  40123b:	00 00                	add    BYTE PTR [rax],al
  40123d:	00 00                	add    BYTE PTR [rax],al
  40123f:	00 64 f8 97          	add    BYTE PTR [rax+rdi*8-0x69],ah
  401243:	02 00                	add    al,BYTE PTR [rax]
  401245:	00 09                	add    BYTE PTR [rcx],cl
  401247:	00 fc                	add    ah,bh
  401249:	07                   	(bad)  
  40124a:	00 00                	add    BYTE PTR [rax],al
  40124c:	10 00                	adc    BYTE PTR [rax],al
  40124e:	00 00                	add    BYTE PTR [rax],al
  401250:	89 7f 29             	mov    DWORD PTR [rdi+0x29],edi
  401253:	02 00                	add    al,BYTE PTR [rax]
  401255:	00 08                	add    BYTE PTR [rax],cl
  401257:	00 0b                	add    BYTE PTR [rbx],cl
  401259:	08 00                	or     BYTE PTR [rax],al
  40125b:	00 10                	add    BYTE PTR [rax],dl
  40125d:	00 00                	add    BYTE PTR [rax],al
  40125f:	00 d3                	add    bl,dl
  401261:	af                   	scas   eax,DWORD PTR es:[rdi]
  401262:	6b 05 00 00 06 00 19 	imul   eax,DWORD PTR [rip+0x60000],0x19        # 461269 <__FRAME_END__+0x553b9>
  401269:	08 00                	or     BYTE PTR [rax],al
  40126b:	00 10                	add    BYTE PTR [rax],dl
  40126d:	00 00                	add    BYTE PTR [rax],al
  40126f:	00 61 f8             	add    BYTE PTR [rcx-0x8],ah
  401272:	97                   	xchg   edi,eax
  401273:	02 00                	add    al,BYTE PTR [rax]
  401275:	00 04 00             	add    BYTE PTR [rax+rax*1],al
  401278:	24 08                	and    al,0x8
  40127a:	00 00                	add    BYTE PTR [rax],al
  40127c:	10 00                	adc    BYTE PTR [rax],al
  40127e:	00 00                	add    BYTE PTR [rax],al
  401280:	71 f8                	jno    40127a <_init-0x57e>
  401282:	97                   	xchg   edi,eax
  401283:	02 00                	add    al,BYTE PTR [rax]
  401285:	00 03                	add    BYTE PTR [rbx],al
  401287:	00 33                	add    BYTE PTR [rbx],dh
  401289:	08 00                	or     BYTE PTR [rax],al
  40128b:	00 10                	add    BYTE PTR [rax],dl
  40128d:	00 00                	add    BYTE PTR [rax],al
  40128f:	00 74 29 92          	add    BYTE PTR [rcx+rbp*1-0x6e],dh
  401293:	08 00                	or     BYTE PTR [rax],al
  401295:	00 02                	add    BYTE PTR [rdx],al
  401297:	00 42 08             	add    BYTE PTR [rdx+0x8],al
  40129a:	00 00                	add    BYTE PTR [rax],al
  40129c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .rela.dyn:

00000000004012a0 <.rela.dyn>:
  4012a0:	f8                   	clc    
  4012a1:	cf                   	iret   
  4012a2:	60                   	(bad)  
  4012a3:	00 00                	add    BYTE PTR [rax],al
  4012a5:	00 00                	add    BYTE PTR [rax],al
  4012a7:	00 06                	add    BYTE PTR [rsi],al
  4012a9:	00 00                	add    BYTE PTR [rax],al
  4012ab:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4012b1 <_init-0x547>
  4012b1:	00 00                	add    BYTE PTR [rax],al
  4012b3:	00 00                	add    BYTE PTR [rax],al
  4012b5:	00 00                	add    BYTE PTR [rax],al
  4012b7:	00 c0                	add    al,al
  4012b9:	d2 60 00             	shl    BYTE PTR [rax+0x0],cl
  4012bc:	00 00                	add    BYTE PTR [rax],al
  4012be:	00 00                	add    BYTE PTR [rax],al
  4012c0:	05 00 00 00 2f       	add    eax,0x2f000000
	...
  4012cd:	00 00                	add    BYTE PTR [rax],al
  4012cf:	00 d8                	add    al,bl
  4012d1:	d3 60 00             	shl    DWORD PTR [rax+0x0],cl
  4012d4:	00 00                	add    BYTE PTR [rax],al
  4012d6:	00 00                	add    BYTE PTR [rax],al
  4012d8:	05 00 00 00 30       	add    eax,0x30000000
	...
  4012e5:	00 00                	add    BYTE PTR [rax],al
  4012e7:	00 60 d4             	add    BYTE PTR [rax-0x2c],ah
  4012ea:	60                   	(bad)  
  4012eb:	00 00                	add    BYTE PTR [rax],al
  4012ed:	00 00                	add    BYTE PTR [rax],al
  4012ef:	00 05 00 00 00 31    	add    BYTE PTR [rip+0x31000000],al        # 314012f5 <_end+0x30df3b55>
	...
  4012fd:	00 00                	add    BYTE PTR [rax],al
  4012ff:	00 80 d4 60 00 00    	add    BYTE PTR [rax+0x60d4],al
  401305:	00 00                	add    BYTE PTR [rax],al
  401307:	00 05 00 00 00 33    	add    BYTE PTR [rip+0x33000000],al        # 3340130d <_end+0x32df3b6d>
	...
  401315:	00 00                	add    BYTE PTR [rax],al
  401317:	00 a0 d4 60 00 00    	add    BYTE PTR [rax+0x60d4],ah
  40131d:	00 00                	add    BYTE PTR [rax],al
  40131f:	00 05 00 00 00 34    	add    BYTE PTR [rip+0x34000000],al        # 34401325 <_end+0x33df3b85>
	...
  40132d:	00 00                	add    BYTE PTR [rax],al
  40132f:	00 20                	add    BYTE PTR [rax],ah
  401331:	d5                   	(bad)  
  401332:	60                   	(bad)  
  401333:	00 00                	add    BYTE PTR [rax],al
  401335:	00 00                	add    BYTE PTR [rax],al
  401337:	00 05 00 00 00 37    	add    BYTE PTR [rip+0x37000000],al        # 3740133d <_end+0x36df3b9d>
	...
  401345:	00 00                	add    BYTE PTR [rax],al
  401347:	00 60 d5             	add    BYTE PTR [rax-0x2b],ah
  40134a:	60                   	(bad)  
  40134b:	00 00                	add    BYTE PTR [rax],al
  40134d:	00 00                	add    BYTE PTR [rax],al
  40134f:	00 05 00 00 00 39    	add    BYTE PTR [rip+0x39000000],al        # 39401355 <_end+0x38df3bb5>
	...
  40135d:	00 00                	add    BYTE PTR [rax],al
  40135f:	00 80 d6 60 00 00    	add    BYTE PTR [rax+0x60d6],al
  401365:	00 00                	add    BYTE PTR [rax],al
  401367:	00 05 00 00 00 3a    	add    BYTE PTR [rip+0x3a000000],al        # 3a40136d <_end+0x39df3bcd>
	...
  401379:	d7                   	xlat   BYTE PTR ds:[rbx]
  40137a:	60                   	(bad)  
  40137b:	00 00                	add    BYTE PTR [rax],al
  40137d:	00 00                	add    BYTE PTR [rax],al
  40137f:	00 05 00 00 00 32    	add    BYTE PTR [rip+0x32000000],al        # 32401385 <_end+0x31df3be5>
	...
  40138d:	00 00                	add    BYTE PTR [rax],al
  40138f:	00 48 d7             	add    BYTE PTR [rax-0x29],cl
  401392:	60                   	(bad)  
  401393:	00 00                	add    BYTE PTR [rax],al
  401395:	00 00                	add    BYTE PTR [rax],al
  401397:	00 05 00 00 00 3c    	add    BYTE PTR [rip+0x3c000000],al        # 3c40139d <_end+0x3bdf3bfd>
	...

Disassembly of section .rela.plt:

00000000004013a8 <.rela.plt>:
  4013a8:	18 d0                	sbb    al,dl
  4013aa:	60                   	(bad)  
  4013ab:	00 00                	add    BYTE PTR [rax],al
  4013ad:	00 00                	add    BYTE PTR [rax],al
  4013af:	00 07                	add    BYTE PTR [rdi],al
  4013b1:	00 00                	add    BYTE PTR [rax],al
  4013b3:	00 01                	add    BYTE PTR [rcx],al
	...
  4013bd:	00 00                	add    BYTE PTR [rax],al
  4013bf:	00 20                	add    BYTE PTR [rax],ah
  4013c1:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  4013c4:	00 00                	add    BYTE PTR [rax],al
  4013c6:	00 00                	add    BYTE PTR [rax],al
  4013c8:	07                   	(bad)  
  4013c9:	00 00                	add    BYTE PTR [rax],al
  4013cb:	00 02                	add    BYTE PTR [rdx],al
	...
  4013d5:	00 00                	add    BYTE PTR [rax],al
  4013d7:	00 28                	add    BYTE PTR [rax],ch
  4013d9:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  4013dc:	00 00                	add    BYTE PTR [rax],al
  4013de:	00 00                	add    BYTE PTR [rax],al
  4013e0:	07                   	(bad)  
  4013e1:	00 00                	add    BYTE PTR [rax],al
  4013e3:	00 03                	add    BYTE PTR [rbx],al
	...
  4013ed:	00 00                	add    BYTE PTR [rax],al
  4013ef:	00 30                	add    BYTE PTR [rax],dh
  4013f1:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  4013f4:	00 00                	add    BYTE PTR [rax],al
  4013f6:	00 00                	add    BYTE PTR [rax],al
  4013f8:	07                   	(bad)  
  4013f9:	00 00                	add    BYTE PTR [rax],al
  4013fb:	00 04 00             	add    BYTE PTR [rax+rax*1],al
	...
  401406:	00 00                	add    BYTE PTR [rax],al
  401408:	38 d0                	cmp    al,dl
  40140a:	60                   	(bad)  
  40140b:	00 00                	add    BYTE PTR [rax],al
  40140d:	00 00                	add    BYTE PTR [rax],al
  40140f:	00 07                	add    BYTE PTR [rdi],al
  401411:	00 00                	add    BYTE PTR [rax],al
  401413:	00 07                	add    BYTE PTR [rdi],al
	...
  40141d:	00 00                	add    BYTE PTR [rax],al
  40141f:	00 40 d0             	add    BYTE PTR [rax-0x30],al
  401422:	60                   	(bad)  
  401423:	00 00                	add    BYTE PTR [rax],al
  401425:	00 00                	add    BYTE PTR [rax],al
  401427:	00 07                	add    BYTE PTR [rdi],al
  401429:	00 00                	add    BYTE PTR [rax],al
  40142b:	00 08                	add    BYTE PTR [rax],cl
	...
  401435:	00 00                	add    BYTE PTR [rax],al
  401437:	00 48 d0             	add    BYTE PTR [rax-0x30],cl
  40143a:	60                   	(bad)  
  40143b:	00 00                	add    BYTE PTR [rax],al
  40143d:	00 00                	add    BYTE PTR [rax],al
  40143f:	00 07                	add    BYTE PTR [rdi],al
  401441:	00 00                	add    BYTE PTR [rax],al
  401443:	00 09                	add    BYTE PTR [rcx],cl
	...
  40144d:	00 00                	add    BYTE PTR [rax],al
  40144f:	00 50 d0             	add    BYTE PTR [rax-0x30],dl
  401452:	60                   	(bad)  
  401453:	00 00                	add    BYTE PTR [rax],al
  401455:	00 00                	add    BYTE PTR [rax],al
  401457:	00 07                	add    BYTE PTR [rdi],al
  401459:	00 00                	add    BYTE PTR [rax],al
  40145b:	00 0a                	add    BYTE PTR [rdx],cl
	...
  401465:	00 00                	add    BYTE PTR [rax],al
  401467:	00 58 d0             	add    BYTE PTR [rax-0x30],bl
  40146a:	60                   	(bad)  
  40146b:	00 00                	add    BYTE PTR [rax],al
  40146d:	00 00                	add    BYTE PTR [rax],al
  40146f:	00 07                	add    BYTE PTR [rdi],al
  401471:	00 00                	add    BYTE PTR [rax],al
  401473:	00 0b                	add    BYTE PTR [rbx],cl
	...
  40147d:	00 00                	add    BYTE PTR [rax],al
  40147f:	00 60 d0             	add    BYTE PTR [rax-0x30],ah
  401482:	60                   	(bad)  
  401483:	00 00                	add    BYTE PTR [rax],al
  401485:	00 00                	add    BYTE PTR [rax],al
  401487:	00 07                	add    BYTE PTR [rdi],al
  401489:	00 00                	add    BYTE PTR [rax],al
  40148b:	00 0c 00             	add    BYTE PTR [rax+rax*1],cl
	...
  401496:	00 00                	add    BYTE PTR [rax],al
  401498:	68 d0 60 00 00       	push   0x60d0
  40149d:	00 00                	add    BYTE PTR [rax],al
  40149f:	00 07                	add    BYTE PTR [rdi],al
  4014a1:	00 00                	add    BYTE PTR [rax],al
  4014a3:	00 0d 00 00 00 00    	add    BYTE PTR [rip+0x0],cl        # 4014a9 <_init-0x34f>
  4014a9:	00 00                	add    BYTE PTR [rax],al
  4014ab:	00 00                	add    BYTE PTR [rax],al
  4014ad:	00 00                	add    BYTE PTR [rax],al
  4014af:	00 70 d0             	add    BYTE PTR [rax-0x30],dh
  4014b2:	60                   	(bad)  
  4014b3:	00 00                	add    BYTE PTR [rax],al
  4014b5:	00 00                	add    BYTE PTR [rax],al
  4014b7:	00 07                	add    BYTE PTR [rdi],al
  4014b9:	00 00                	add    BYTE PTR [rax],al
  4014bb:	00 0e                	add    BYTE PTR [rsi],cl
	...
  4014c5:	00 00                	add    BYTE PTR [rax],al
  4014c7:	00 78 d0             	add    BYTE PTR [rax-0x30],bh
  4014ca:	60                   	(bad)  
  4014cb:	00 00                	add    BYTE PTR [rax],al
  4014cd:	00 00                	add    BYTE PTR [rax],al
  4014cf:	00 07                	add    BYTE PTR [rdi],al
  4014d1:	00 00                	add    BYTE PTR [rax],al
  4014d3:	00 35 00 00 00 00    	add    BYTE PTR [rip+0x0],dh        # 4014d9 <_init-0x31f>
  4014d9:	00 00                	add    BYTE PTR [rax],al
  4014db:	00 00                	add    BYTE PTR [rax],al
  4014dd:	00 00                	add    BYTE PTR [rax],al
  4014df:	00 80 d0 60 00 00    	add    BYTE PTR [rax+0x60d0],al
  4014e5:	00 00                	add    BYTE PTR [rax],al
  4014e7:	00 07                	add    BYTE PTR [rdi],al
  4014e9:	00 00                	add    BYTE PTR [rax],al
  4014eb:	00 0f                	add    BYTE PTR [rdi],cl
	...
  4014f5:	00 00                	add    BYTE PTR [rax],al
  4014f7:	00 88 d0 60 00 00    	add    BYTE PTR [rax+0x60d0],cl
  4014fd:	00 00                	add    BYTE PTR [rax],al
  4014ff:	00 07                	add    BYTE PTR [rdi],al
  401501:	00 00                	add    BYTE PTR [rax],al
  401503:	00 10                	add    BYTE PTR [rax],dl
	...
  40150d:	00 00                	add    BYTE PTR [rax],al
  40150f:	00 90 d0 60 00 00    	add    BYTE PTR [rax+0x60d0],dl
  401515:	00 00                	add    BYTE PTR [rax],al
  401517:	00 07                	add    BYTE PTR [rdi],al
  401519:	00 00                	add    BYTE PTR [rax],al
  40151b:	00 38                	add    BYTE PTR [rax],bh
	...
  401525:	00 00                	add    BYTE PTR [rax],al
  401527:	00 98 d0 60 00 00    	add    BYTE PTR [rax+0x60d0],bl
  40152d:	00 00                	add    BYTE PTR [rax],al
  40152f:	00 07                	add    BYTE PTR [rdi],al
  401531:	00 00                	add    BYTE PTR [rax],al
  401533:	00 13                	add    BYTE PTR [rbx],dl
	...
  40153d:	00 00                	add    BYTE PTR [rax],al
  40153f:	00 a0 d0 60 00 00    	add    BYTE PTR [rax+0x60d0],ah
  401545:	00 00                	add    BYTE PTR [rax],al
  401547:	00 07                	add    BYTE PTR [rdi],al
  401549:	00 00                	add    BYTE PTR [rax],al
  40154b:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
	...
  401556:	00 00                	add    BYTE PTR [rax],al
  401558:	a8 d0                	test   al,0xd0
  40155a:	60                   	(bad)  
  40155b:	00 00                	add    BYTE PTR [rax],al
  40155d:	00 00                	add    BYTE PTR [rax],al
  40155f:	00 07                	add    BYTE PTR [rdi],al
  401561:	00 00                	add    BYTE PTR [rax],al
  401563:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 401569 <_init-0x28f>
  401569:	00 00                	add    BYTE PTR [rax],al
  40156b:	00 00                	add    BYTE PTR [rax],al
  40156d:	00 00                	add    BYTE PTR [rax],al
  40156f:	00 b0 d0 60 00 00    	add    BYTE PTR [rax+0x60d0],dh
  401575:	00 00                	add    BYTE PTR [rax],al
  401577:	00 07                	add    BYTE PTR [rdi],al
  401579:	00 00                	add    BYTE PTR [rax],al
  40157b:	00 16                	add    BYTE PTR [rsi],dl
	...
  401585:	00 00                	add    BYTE PTR [rax],al
  401587:	00 b8 d0 60 00 00    	add    BYTE PTR [rax+0x60d0],bh
  40158d:	00 00                	add    BYTE PTR [rax],al
  40158f:	00 07                	add    BYTE PTR [rdi],al
  401591:	00 00                	add    BYTE PTR [rax],al
  401593:	00 17                	add    BYTE PTR [rdi],dl
	...
  40159d:	00 00                	add    BYTE PTR [rax],al
  40159f:	00 c0                	add    al,al
  4015a1:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  4015a4:	00 00                	add    BYTE PTR [rax],al
  4015a6:	00 00                	add    BYTE PTR [rax],al
  4015a8:	07                   	(bad)  
  4015a9:	00 00                	add    BYTE PTR [rax],al
  4015ab:	00 36                	add    BYTE PTR [rsi],dh
	...
  4015b5:	00 00                	add    BYTE PTR [rax],al
  4015b7:	00 c8                	add    al,cl
  4015b9:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  4015bc:	00 00                	add    BYTE PTR [rax],al
  4015be:	00 00                	add    BYTE PTR [rax],al
  4015c0:	07                   	(bad)  
  4015c1:	00 00                	add    BYTE PTR [rax],al
  4015c3:	00 18                	add    BYTE PTR [rax],bl
	...
  4015cd:	00 00                	add    BYTE PTR [rax],al
  4015cf:	00 d0                	add    al,dl
  4015d1:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  4015d4:	00 00                	add    BYTE PTR [rax],al
  4015d6:	00 00                	add    BYTE PTR [rax],al
  4015d8:	07                   	(bad)  
  4015d9:	00 00                	add    BYTE PTR [rax],al
  4015db:	00 19                	add    BYTE PTR [rcx],bl
	...
  4015e5:	00 00                	add    BYTE PTR [rax],al
  4015e7:	00 d8                	add    al,bl
  4015e9:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  4015ec:	00 00                	add    BYTE PTR [rax],al
  4015ee:	00 00                	add    BYTE PTR [rax],al
  4015f0:	07                   	(bad)  
  4015f1:	00 00                	add    BYTE PTR [rax],al
  4015f3:	00 1a                	add    BYTE PTR [rdx],bl
	...
  4015fd:	00 00                	add    BYTE PTR [rax],al
  4015ff:	00 e0                	add    al,ah
  401601:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  401604:	00 00                	add    BYTE PTR [rax],al
  401606:	00 00                	add    BYTE PTR [rax],al
  401608:	07                   	(bad)  
  401609:	00 00                	add    BYTE PTR [rax],al
  40160b:	00 1b                	add    BYTE PTR [rbx],bl
	...
  401615:	00 00                	add    BYTE PTR [rax],al
  401617:	00 e8                	add    al,ch
  401619:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  40161c:	00 00                	add    BYTE PTR [rax],al
  40161e:	00 00                	add    BYTE PTR [rax],al
  401620:	07                   	(bad)  
  401621:	00 00                	add    BYTE PTR [rax],al
  401623:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
	...
  40162e:	00 00                	add    BYTE PTR [rax],al
  401630:	f0 d0 60 00          	lock shl BYTE PTR [rax+0x0],1
  401634:	00 00                	add    BYTE PTR [rax],al
  401636:	00 00                	add    BYTE PTR [rax],al
  401638:	07                   	(bad)  
  401639:	00 00                	add    BYTE PTR [rax],al
  40163b:	00 1d 00 00 00 00    	add    BYTE PTR [rip+0x0],bl        # 401641 <_init-0x1b7>
  401641:	00 00                	add    BYTE PTR [rax],al
  401643:	00 00                	add    BYTE PTR [rax],al
  401645:	00 00                	add    BYTE PTR [rax],al
  401647:	00 f8                	add    al,bh
  401649:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  40164c:	00 00                	add    BYTE PTR [rax],al
  40164e:	00 00                	add    BYTE PTR [rax],al
  401650:	07                   	(bad)  
  401651:	00 00                	add    BYTE PTR [rax],al
  401653:	00 1e                	add    BYTE PTR [rsi],bl
	...
  401661:	d1 60 00             	shl    DWORD PTR [rax+0x0],1
  401664:	00 00                	add    BYTE PTR [rax],al
  401666:	00 00                	add    BYTE PTR [rax],al
  401668:	07                   	(bad)  
  401669:	00 00                	add    BYTE PTR [rax],al
  40166b:	00 1f                	add    BYTE PTR [rdi],bl
	...
  401675:	00 00                	add    BYTE PTR [rax],al
  401677:	00 08                	add    BYTE PTR [rax],cl
  401679:	d1 60 00             	shl    DWORD PTR [rax+0x0],1
  40167c:	00 00                	add    BYTE PTR [rax],al
  40167e:	00 00                	add    BYTE PTR [rax],al
  401680:	07                   	(bad)  
  401681:	00 00                	add    BYTE PTR [rax],al
  401683:	00 20                	add    BYTE PTR [rax],ah
	...
  40168d:	00 00                	add    BYTE PTR [rax],al
  40168f:	00 10                	add    BYTE PTR [rax],dl
  401691:	d1 60 00             	shl    DWORD PTR [rax+0x0],1
  401694:	00 00                	add    BYTE PTR [rax],al
  401696:	00 00                	add    BYTE PTR [rax],al
  401698:	07                   	(bad)  
  401699:	00 00                	add    BYTE PTR [rax],al
  40169b:	00 21                	add    BYTE PTR [rcx],ah
	...
  4016a5:	00 00                	add    BYTE PTR [rax],al
  4016a7:	00 18                	add    BYTE PTR [rax],bl
  4016a9:	d1 60 00             	shl    DWORD PTR [rax+0x0],1
  4016ac:	00 00                	add    BYTE PTR [rax],al
  4016ae:	00 00                	add    BYTE PTR [rax],al
  4016b0:	07                   	(bad)  
  4016b1:	00 00                	add    BYTE PTR [rax],al
  4016b3:	00 22                	add    BYTE PTR [rdx],ah
	...
  4016bd:	00 00                	add    BYTE PTR [rax],al
  4016bf:	00 20                	add    BYTE PTR [rax],ah
  4016c1:	d1 60 00             	shl    DWORD PTR [rax+0x0],1
  4016c4:	00 00                	add    BYTE PTR [rax],al
  4016c6:	00 00                	add    BYTE PTR [rax],al
  4016c8:	07                   	(bad)  
  4016c9:	00 00                	add    BYTE PTR [rax],al
  4016cb:	00 23                	add    BYTE PTR [rbx],ah
	...
  4016d5:	00 00                	add    BYTE PTR [rax],al
  4016d7:	00 28                	add    BYTE PTR [rax],ch
  4016d9:	d1 60 00             	shl    DWORD PTR [rax+0x0],1
  4016dc:	00 00                	add    BYTE PTR [rax],al
  4016de:	00 00                	add    BYTE PTR [rax],al
  4016e0:	07                   	(bad)  
  4016e1:	00 00                	add    BYTE PTR [rax],al
  4016e3:	00 24 00             	add    BYTE PTR [rax+rax*1],ah
	...
  4016ee:	00 00                	add    BYTE PTR [rax],al
  4016f0:	30 d1                	xor    cl,dl
  4016f2:	60                   	(bad)  
  4016f3:	00 00                	add    BYTE PTR [rax],al
  4016f5:	00 00                	add    BYTE PTR [rax],al
  4016f7:	00 07                	add    BYTE PTR [rdi],al
  4016f9:	00 00                	add    BYTE PTR [rax],al
  4016fb:	00 25 00 00 00 00    	add    BYTE PTR [rip+0x0],ah        # 401701 <_init-0xf7>
  401701:	00 00                	add    BYTE PTR [rax],al
  401703:	00 00                	add    BYTE PTR [rax],al
  401705:	00 00                	add    BYTE PTR [rax],al
  401707:	00 38                	add    BYTE PTR [rax],bh
  401709:	d1 60 00             	shl    DWORD PTR [rax+0x0],1
  40170c:	00 00                	add    BYTE PTR [rax],al
  40170e:	00 00                	add    BYTE PTR [rax],al
  401710:	07                   	(bad)  
  401711:	00 00                	add    BYTE PTR [rax],al
  401713:	00 26                	add    BYTE PTR [rsi],ah
	...
  40171d:	00 00                	add    BYTE PTR [rax],al
  40171f:	00 40 d1             	add    BYTE PTR [rax-0x2f],al
  401722:	60                   	(bad)  
  401723:	00 00                	add    BYTE PTR [rax],al
  401725:	00 00                	add    BYTE PTR [rax],al
  401727:	00 07                	add    BYTE PTR [rdi],al
  401729:	00 00                	add    BYTE PTR [rax],al
  40172b:	00 27                	add    BYTE PTR [rdi],ah
	...
  401735:	00 00                	add    BYTE PTR [rax],al
  401737:	00 48 d1             	add    BYTE PTR [rax-0x2f],cl
  40173a:	60                   	(bad)  
  40173b:	00 00                	add    BYTE PTR [rax],al
  40173d:	00 00                	add    BYTE PTR [rax],al
  40173f:	00 07                	add    BYTE PTR [rdi],al
  401741:	00 00                	add    BYTE PTR [rax],al
  401743:	00 3b                	add    BYTE PTR [rbx],bh
	...
  40174d:	00 00                	add    BYTE PTR [rax],al
  40174f:	00 50 d1             	add    BYTE PTR [rax-0x2f],dl
  401752:	60                   	(bad)  
  401753:	00 00                	add    BYTE PTR [rax],al
  401755:	00 00                	add    BYTE PTR [rax],al
  401757:	00 07                	add    BYTE PTR [rdi],al
  401759:	00 00                	add    BYTE PTR [rax],al
  40175b:	00 28                	add    BYTE PTR [rax],ch
	...
  401765:	00 00                	add    BYTE PTR [rax],al
  401767:	00 58 d1             	add    BYTE PTR [rax-0x2f],bl
  40176a:	60                   	(bad)  
  40176b:	00 00                	add    BYTE PTR [rax],al
  40176d:	00 00                	add    BYTE PTR [rax],al
  40176f:	00 07                	add    BYTE PTR [rdi],al
  401771:	00 00                	add    BYTE PTR [rax],al
  401773:	00 29                	add    BYTE PTR [rcx],ch
	...
  40177d:	00 00                	add    BYTE PTR [rax],al
  40177f:	00 60 d1             	add    BYTE PTR [rax-0x2f],ah
  401782:	60                   	(bad)  
  401783:	00 00                	add    BYTE PTR [rax],al
  401785:	00 00                	add    BYTE PTR [rax],al
  401787:	00 07                	add    BYTE PTR [rdi],al
  401789:	00 00                	add    BYTE PTR [rax],al
  40178b:	00 2a                	add    BYTE PTR [rdx],ch
	...
  401795:	00 00                	add    BYTE PTR [rax],al
  401797:	00 68 d1             	add    BYTE PTR [rax-0x2f],ch
  40179a:	60                   	(bad)  
  40179b:	00 00                	add    BYTE PTR [rax],al
  40179d:	00 00                	add    BYTE PTR [rax],al
  40179f:	00 07                	add    BYTE PTR [rdi],al
  4017a1:	00 00                	add    BYTE PTR [rax],al
  4017a3:	00 2b                	add    BYTE PTR [rbx],ch
	...
  4017ad:	00 00                	add    BYTE PTR [rax],al
  4017af:	00 70 d1             	add    BYTE PTR [rax-0x2f],dh
  4017b2:	60                   	(bad)  
  4017b3:	00 00                	add    BYTE PTR [rax],al
  4017b5:	00 00                	add    BYTE PTR [rax],al
  4017b7:	00 07                	add    BYTE PTR [rdi],al
  4017b9:	00 00                	add    BYTE PTR [rax],al
  4017bb:	00 2c 00             	add    BYTE PTR [rax+rax*1],ch
	...
  4017c6:	00 00                	add    BYTE PTR [rax],al
  4017c8:	78 d1                	js     40179b <_init-0x5d>
  4017ca:	60                   	(bad)  
  4017cb:	00 00                	add    BYTE PTR [rax],al
  4017cd:	00 00                	add    BYTE PTR [rax],al
  4017cf:	00 07                	add    BYTE PTR [rdi],al
  4017d1:	00 00                	add    BYTE PTR [rax],al
  4017d3:	00 2d 00 00 00 00    	add    BYTE PTR [rip+0x0],ch        # 4017d9 <_init-0x1f>
  4017d9:	00 00                	add    BYTE PTR [rax],al
  4017db:	00 00                	add    BYTE PTR [rax],al
  4017dd:	00 00                	add    BYTE PTR [rax],al
  4017df:	00 80 d1 60 00 00    	add    BYTE PTR [rax+0x60d1],al
  4017e5:	00 00                	add    BYTE PTR [rax],al
  4017e7:	00 07                	add    BYTE PTR [rdi],al
  4017e9:	00 00                	add    BYTE PTR [rax],al
  4017eb:	00 2e                	add    BYTE PTR [rsi],ch
	...

Disassembly of section .init:

00000000004017f8 <_init>:
  4017f8:	48 83 ec 08          	sub    rsp,0x8
  4017fc:	48 8b 05 f5 b7 20 00 	mov    rax,QWORD PTR [rip+0x20b7f5]        # 60cff8 <_DYNAMIC+0x200>
  401803:	48 85 c0             	test   rax,rax
  401806:	74 05                	je     40180d <_init+0x15>
  401808:	e8 03 03 00 00       	call   401b10 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt+0x10>
  40180d:	48 83 c4 08          	add    rsp,0x8
  401811:	c3                   	ret    

Disassembly of section .plt:

0000000000401820 <std::__throw_length_error(char const*)@plt-0x10>:
  401820:	ff 35 e2 b7 20 00    	push   QWORD PTR [rip+0x20b7e2]        # 60d008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401826:	ff 25 e4 b7 20 00    	jmp    QWORD PTR [rip+0x20b7e4]        # 60d010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40182c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000401830 <std::__throw_length_error(char const*)@plt>:
  401830:	ff 25 e2 b7 20 00    	jmp    QWORD PTR [rip+0x20b7e2]        # 60d018 <_GLOBAL_OFFSET_TABLE_+0x18>
  401836:	68 00 00 00 00       	push   0x0
  40183b:	e9 e0 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401840 <std::ostream::operator<<(int)@plt>:
  401840:	ff 25 da b7 20 00    	jmp    QWORD PTR [rip+0x20b7da]        # 60d020 <_GLOBAL_OFFSET_TABLE_+0x20>
  401846:	68 01 00 00 00       	push   0x1
  40184b:	e9 d0 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401850 <std::__throw_bad_cast()@plt>:
  401850:	ff 25 d2 b7 20 00    	jmp    QWORD PTR [rip+0x20b7d2]        # 60d028 <_GLOBAL_OFFSET_TABLE_+0x28>
  401856:	68 02 00 00 00       	push   0x2
  40185b:	e9 c0 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401860 <std::ios_base::ios_base()@plt>:
  401860:	ff 25 ca b7 20 00    	jmp    QWORD PTR [rip+0x20b7ca]        # 60d030 <_GLOBAL_OFFSET_TABLE_+0x30>
  401866:	68 03 00 00 00       	push   0x3
  40186b:	e9 b0 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401870 <operator new[](unsigned long)@plt>:
  401870:	ff 25 c2 b7 20 00    	jmp    QWORD PTR [rip+0x20b7c2]        # 60d038 <_GLOBAL_OFFSET_TABLE_+0x38>
  401876:	68 04 00 00 00       	push   0x4
  40187b:	e9 a0 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401880 <operator delete(void*)@plt>:
  401880:	ff 25 ba b7 20 00    	jmp    QWORD PTR [rip+0x20b7ba]        # 60d040 <_GLOBAL_OFFSET_TABLE_+0x40>
  401886:	68 05 00 00 00       	push   0x5
  40188b:	e9 90 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401890 <std::ctype<char>::_M_widen_init() const@plt>:
  401890:	ff 25 b2 b7 20 00    	jmp    QWORD PTR [rip+0x20b7b2]        # 60d048 <_GLOBAL_OFFSET_TABLE_+0x48>
  401896:	68 06 00 00 00       	push   0x6
  40189b:	e9 80 ff ff ff       	jmp    401820 <_init+0x28>

00000000004018a0 <__printf_chk@plt>:
  4018a0:	ff 25 aa b7 20 00    	jmp    QWORD PTR [rip+0x20b7aa]        # 60d050 <_GLOBAL_OFFSET_TABLE_+0x50>
  4018a6:	68 07 00 00 00       	push   0x7
  4018ab:	e9 70 ff ff ff       	jmp    401820 <_init+0x28>

00000000004018b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
  4018b0:	ff 25 a2 b7 20 00    	jmp    QWORD PTR [rip+0x20b7a2]        # 60d058 <_GLOBAL_OFFSET_TABLE_+0x58>
  4018b6:	68 08 00 00 00       	push   0x8
  4018bb:	e9 60 ff ff ff       	jmp    401820 <_init+0x28>

00000000004018c0 <std::ios_base::Init::Init()@plt>:
  4018c0:	ff 25 9a b7 20 00    	jmp    QWORD PTR [rip+0x20b79a]        # 60d060 <_GLOBAL_OFFSET_TABLE_+0x60>
  4018c6:	68 09 00 00 00       	push   0x9
  4018cb:	e9 50 ff ff ff       	jmp    401820 <_init+0x28>

00000000004018d0 <std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
  4018d0:	ff 25 92 b7 20 00    	jmp    QWORD PTR [rip+0x20b792]        # 60d068 <_GLOBAL_OFFSET_TABLE_+0x68>
  4018d6:	68 0a 00 00 00       	push   0xa
  4018db:	e9 40 ff ff ff       	jmp    401820 <_init+0x28>

00000000004018e0 <__libc_start_main@plt>:
  4018e0:	ff 25 8a b7 20 00    	jmp    QWORD PTR [rip+0x20b78a]        # 60d070 <_GLOBAL_OFFSET_TABLE_+0x70>
  4018e6:	68 0b 00 00 00       	push   0xb
  4018eb:	e9 30 ff ff ff       	jmp    401820 <_init+0x28>

00000000004018f0 <std::length_error::~length_error()@plt>:
  4018f0:	ff 25 82 b7 20 00    	jmp    QWORD PTR [rip+0x20b782]        # 60d078 <_GLOBAL_OFFSET_TABLE_+0x78>
  4018f6:	68 0c 00 00 00       	push   0xc
  4018fb:	e9 20 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401900 <__cxa_atexit@plt>:
  401900:	ff 25 7a b7 20 00    	jmp    QWORD PTR [rip+0x20b77a]        # 60d080 <_GLOBAL_OFFSET_TABLE_+0x80>
  401906:	68 0d 00 00 00       	push   0xd
  40190b:	e9 10 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401910 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
  401910:	ff 25 72 b7 20 00    	jmp    QWORD PTR [rip+0x20b772]        # 60d088 <_GLOBAL_OFFSET_TABLE_+0x88>
  401916:	68 0e 00 00 00       	push   0xe
  40191b:	e9 00 ff ff ff       	jmp    401820 <_init+0x28>

0000000000401920 <std::ios_base::Init::~Init()@plt>:
  401920:	ff 25 6a b7 20 00    	jmp    QWORD PTR [rip+0x20b76a]        # 60d090 <_GLOBAL_OFFSET_TABLE_+0x90>
  401926:	68 0f 00 00 00       	push   0xf
  40192b:	e9 f0 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401930 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
  401930:	ff 25 62 b7 20 00    	jmp    QWORD PTR [rip+0x20b762]        # 60d098 <_GLOBAL_OFFSET_TABLE_+0x98>
  401936:	68 10 00 00 00       	push   0x10
  40193b:	e9 e0 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401940 <std::locale::locale()@plt>:
  401940:	ff 25 5a b7 20 00    	jmp    QWORD PTR [rip+0x20b75a]        # 60d0a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  401946:	68 11 00 00 00       	push   0x11
  40194b:	e9 d0 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401950 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>:
  401950:	ff 25 52 b7 20 00    	jmp    QWORD PTR [rip+0x20b752]        # 60d0a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  401956:	68 12 00 00 00       	push   0x12
  40195b:	e9 c0 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
  401960:	ff 25 4a b7 20 00    	jmp    QWORD PTR [rip+0x20b74a]        # 60d0b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  401966:	68 13 00 00 00       	push   0x13
  40196b:	e9 b0 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401970 <memmove@plt>:
  401970:	ff 25 42 b7 20 00    	jmp    QWORD PTR [rip+0x20b742]        # 60d0b8 <_GLOBAL_OFFSET_TABLE_+0xb8>
  401976:	68 14 00 00 00       	push   0x14
  40197b:	e9 a0 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401980 <vsnprintf@plt>:
  401980:	ff 25 3a b7 20 00    	jmp    QWORD PTR [rip+0x20b73a]        # 60d0c0 <_GLOBAL_OFFSET_TABLE_+0xc0>
  401986:	68 15 00 00 00       	push   0x15
  40198b:	e9 90 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401990 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>:
  401990:	ff 25 32 b7 20 00    	jmp    QWORD PTR [rip+0x20b732]        # 60d0c8 <_GLOBAL_OFFSET_TABLE_+0xc8>
  401996:	68 16 00 00 00       	push   0x16
  40199b:	e9 80 fe ff ff       	jmp    401820 <_init+0x28>

00000000004019a0 <std::ostream::flush()@plt>:
  4019a0:	ff 25 2a b7 20 00    	jmp    QWORD PTR [rip+0x20b72a]        # 60d0d0 <_GLOBAL_OFFSET_TABLE_+0xd0>
  4019a6:	68 17 00 00 00       	push   0x17
  4019ab:	e9 70 fe ff ff       	jmp    401820 <_init+0x28>

00000000004019b0 <std::__throw_bad_function_call()@plt>:
  4019b0:	ff 25 22 b7 20 00    	jmp    QWORD PTR [rip+0x20b722]        # 60d0d8 <_GLOBAL_OFFSET_TABLE_+0xd8>
  4019b6:	68 18 00 00 00       	push   0x18
  4019bb:	e9 60 fe ff ff       	jmp    401820 <_init+0x28>

00000000004019c0 <__stack_chk_fail@plt>:
  4019c0:	ff 25 1a b7 20 00    	jmp    QWORD PTR [rip+0x20b71a]        # 60d0e0 <_GLOBAL_OFFSET_TABLE_+0xe0>
  4019c6:	68 19 00 00 00       	push   0x19
  4019cb:	e9 50 fe ff ff       	jmp    401820 <_init+0x28>

00000000004019d0 <std::ios_base::~ios_base()@plt>:
  4019d0:	ff 25 12 b7 20 00    	jmp    QWORD PTR [rip+0x20b712]        # 60d0e8 <_GLOBAL_OFFSET_TABLE_+0xe8>
  4019d6:	68 1a 00 00 00       	push   0x1a
  4019db:	e9 40 fe ff ff       	jmp    401820 <_init+0x28>

00000000004019e0 <__cxa_allocate_exception@plt>:
  4019e0:	ff 25 0a b7 20 00    	jmp    QWORD PTR [rip+0x20b70a]        # 60d0f0 <_GLOBAL_OFFSET_TABLE_+0xf0>
  4019e6:	68 1b 00 00 00       	push   0x1b
  4019eb:	e9 30 fe ff ff       	jmp    401820 <_init+0x28>

00000000004019f0 <__cxa_free_exception@plt>:
  4019f0:	ff 25 02 b7 20 00    	jmp    QWORD PTR [rip+0x20b702]        # 60d0f8 <_GLOBAL_OFFSET_TABLE_+0xf8>
  4019f6:	68 1c 00 00 00       	push   0x1c
  4019fb:	e9 20 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401a00 <std::istream::operator>>(int&)@plt>:
  401a00:	ff 25 fa b6 20 00    	jmp    QWORD PTR [rip+0x20b6fa]        # 60d100 <_GLOBAL_OFFSET_TABLE_+0x100>
  401a06:	68 1d 00 00 00       	push   0x1d
  401a0b:	e9 10 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401a10 <std::__throw_logic_error(char const*)@plt>:
  401a10:	ff 25 f2 b6 20 00    	jmp    QWORD PTR [rip+0x20b6f2]        # 60d108 <_GLOBAL_OFFSET_TABLE_+0x108>
  401a16:	68 1e 00 00 00       	push   0x1e
  401a1b:	e9 00 fe ff ff       	jmp    401820 <_init+0x28>

0000000000401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
  401a20:	ff 25 ea b6 20 00    	jmp    QWORD PTR [rip+0x20b6ea]        # 60d110 <_GLOBAL_OFFSET_TABLE_+0x110>
  401a26:	68 1f 00 00 00       	push   0x1f
  401a2b:	e9 f0 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401a30 <operator delete[](void*)@plt>:
  401a30:	ff 25 e2 b6 20 00    	jmp    QWORD PTR [rip+0x20b6e2]        # 60d118 <_GLOBAL_OFFSET_TABLE_+0x118>
  401a36:	68 20 00 00 00       	push   0x20
  401a3b:	e9 e0 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401a40 <__cxa_throw@plt>:
  401a40:	ff 25 da b6 20 00    	jmp    QWORD PTR [rip+0x20b6da]        # 60d120 <_GLOBAL_OFFSET_TABLE_+0x120>
  401a46:	68 21 00 00 00       	push   0x21
  401a4b:	e9 d0 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401a50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>:
  401a50:	ff 25 d2 b6 20 00    	jmp    QWORD PTR [rip+0x20b6d2]        # 60d128 <_GLOBAL_OFFSET_TABLE_+0x128>
  401a56:	68 22 00 00 00       	push   0x22
  401a5b:	e9 c0 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401a60 <std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>:
  401a60:	ff 25 ca b6 20 00    	jmp    QWORD PTR [rip+0x20b6ca]        # 60d130 <_GLOBAL_OFFSET_TABLE_+0x130>
  401a66:	68 23 00 00 00       	push   0x23
  401a6b:	e9 b0 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401a70 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  401a70:	ff 25 c2 b6 20 00    	jmp    QWORD PTR [rip+0x20b6c2]        # 60d138 <_GLOBAL_OFFSET_TABLE_+0x138>
  401a76:	68 24 00 00 00       	push   0x24
  401a7b:	e9 a0 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401a80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>:
  401a80:	ff 25 ba b6 20 00    	jmp    QWORD PTR [rip+0x20b6ba]        # 60d140 <_GLOBAL_OFFSET_TABLE_+0x140>
  401a86:	68 25 00 00 00       	push   0x25
  401a8b:	e9 90 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401a90 <__gxx_personality_v0@plt>:
  401a90:	ff 25 b2 b6 20 00    	jmp    QWORD PTR [rip+0x20b6b2]        # 60d148 <_GLOBAL_OFFSET_TABLE_+0x148>
  401a96:	68 26 00 00 00       	push   0x26
  401a9b:	e9 80 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401aa0 <operator new(unsigned long)@plt>:
  401aa0:	ff 25 aa b6 20 00    	jmp    QWORD PTR [rip+0x20b6aa]        # 60d150 <_GLOBAL_OFFSET_TABLE_+0x150>
  401aa6:	68 27 00 00 00       	push   0x27
  401aab:	e9 70 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401ab0 <_Unwind_Resume@plt>:
  401ab0:	ff 25 a2 b6 20 00    	jmp    QWORD PTR [rip+0x20b6a2]        # 60d158 <_GLOBAL_OFFSET_TABLE_+0x158>
  401ab6:	68 28 00 00 00       	push   0x28
  401abb:	e9 60 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401ac0 <std::locale::~locale()@plt>:
  401ac0:	ff 25 9a b6 20 00    	jmp    QWORD PTR [rip+0x20b69a]        # 60d160 <_GLOBAL_OFFSET_TABLE_+0x160>
  401ac6:	68 29 00 00 00       	push   0x29
  401acb:	e9 50 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401ad0 <sqrt@plt>:
  401ad0:	ff 25 92 b6 20 00    	jmp    QWORD PTR [rip+0x20b692]        # 60d168 <_GLOBAL_OFFSET_TABLE_+0x168>
  401ad6:	68 2a 00 00 00       	push   0x2a
  401adb:	e9 40 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401ae0 <std::ostream::put(char)@plt>:
  401ae0:	ff 25 8a b6 20 00    	jmp    QWORD PTR [rip+0x20b68a]        # 60d170 <_GLOBAL_OFFSET_TABLE_+0x170>
  401ae6:	68 2b 00 00 00       	push   0x2b
  401aeb:	e9 30 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401af0 <memcpy@plt>:
  401af0:	ff 25 82 b6 20 00    	jmp    QWORD PTR [rip+0x20b682]        # 60d178 <_GLOBAL_OFFSET_TABLE_+0x178>
  401af6:	68 2c 00 00 00       	push   0x2c
  401afb:	e9 20 fd ff ff       	jmp    401820 <_init+0x28>

0000000000401b00 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt>:
  401b00:	ff 25 7a b6 20 00    	jmp    QWORD PTR [rip+0x20b67a]        # 60d180 <_GLOBAL_OFFSET_TABLE_+0x180>
  401b06:	68 2d 00 00 00       	push   0x2d
  401b0b:	e9 10 fd ff ff       	jmp    401820 <_init+0x28>

Disassembly of section .plt.got:

0000000000401b10 <.plt.got>:
  401b10:	ff 25 e2 b4 20 00    	jmp    QWORD PTR [rip+0x20b4e2]        # 60cff8 <_DYNAMIC+0x200>
  401b16:	66 90                	xchg   ax,ax

Disassembly of section .text:

0000000000401b20 <main>:
  401b20:	41 54                	push   r12
  401b22:	55                   	push   rbp
  401b23:	be 00 9b 40 00       	mov    esi,0x409b00
  401b28:	53                   	push   rbx
  401b29:	ba 20 00 00 00       	mov    edx,0x20
  401b2e:	48 81 ec 60 02 00 00 	sub    rsp,0x260
  401b35:	48 8d 8c 24 b0 01 00 	lea    rcx,[rsp+0x1b0]
  401b3c:	00 
  401b3d:	48 8d 7c 24 30       	lea    rdi,[rsp+0x30]
  401b42:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  401b49:	00 00 
  401b4b:	48 89 84 24 58 02 00 	mov    QWORD PTR [rsp+0x258],rax
  401b52:	00 
  401b53:	31 c0                	xor    eax,eax
  401b55:	e8 66 7b 00 00       	call   4096c0 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::initializer_list<unsigned char>, std::allocator<unsigned char> const&)>
  401b5a:	48 8d 8c 24 b0 01 00 	lea    rcx,[rsp+0x1b0]
  401b61:	00 
  401b62:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
  401b67:	be e0 9a 40 00       	mov    esi,0x409ae0
  401b6c:	ba 20 00 00 00       	mov    edx,0x20
  401b71:	e8 4a 7b 00 00       	call   4096c0 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::initializer_list<unsigned char>, std::allocator<unsigned char> const&)>
  401b76:	48 8d 8c 24 b0 01 00 	lea    rcx,[rsp+0x1b0]
  401b7d:	00 
  401b7e:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  401b83:	be d0 9a 40 00       	mov    esi,0x409ad0
  401b88:	ba 10 00 00 00       	mov    edx,0x10
  401b8d:	e8 2e 7b 00 00       	call   4096c0 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::initializer_list<unsigned char>, std::allocator<unsigned char> const&)>
  401b92:	48 8d 8c 24 b0 01 00 	lea    rcx,[rsp+0x1b0]
  401b99:	00 
  401b9a:	48 8d bc 24 90 00 00 	lea    rdi,[rsp+0x90]
  401ba1:	00 
  401ba2:	be c0 9a 40 00       	mov    esi,0x409ac0
  401ba7:	ba 10 00 00 00       	mov    edx,0x10
  401bac:	e8 0f 7b 00 00       	call   4096c0 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::initializer_list<unsigned char>, std::allocator<unsigned char> const&)>
  401bb1:	48 8d 84 24 e0 01 00 	lea    rax,[rsp+0x1e0]
  401bb8:	00 
  401bb9:	48 8d bc 24 d0 01 00 	lea    rdi,[rsp+0x1d0]
  401bc0:	00 
  401bc1:	ba 5e 9a 40 00       	mov    edx,0x409a5e
  401bc6:	be 56 9a 40 00       	mov    esi,0x409a56
  401bcb:	48 89 84 24 d0 01 00 	mov    QWORD PTR [rsp+0x1d0],rax
  401bd2:	00 
  401bd3:	e8 58 11 00 00       	call   402d30 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]>
  401bd8:	ba 45 00 00 00       	mov    edx,0x45
  401bdd:	be c0 98 40 00       	mov    esi,0x4098c0
  401be2:	bf 60 d5 60 00       	mov    edi,0x60d560
  401be7:	e8 74 fd ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401bec:	bf 60 d5 60 00       	mov    edi,0x60d560
  401bf1:	e8 7a fe ff ff       	call   401a70 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  401bf6:	48 8d 74 24 0c       	lea    rsi,[rsp+0xc]
  401bfb:	bf c0 d2 60 00       	mov    edi,0x60d2c0
  401c00:	e8 fb fd ff ff       	call   401a00 <std::istream::operator>>(int&)@plt>
  401c05:	ba 16 00 00 00       	mov    edx,0x16
  401c0a:	be 5f 9a 40 00       	mov    esi,0x409a5f
  401c0f:	bf 60 d5 60 00       	mov    edi,0x60d560
  401c14:	e8 47 fd ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401c19:	bf 60 d5 60 00       	mov    edi,0x60d560
  401c1e:	e8 4d fe ff ff       	call   401a70 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  401c23:	48 8d 74 24 10       	lea    rsi,[rsp+0x10]
  401c28:	bf c0 d2 60 00       	mov    edi,0x60d2c0
  401c2d:	e8 ce fd ff ff       	call   401a00 <std::istream::operator>>(int&)@plt>
  401c32:	ba 17 00 00 00       	mov    edx,0x17
  401c37:	be 76 9a 40 00       	mov    esi,0x409a76
  401c3c:	bf 60 d5 60 00       	mov    edi,0x60d560
  401c41:	e8 1a fd ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401c46:	bf 60 d5 60 00       	mov    edi,0x60d560
  401c4b:	e8 20 fe ff ff       	call   401a70 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  401c50:	48 8d 74 24 14       	lea    rsi,[rsp+0x14]
  401c55:	bf c0 d2 60 00       	mov    edi,0x60d2c0
  401c5a:	e8 a1 fd ff ff       	call   401a00 <std::istream::operator>>(int&)@plt>
  401c5f:	8b 44 24 0c          	mov    eax,DWORD PTR [rsp+0xc]
  401c63:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0x0
  401c6a:	00 00 00 00 00 
  401c6f:	48 c7 84 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],0x0
  401c76:	00 00 00 00 00 
  401c7b:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x0
  401c82:	00 00 00 00 00 
  401c87:	c7 44 24 20 04 00 00 	mov    DWORD PTR [rsp+0x20],0x4
  401c8e:	00 
  401c8f:	c7 44 24 24 0a 00 00 	mov    DWORD PTR [rsp+0x24],0xa
  401c96:	00 
  401c97:	83 f8 01             	cmp    eax,0x1
  401c9a:	0f 84 52 03 00 00    	je     401ff2 <main+0x4d2>
  401ca0:	83 f8 02             	cmp    eax,0x2
  401ca3:	0f 84 86 01 00 00    	je     401e2f <main+0x30f>
  401ca9:	ba 23 00 00 00       	mov    edx,0x23
  401cae:	be 60 99 40 00       	mov    esi,0x409960
  401cb3:	bf 60 d5 60 00       	mov    edi,0x60d560
  401cb8:	e8 a3 fc ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401cbd:	bf 60 d5 60 00       	mov    edi,0x60d560
  401cc2:	e8 a9 fd ff ff       	call   401a70 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  401cc7:	48 8d 9c 24 10 02 00 	lea    rbx,[rsp+0x210]
  401cce:	00 
  401ccf:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
  401cd6:	00 
  401cd7:	48 89 df             	mov    rdi,rbx
  401cda:	e8 f1 54 00 00       	call   4071d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)>
  401cdf:	be 8e 9a 40 00       	mov    esi,0x409a8e
  401ce4:	48 89 df             	mov    rdi,rbx
  401ce7:	e8 34 fd ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  401cec:	85 c0                	test   eax,eax
  401cee:	0f 85 a6 00 00 00    	jne    401d9a <main+0x27a>
  401cf4:	48 8b bc 24 10 02 00 	mov    rdi,QWORD PTR [rsp+0x210]
  401cfb:	00 
  401cfc:	48 83 c3 10          	add    rbx,0x10
  401d00:	48 39 df             	cmp    rdi,rbx
  401d03:	74 05                	je     401d0a <main+0x1ea>
  401d05:	e8 76 fb ff ff       	call   401880 <operator delete(void*)@plt>
  401d0a:	48 8b bc 24 b0 00 00 	mov    rdi,QWORD PTR [rsp+0xb0]
  401d11:	00 
  401d12:	48 85 ff             	test   rdi,rdi
  401d15:	74 05                	je     401d1c <main+0x1fc>
  401d17:	e8 64 fb ff ff       	call   401880 <operator delete(void*)@plt>
  401d1c:	48 8b bc 24 d0 01 00 	mov    rdi,QWORD PTR [rsp+0x1d0]
  401d23:	00 
  401d24:	48 8d 84 24 e0 01 00 	lea    rax,[rsp+0x1e0]
  401d2b:	00 
  401d2c:	48 39 c7             	cmp    rdi,rax
  401d2f:	74 05                	je     401d36 <main+0x216>
  401d31:	e8 4a fb ff ff       	call   401880 <operator delete(void*)@plt>
  401d36:	48 8b bc 24 90 00 00 	mov    rdi,QWORD PTR [rsp+0x90]
  401d3d:	00 
  401d3e:	48 85 ff             	test   rdi,rdi
  401d41:	74 05                	je     401d48 <main+0x228>
  401d43:	e8 38 fb ff ff       	call   401880 <operator delete(void*)@plt>
  401d48:	48 8b 7c 24 70       	mov    rdi,QWORD PTR [rsp+0x70]
  401d4d:	48 85 ff             	test   rdi,rdi
  401d50:	74 05                	je     401d57 <main+0x237>
  401d52:	e8 29 fb ff ff       	call   401880 <operator delete(void*)@plt>
  401d57:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
  401d5c:	48 85 ff             	test   rdi,rdi
  401d5f:	74 05                	je     401d66 <main+0x246>
  401d61:	e8 1a fb ff ff       	call   401880 <operator delete(void*)@plt>
  401d66:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
  401d6b:	48 85 ff             	test   rdi,rdi
  401d6e:	74 05                	je     401d75 <main+0x255>
  401d70:	e8 0b fb ff ff       	call   401880 <operator delete(void*)@plt>
  401d75:	31 c0                	xor    eax,eax
  401d77:	48 8b 9c 24 58 02 00 	mov    rbx,QWORD PTR [rsp+0x258]
  401d7e:	00 
  401d7f:	64 48 33 1c 25 28 00 	xor    rbx,QWORD PTR fs:0x28
  401d86:	00 00 
  401d88:	0f 85 d3 03 00 00    	jne    402161 <main+0x641>
  401d8e:	48 81 c4 60 02 00 00 	add    rsp,0x260
  401d95:	5b                   	pop    rbx
  401d96:	5d                   	pop    rbp
  401d97:	41 5c                	pop    r12
  401d99:	c3                   	ret    
  401d9a:	48 8d ac 24 30 02 00 	lea    rbp,[rsp+0x230]
  401da1:	00 
  401da2:	48 89 de             	mov    rsi,rbx
  401da5:	48 89 ef             	mov    rdi,rbp
  401da8:	e8 13 70 00 00       	call   408dc0 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
  401dad:	8b 44 24 10          	mov    eax,DWORD PTR [rsp+0x10]
  401db1:	48 83 bc 24 40 02 00 	cmp    QWORD PTR [rsp+0x240],0x0
  401db8:	00 00 
  401dba:	89 44 24 1c          	mov    DWORD PTR [rsp+0x1c],eax
  401dbe:	8b 44 24 14          	mov    eax,DWORD PTR [rsp+0x14]
  401dc2:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
  401dc6:	0f 84 9a 03 00 00    	je     402166 <main+0x646>
  401dcc:	48 8d 54 24 18       	lea    rdx,[rsp+0x18]
  401dd1:	48 8d 74 24 1c       	lea    rsi,[rsp+0x1c]
  401dd6:	48 89 ef             	mov    rdi,rbp
  401dd9:	ff 94 24 48 02 00 00 	call   QWORD PTR [rsp+0x248]
  401de0:	ba 0a 00 00 00       	mov    edx,0xa
  401de5:	be 94 9a 40 00       	mov    esi,0x409a94
  401dea:	bf 60 d5 60 00       	mov    edi,0x60d560
  401def:	41 89 c4             	mov    r12d,eax
  401df2:	e8 69 fb ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401df7:	44 89 e6             	mov    esi,r12d
  401dfa:	bf 60 d5 60 00       	mov    edi,0x60d560
  401dff:	e8 3c fa ff ff       	call   401840 <std::ostream::operator<<(int)@plt>
  401e04:	48 89 c7             	mov    rdi,rax
  401e07:	e8 64 fc ff ff       	call   401a70 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  401e0c:	48 8b 84 24 40 02 00 	mov    rax,QWORD PTR [rsp+0x240]
  401e13:	00 
  401e14:	48 85 c0             	test   rax,rax
  401e17:	0f 84 d7 fe ff ff    	je     401cf4 <main+0x1d4>
  401e1d:	ba 03 00 00 00       	mov    edx,0x3
  401e22:	48 89 ee             	mov    rsi,rbp
  401e25:	48 89 ef             	mov    rdi,rbp
  401e28:	ff d0                	call   rax
  401e2a:	e9 c5 fe ff ff       	jmp    401cf4 <main+0x1d4>
  401e2f:	ba 55 00 00 00       	mov    edx,0x55
  401e34:	be 08 99 40 00       	mov    esi,0x409908
  401e39:	bf 60 d5 60 00       	mov    edi,0x60d560
  401e3e:	e8 1d fb ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401e43:	bf 60 d5 60 00       	mov    edi,0x60d560
  401e48:	e8 23 fc ff ff       	call   401a70 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  401e4d:	48 8d 9c 24 10 02 00 	lea    rbx,[rsp+0x210]
  401e54:	00 
  401e55:	bf c0 d2 60 00       	mov    edi,0x60d2c0
  401e5a:	48 c7 84 24 18 02 00 	mov    QWORD PTR [rsp+0x218],0x0
  401e61:	00 00 00 00 00 
  401e66:	c6 84 24 20 02 00 00 	mov    BYTE PTR [rsp+0x220],0x0
  401e6d:	00 
  401e6e:	48 8d 43 10          	lea    rax,[rbx+0x10]
  401e72:	48 89 de             	mov    rsi,rbx
  401e75:	48 89 84 24 10 02 00 	mov    QWORD PTR [rsp+0x210],rax
  401e7c:	00 
  401e7d:	e8 de fb ff ff       	call   401a60 <std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
  401e82:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  401e87:	48 8d bc 24 90 01 00 	lea    rdi,[rsp+0x190]
  401e8e:	00 
  401e8f:	e8 bc 78 00 00       	call   409750 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)>
  401e94:	48 8b b4 24 10 02 00 	mov    rsi,QWORD PTR [rsp+0x210]
  401e9b:	00 
  401e9c:	48 8d ac 24 30 02 00 	lea    rbp,[rsp+0x230]
  401ea3:	00 
  401ea4:	48 8d 45 10          	lea    rax,[rbp+0x10]
  401ea8:	48 89 ef             	mov    rdi,rbp
  401eab:	48 89 f2             	mov    rdx,rsi
  401eae:	48 03 94 24 18 02 00 	add    rdx,QWORD PTR [rsp+0x218]
  401eb5:	00 
  401eb6:	48 89 84 24 30 02 00 	mov    QWORD PTR [rsp+0x230],rax
  401ebd:	00 
  401ebe:	e8 6d 0e 00 00       	call   402d30 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]>
  401ec3:	48 8d bc 24 50 01 00 	lea    rdi,[rsp+0x150]
  401eca:	00 
  401ecb:	48 89 ee             	mov    rsi,rbp
  401ece:	e8 bd 56 00 00       	call   407590 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
  401ed3:	48 8d 74 24 50       	lea    rsi,[rsp+0x50]
  401ed8:	48 8d bc 24 70 01 00 	lea    rdi,[rsp+0x170]
  401edf:	00 
  401ee0:	e8 6b 78 00 00       	call   409750 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)>
  401ee5:	4c 8d 84 24 90 01 00 	lea    r8,[rsp+0x190]
  401eec:	00 
  401eed:	48 8d 8c 24 50 01 00 	lea    rcx,[rsp+0x150]
  401ef4:	00 
  401ef5:	48 8d 94 24 70 01 00 	lea    rdx,[rsp+0x170]
  401efc:	00 
  401efd:	48 8d 74 24 20       	lea    rsi,[rsp+0x20]
  401f02:	48 8d bc 24 b0 01 00 	lea    rdi,[rsp+0x1b0]
  401f09:	00 
  401f0a:	e8 61 61 00 00       	call   408070 <AES::DecryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>
  401f0f:	48 8b 84 24 b0 01 00 	mov    rax,QWORD PTR [rsp+0x1b0]
  401f16:	00 
  401f17:	48 8b bc 24 b0 00 00 	mov    rdi,QWORD PTR [rsp+0xb0]
  401f1e:	00 
  401f1f:	48 c7 84 24 b0 01 00 	mov    QWORD PTR [rsp+0x1b0],0x0
  401f26:	00 00 00 00 00 
  401f2b:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
  401f32:	00 
  401f33:	48 8b 84 24 b8 01 00 	mov    rax,QWORD PTR [rsp+0x1b8]
  401f3a:	00 
  401f3b:	48 85 ff             	test   rdi,rdi
  401f3e:	48 c7 84 24 b8 01 00 	mov    QWORD PTR [rsp+0x1b8],0x0
  401f45:	00 00 00 00 00 
  401f4a:	48 89 84 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rax
  401f51:	00 
  401f52:	48 8b 84 24 c0 01 00 	mov    rax,QWORD PTR [rsp+0x1c0]
  401f59:	00 
  401f5a:	48 c7 84 24 c0 01 00 	mov    QWORD PTR [rsp+0x1c0],0x0
  401f61:	00 00 00 00 00 
  401f66:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
  401f6d:	00 
  401f6e:	74 05                	je     401f75 <main+0x455>
  401f70:	e8 0b f9 ff ff       	call   401880 <operator delete(void*)@plt>
  401f75:	48 8b bc 24 b0 01 00 	mov    rdi,QWORD PTR [rsp+0x1b0]
  401f7c:	00 
  401f7d:	48 85 ff             	test   rdi,rdi
  401f80:	74 05                	je     401f87 <main+0x467>
  401f82:	e8 f9 f8 ff ff       	call   401880 <operator delete(void*)@plt>
  401f87:	48 8b bc 24 70 01 00 	mov    rdi,QWORD PTR [rsp+0x170]
  401f8e:	00 
  401f8f:	48 85 ff             	test   rdi,rdi
  401f92:	74 05                	je     401f99 <main+0x479>
  401f94:	e8 e7 f8 ff ff       	call   401880 <operator delete(void*)@plt>
  401f99:	48 8b bc 24 50 01 00 	mov    rdi,QWORD PTR [rsp+0x150]
  401fa0:	00 
  401fa1:	48 85 ff             	test   rdi,rdi
  401fa4:	74 05                	je     401fab <main+0x48b>
  401fa6:	e8 d5 f8 ff ff       	call   401880 <operator delete(void*)@plt>
  401fab:	48 8b bc 24 30 02 00 	mov    rdi,QWORD PTR [rsp+0x230]
  401fb2:	00 
  401fb3:	48 83 c5 10          	add    rbp,0x10
  401fb7:	48 39 ef             	cmp    rdi,rbp
  401fba:	74 05                	je     401fc1 <main+0x4a1>
  401fbc:	e8 bf f8 ff ff       	call   401880 <operator delete(void*)@plt>
  401fc1:	48 8b bc 24 90 01 00 	mov    rdi,QWORD PTR [rsp+0x190]
  401fc8:	00 
  401fc9:	48 85 ff             	test   rdi,rdi
  401fcc:	74 05                	je     401fd3 <main+0x4b3>
  401fce:	e8 ad f8 ff ff       	call   401880 <operator delete(void*)@plt>
  401fd3:	48 8b bc 24 10 02 00 	mov    rdi,QWORD PTR [rsp+0x210]
  401fda:	00 
  401fdb:	48 8d 43 10          	lea    rax,[rbx+0x10]
  401fdf:	48 39 c7             	cmp    rdi,rax
  401fe2:	0f 84 e7 fc ff ff    	je     401ccf <main+0x1af>
  401fe8:	e8 93 f8 ff ff       	call   401880 <operator delete(void*)@plt>
  401fed:	e9 dd fc ff ff       	jmp    401ccf <main+0x1af>
  401ff2:	48 8d b4 24 90 00 00 	lea    rsi,[rsp+0x90]
  401ff9:	00 
  401ffa:	48 8d bc 24 10 01 00 	lea    rdi,[rsp+0x110]
  402001:	00 
  402002:	e8 49 77 00 00       	call   409750 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)>
  402007:	48 8b b4 24 d0 01 00 	mov    rsi,QWORD PTR [rsp+0x1d0]
  40200e:	00 
  40200f:	48 8d 84 24 00 02 00 	lea    rax,[rsp+0x200]
  402016:	00 
  402017:	48 8d bc 24 f0 01 00 	lea    rdi,[rsp+0x1f0]
  40201e:	00 
  40201f:	48 89 84 24 f0 01 00 	mov    QWORD PTR [rsp+0x1f0],rax
  402026:	00 
  402027:	48 89 f2             	mov    rdx,rsi
  40202a:	48 03 94 24 d8 01 00 	add    rdx,QWORD PTR [rsp+0x1d8]
  402031:	00 
  402032:	e8 f9 0c 00 00       	call   402d30 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]>
  402037:	48 8d b4 24 f0 01 00 	lea    rsi,[rsp+0x1f0]
  40203e:	00 
  40203f:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
  402046:	00 
  402047:	e8 44 55 00 00       	call   407590 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
  40204c:	48 8d 74 24 30       	lea    rsi,[rsp+0x30]
  402051:	48 8d bc 24 f0 00 00 	lea    rdi,[rsp+0xf0]
  402058:	00 
  402059:	e8 f2 76 00 00       	call   409750 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)>
  40205e:	4c 8d 84 24 10 01 00 	lea    r8,[rsp+0x110]
  402065:	00 
  402066:	48 8d 8c 24 d0 00 00 	lea    rcx,[rsp+0xd0]
  40206d:	00 
  40206e:	48 8d 94 24 f0 00 00 	lea    rdx,[rsp+0xf0]
  402075:	00 
  402076:	48 8d 74 24 20       	lea    rsi,[rsp+0x20]
  40207b:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  402082:	00 
  402083:	e8 e8 5f 00 00       	call   408070 <AES::DecryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>
  402088:	48 8b 84 24 30 01 00 	mov    rax,QWORD PTR [rsp+0x130]
  40208f:	00 
  402090:	48 8b bc 24 b0 00 00 	mov    rdi,QWORD PTR [rsp+0xb0]
  402097:	00 
  402098:	48 c7 84 24 30 01 00 	mov    QWORD PTR [rsp+0x130],0x0
  40209f:	00 00 00 00 00 
  4020a4:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
  4020ab:	00 
  4020ac:	48 8b 84 24 38 01 00 	mov    rax,QWORD PTR [rsp+0x138]
  4020b3:	00 
  4020b4:	48 85 ff             	test   rdi,rdi
  4020b7:	48 c7 84 24 38 01 00 	mov    QWORD PTR [rsp+0x138],0x0
  4020be:	00 00 00 00 00 
  4020c3:	48 89 84 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rax
  4020ca:	00 
  4020cb:	48 8b 84 24 40 01 00 	mov    rax,QWORD PTR [rsp+0x140]
  4020d2:	00 
  4020d3:	48 c7 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],0x0
  4020da:	00 00 00 00 00 
  4020df:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
  4020e6:	00 
  4020e7:	74 05                	je     4020ee <main+0x5ce>
  4020e9:	e8 92 f7 ff ff       	call   401880 <operator delete(void*)@plt>
  4020ee:	48 8b bc 24 30 01 00 	mov    rdi,QWORD PTR [rsp+0x130]
  4020f5:	00 
  4020f6:	48 85 ff             	test   rdi,rdi
  4020f9:	74 05                	je     402100 <main+0x5e0>
  4020fb:	e8 80 f7 ff ff       	call   401880 <operator delete(void*)@plt>
  402100:	48 8b bc 24 f0 00 00 	mov    rdi,QWORD PTR [rsp+0xf0]
  402107:	00 
  402108:	48 85 ff             	test   rdi,rdi
  40210b:	74 05                	je     402112 <main+0x5f2>
  40210d:	e8 6e f7 ff ff       	call   401880 <operator delete(void*)@plt>
  402112:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
  402119:	00 
  40211a:	48 85 ff             	test   rdi,rdi
  40211d:	74 05                	je     402124 <main+0x604>
  40211f:	e8 5c f7 ff ff       	call   401880 <operator delete(void*)@plt>
  402124:	48 8b bc 24 f0 01 00 	mov    rdi,QWORD PTR [rsp+0x1f0]
  40212b:	00 
  40212c:	48 8d 84 24 00 02 00 	lea    rax,[rsp+0x200]
  402133:	00 
  402134:	48 39 c7             	cmp    rdi,rax
  402137:	74 05                	je     40213e <main+0x61e>
  402139:	e8 42 f7 ff ff       	call   401880 <operator delete(void*)@plt>
  40213e:	48 8b bc 24 10 01 00 	mov    rdi,QWORD PTR [rsp+0x110]
  402145:	00 
  402146:	48 85 ff             	test   rdi,rdi
  402149:	0f 84 78 fb ff ff    	je     401cc7 <main+0x1a7>
  40214f:	e8 2c f7 ff ff       	call   401880 <operator delete(void*)@plt>
  402154:	48 8d 9c 24 10 02 00 	lea    rbx,[rsp+0x210]
  40215b:	00 
  40215c:	e9 6e fb ff ff       	jmp    401ccf <main+0x1af>
  402161:	e8 5a f8 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  402166:	e8 45 f8 ff ff       	call   4019b0 <std::__throw_bad_function_call()@plt>
  40216b:	49 89 c4             	mov    r12,rax
  40216e:	48 8b 84 24 40 02 00 	mov    rax,QWORD PTR [rsp+0x240]
  402175:	00 
  402176:	48 85 c0             	test   rax,rax
  402179:	74 0d                	je     402188 <main+0x668>
  40217b:	ba 03 00 00 00       	mov    edx,0x3
  402180:	48 89 ee             	mov    rsi,rbp
  402183:	48 89 ef             	mov    rdi,rbp
  402186:	ff d0                	call   rax
  402188:	4c 89 e5             	mov    rbp,r12
  40218b:	48 8b bc 24 10 02 00 	mov    rdi,QWORD PTR [rsp+0x210]
  402192:	00 
  402193:	48 83 c3 10          	add    rbx,0x10
  402197:	48 39 df             	cmp    rdi,rbx
  40219a:	74 05                	je     4021a1 <main+0x681>
  40219c:	e8 df f6 ff ff       	call   401880 <operator delete(void*)@plt>
  4021a1:	48 89 eb             	mov    rbx,rbp
  4021a4:	48 8b bc 24 b0 00 00 	mov    rdi,QWORD PTR [rsp+0xb0]
  4021ab:	00 
  4021ac:	48 85 ff             	test   rdi,rdi
  4021af:	74 05                	je     4021b6 <main+0x696>
  4021b1:	e8 ca f6 ff ff       	call   401880 <operator delete(void*)@plt>
  4021b6:	48 8b bc 24 d0 01 00 	mov    rdi,QWORD PTR [rsp+0x1d0]
  4021bd:	00 
  4021be:	48 8d 94 24 e0 01 00 	lea    rdx,[rsp+0x1e0]
  4021c5:	00 
  4021c6:	48 39 d7             	cmp    rdi,rdx
  4021c9:	74 05                	je     4021d0 <main+0x6b0>
  4021cb:	e8 b0 f6 ff ff       	call   401880 <operator delete(void*)@plt>
  4021d0:	48 8b bc 24 90 00 00 	mov    rdi,QWORD PTR [rsp+0x90]
  4021d7:	00 
  4021d8:	48 85 ff             	test   rdi,rdi
  4021db:	74 05                	je     4021e2 <main+0x6c2>
  4021dd:	e8 9e f6 ff ff       	call   401880 <operator delete(void*)@plt>
  4021e2:	48 8b 7c 24 70       	mov    rdi,QWORD PTR [rsp+0x70]
  4021e7:	48 85 ff             	test   rdi,rdi
  4021ea:	74 05                	je     4021f1 <main+0x6d1>
  4021ec:	e8 8f f6 ff ff       	call   401880 <operator delete(void*)@plt>
  4021f1:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
  4021f6:	48 85 ff             	test   rdi,rdi
  4021f9:	74 05                	je     402200 <main+0x6e0>
  4021fb:	e8 80 f6 ff ff       	call   401880 <operator delete(void*)@plt>
  402200:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
  402205:	48 85 ff             	test   rdi,rdi
  402208:	74 05                	je     40220f <main+0x6ef>
  40220a:	e8 71 f6 ff ff       	call   401880 <operator delete(void*)@plt>
  40220f:	48 89 df             	mov    rdi,rbx
  402212:	e8 99 f8 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  402217:	48 89 c3             	mov    rbx,rax
  40221a:	eb b4                	jmp    4021d0 <main+0x6b0>
  40221c:	48 89 c5             	mov    rbp,rax
  40221f:	e9 67 ff ff ff       	jmp    40218b <main+0x66b>
  402224:	48 8b bc 24 f0 00 00 	mov    rdi,QWORD PTR [rsp+0xf0]
  40222b:	00 
  40222c:	48 89 c3             	mov    rbx,rax
  40222f:	48 85 ff             	test   rdi,rdi
  402232:	74 05                	je     402239 <main+0x719>
  402234:	e8 47 f6 ff ff       	call   401880 <operator delete(void*)@plt>
  402239:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
  402240:	00 
  402241:	48 85 ff             	test   rdi,rdi
  402244:	74 05                	je     40224b <main+0x72b>
  402246:	e8 35 f6 ff ff       	call   401880 <operator delete(void*)@plt>
  40224b:	48 8b bc 24 f0 01 00 	mov    rdi,QWORD PTR [rsp+0x1f0]
  402252:	00 
  402253:	48 8d 94 24 00 02 00 	lea    rdx,[rsp+0x200]
  40225a:	00 
  40225b:	48 39 d7             	cmp    rdi,rdx
  40225e:	74 05                	je     402265 <main+0x745>
  402260:	e8 1b f6 ff ff       	call   401880 <operator delete(void*)@plt>
  402265:	48 8b bc 24 10 01 00 	mov    rdi,QWORD PTR [rsp+0x110]
  40226c:	00 
  40226d:	48 85 ff             	test   rdi,rdi
  402270:	0f 84 2e ff ff ff    	je     4021a4 <main+0x684>
  402276:	e8 05 f6 ff ff       	call   401880 <operator delete(void*)@plt>
  40227b:	e9 24 ff ff ff       	jmp    4021a4 <main+0x684>
  402280:	48 89 c3             	mov    rbx,rax
  402283:	eb b4                	jmp    402239 <main+0x719>
  402285:	49 89 c4             	mov    r12,rax
  402288:	48 8b bc 24 50 01 00 	mov    rdi,QWORD PTR [rsp+0x150]
  40228f:	00 
  402290:	48 85 ff             	test   rdi,rdi
  402293:	74 05                	je     40229a <main+0x77a>
  402295:	e8 e6 f5 ff ff       	call   401880 <operator delete(void*)@plt>
  40229a:	48 8b bc 24 30 02 00 	mov    rdi,QWORD PTR [rsp+0x230]
  4022a1:	00 
  4022a2:	48 83 c5 10          	add    rbp,0x10
  4022a6:	48 39 ef             	cmp    rdi,rbp
  4022a9:	74 05                	je     4022b0 <main+0x790>
  4022ab:	e8 d0 f5 ff ff       	call   401880 <operator delete(void*)@plt>
  4022b0:	4c 89 e5             	mov    rbp,r12
  4022b3:	48 8b bc 24 90 01 00 	mov    rdi,QWORD PTR [rsp+0x190]
  4022ba:	00 
  4022bb:	48 85 ff             	test   rdi,rdi
  4022be:	0f 84 c7 fe ff ff    	je     40218b <main+0x66b>
  4022c4:	e8 b7 f5 ff ff       	call   401880 <operator delete(void*)@plt>
  4022c9:	e9 bd fe ff ff       	jmp    40218b <main+0x66b>
  4022ce:	48 8b bc 24 70 01 00 	mov    rdi,QWORD PTR [rsp+0x170]
  4022d5:	00 
  4022d6:	49 89 c4             	mov    r12,rax
  4022d9:	48 85 ff             	test   rdi,rdi
  4022dc:	74 aa                	je     402288 <main+0x768>
  4022de:	e8 9d f5 ff ff       	call   401880 <operator delete(void*)@plt>
  4022e3:	eb a3                	jmp    402288 <main+0x768>
  4022e5:	48 89 c5             	mov    rbp,rax
  4022e8:	eb c9                	jmp    4022b3 <main+0x793>
  4022ea:	49 89 c4             	mov    r12,rax
  4022ed:	eb ab                	jmp    40229a <main+0x77a>
  4022ef:	48 89 c3             	mov    rbx,rax
  4022f2:	e9 54 ff ff ff       	jmp    40224b <main+0x72b>
  4022f7:	48 89 c3             	mov    rbx,rax
  4022fa:	e9 66 ff ff ff       	jmp    402265 <main+0x745>
  4022ff:	48 89 c3             	mov    rbx,rax
  402302:	e9 f9 fe ff ff       	jmp    402200 <main+0x6e0>
  402307:	48 89 c3             	mov    rbx,rax
  40230a:	e9 d3 fe ff ff       	jmp    4021e2 <main+0x6c2>
  40230f:	48 89 c3             	mov    rbx,rax
  402312:	e9 da fe ff ff       	jmp    4021f1 <main+0x6d1>
  402317:	e9 00 ff ff ff       	jmp    40221c <main+0x6fc>
  40231c:	48 89 c3             	mov    rbx,rax
  40231f:	e9 80 fe ff ff       	jmp    4021a4 <main+0x684>
  402324:	48 89 c3             	mov    rbx,rax
  402327:	e9 8a fe ff ff       	jmp    4021b6 <main+0x696>
  40232c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000402330 <_GLOBAL__sub_I__ZN3AESC2E12AESKeyLength>:
  402330:	48 83 ec 08          	sub    rsp,0x8
  402334:	bf 99 d7 60 00       	mov    edi,0x60d799
  402339:	e8 82 f5 ff ff       	call   4018c0 <std::ios_base::Init::Init()@plt>
  40233e:	ba a8 d1 60 00       	mov    edx,0x60d1a8
  402343:	be 99 d7 60 00       	mov    esi,0x60d799
  402348:	bf 20 19 40 00       	mov    edi,0x401920
  40234d:	48 83 c4 08          	add    rsp,0x8
  402351:	e9 aa f5 ff ff       	jmp    401900 <__cxa_atexit@plt>
  402356:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40235d:	00 00 00 

0000000000402360 <_start>:
  402360:	31 ed                	xor    ebp,ebp
  402362:	49 89 d1             	mov    r9,rdx
  402365:	5e                   	pop    rsi
  402366:	48 89 e2             	mov    rdx,rsp
  402369:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
  40236d:	50                   	push   rax
  40236e:	54                   	push   rsp
  40236f:	49 c7 c0 40 98 40 00 	mov    r8,0x409840
  402376:	48 c7 c1 d0 97 40 00 	mov    rcx,0x4097d0
  40237d:	48 c7 c7 20 1b 40 00 	mov    rdi,0x401b20
  402384:	e8 57 f5 ff ff       	call   4018e0 <__libc_start_main@plt>
  402389:	f4                   	hlt    
  40238a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000402390 <deregister_tm_clones>:
  402390:	b8 c7 d2 60 00       	mov    eax,0x60d2c7
  402395:	55                   	push   rbp
  402396:	48 2d c0 d2 60 00    	sub    rax,0x60d2c0
  40239c:	48 83 f8 0e          	cmp    rax,0xe
  4023a0:	48 89 e5             	mov    rbp,rsp
  4023a3:	76 1b                	jbe    4023c0 <deregister_tm_clones+0x30>
  4023a5:	b8 00 00 00 00       	mov    eax,0x0
  4023aa:	48 85 c0             	test   rax,rax
  4023ad:	74 11                	je     4023c0 <deregister_tm_clones+0x30>
  4023af:	5d                   	pop    rbp
  4023b0:	bf c0 d2 60 00       	mov    edi,0x60d2c0
  4023b5:	ff e0                	jmp    rax
  4023b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  4023be:	00 00 
  4023c0:	5d                   	pop    rbp
  4023c1:	c3                   	ret    
  4023c2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4023c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4023cd:	00 00 00 

00000000004023d0 <register_tm_clones>:
  4023d0:	be c0 d2 60 00       	mov    esi,0x60d2c0
  4023d5:	55                   	push   rbp
  4023d6:	48 81 ee c0 d2 60 00 	sub    rsi,0x60d2c0
  4023dd:	48 c1 fe 03          	sar    rsi,0x3
  4023e1:	48 89 e5             	mov    rbp,rsp
  4023e4:	48 89 f0             	mov    rax,rsi
  4023e7:	48 c1 e8 3f          	shr    rax,0x3f
  4023eb:	48 01 c6             	add    rsi,rax
  4023ee:	48 d1 fe             	sar    rsi,1
  4023f1:	74 15                	je     402408 <register_tm_clones+0x38>
  4023f3:	b8 00 00 00 00       	mov    eax,0x0
  4023f8:	48 85 c0             	test   rax,rax
  4023fb:	74 0b                	je     402408 <register_tm_clones+0x38>
  4023fd:	5d                   	pop    rbp
  4023fe:	bf c0 d2 60 00       	mov    edi,0x60d2c0
  402403:	ff e0                	jmp    rax
  402405:	0f 1f 00             	nop    DWORD PTR [rax]
  402408:	5d                   	pop    rbp
  402409:	c3                   	ret    
  40240a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000402410 <__do_global_dtors_aux>:
  402410:	80 3d 81 b3 20 00 00 	cmp    BYTE PTR [rip+0x20b381],0x0        # 60d798 <completed.7594>
  402417:	75 11                	jne    40242a <__do_global_dtors_aux+0x1a>
  402419:	55                   	push   rbp
  40241a:	48 89 e5             	mov    rbp,rsp
  40241d:	e8 6e ff ff ff       	call   402390 <deregister_tm_clones>
  402422:	5d                   	pop    rbp
  402423:	c6 05 6e b3 20 00 01 	mov    BYTE PTR [rip+0x20b36e],0x1        # 60d798 <completed.7594>
  40242a:	f3 c3                	repz ret 
  40242c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000402430 <frame_dummy>:
  402430:	bf f0 cd 60 00       	mov    edi,0x60cdf0
  402435:	48 83 3f 00          	cmp    QWORD PTR [rdi],0x0
  402439:	75 05                	jne    402440 <frame_dummy+0x10>
  40243b:	eb 93                	jmp    4023d0 <register_tm_clones>
  40243d:	0f 1f 00             	nop    DWORD PTR [rax]
  402440:	b8 00 00 00 00       	mov    eax,0x0
  402445:	48 85 c0             	test   rax,rax
  402448:	74 f1                	je     40243b <frame_dummy+0xb>
  40244a:	55                   	push   rbp
  40244b:	48 89 e5             	mov    rbp,rsp
  40244e:	ff d0                	call   rax
  402450:	5d                   	pop    rbp
  402451:	e9 7a ff ff ff       	jmp    4023d0 <register_tm_clones>
  402456:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40245d:	00 00 00 

0000000000402460 <average(int, int)>:
  402460:	8d 44 37 01          	lea    eax,[rdi+rsi*1+0x1]
  402464:	d1 f8                	sar    eax,1
  402466:	c3                   	ret    
  402467:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40246e:	00 00 

0000000000402470 <sum(int, int)>:
  402470:	8d 04 37             	lea    eax,[rdi+rsi*1]
  402473:	c3                   	ret    
  402474:	66 90                	xchg   ax,ax
  402476:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40247d:	00 00 00 

0000000000402480 <subtraction(int, int)>:
  402480:	89 f8                	mov    eax,edi
  402482:	29 f0                	sub    eax,esi
  402484:	c3                   	ret    
  402485:	90                   	nop
  402486:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40248d:	00 00 00 

0000000000402490 <multiplication(int, int)>:
  402490:	89 f8                	mov    eax,edi
  402492:	0f af c6             	imul   eax,esi
  402495:	c3                   	ret    
  402496:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40249d:	00 00 00 

00000000004024a0 <division(int, int)>:
  4024a0:	89 f8                	mov    eax,edi
  4024a2:	99                   	cdq    
  4024a3:	f7 fe                	idiv   esi
  4024a5:	c3                   	ret    
  4024a6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4024ad:	00 00 00 

00000000004024b0 <modulus(int, int)>:
  4024b0:	89 f8                	mov    eax,edi
  4024b2:	99                   	cdq    
  4024b3:	f7 fe                	idiv   esi
  4024b5:	89 d0                	mov    eax,edx
  4024b7:	c3                   	ret    
  4024b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4024bf:	00 

00000000004024c0 <bitwisexor(int, int)>:
  4024c0:	89 f8                	mov    eax,edi
  4024c2:	31 f0                	xor    eax,esi
  4024c4:	c3                   	ret    
  4024c5:	90                   	nop
  4024c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4024cd:	00 00 00 

00000000004024d0 <bitwiseor(int, int)>:
  4024d0:	89 f8                	mov    eax,edi
  4024d2:	09 f0                	or     eax,esi
  4024d4:	c3                   	ret    
  4024d5:	90                   	nop
  4024d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4024dd:	00 00 00 

00000000004024e0 <bitwiseand(int, int)>:
  4024e0:	89 f8                	mov    eax,edi
  4024e2:	21 f0                	and    eax,esi
  4024e4:	c3                   	ret    
  4024e5:	90                   	nop
  4024e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4024ed:	00 00 00 

00000000004024f0 <gcd(int, int)>:
  4024f0:	85 f6                	test   esi,esi
  4024f2:	89 f8                	mov    eax,edi
  4024f4:	75 0c                	jne    402502 <gcd(int, int)+0x12>
  4024f6:	eb 15                	jmp    40250d <gcd(int, int)+0x1d>
  4024f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4024ff:	00 
  402500:	89 d6                	mov    esi,edx
  402502:	99                   	cdq    
  402503:	f7 fe                	idiv   esi
  402505:	89 f0                	mov    eax,esi
  402507:	85 d2                	test   edx,edx
  402509:	75 f5                	jne    402500 <gcd(int, int)+0x10>
  40250b:	f3 c3                	repz ret 
  40250d:	f3 c3                	repz ret 
  40250f:	90                   	nop

0000000000402510 <lcm(int, int)>:
  402510:	89 f9                	mov    ecx,edi
  402512:	89 f8                	mov    eax,edi
  402514:	0f af ce             	imul   ecx,esi
  402517:	85 f6                	test   esi,esi
  402519:	75 07                	jne    402522 <lcm(int, int)+0x12>
  40251b:	eb 14                	jmp    402531 <lcm(int, int)+0x21>
  40251d:	0f 1f 00             	nop    DWORD PTR [rax]
  402520:	89 d6                	mov    esi,edx
  402522:	99                   	cdq    
  402523:	f7 fe                	idiv   esi
  402525:	89 f0                	mov    eax,esi
  402527:	85 d2                	test   edx,edx
  402529:	75 f5                	jne    402520 <lcm(int, int)+0x10>
  40252b:	89 c8                	mov    eax,ecx
  40252d:	99                   	cdq    
  40252e:	f7 fe                	idiv   esi
  402530:	c3                   	ret    
  402531:	89 fe                	mov    esi,edi
  402533:	eb f6                	jmp    40252b <lcm(int, int)+0x1b>
  402535:	90                   	nop
  402536:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40253d:	00 00 00 

0000000000402540 <ncr(int, int)>:
  402540:	83 ff 01             	cmp    edi,0x1
  402543:	0f 8e c7 03 00 00    	jle    402910 <ncr(int, int)+0x3d0>
  402549:	8d 47 fb             	lea    eax,[rdi-0x5]
  40254c:	8d 57 fe             	lea    edx,[rdi-0x2]
  40254f:	44 8d 4f ff          	lea    r9d,[rdi-0x1]
  402553:	c1 e8 02             	shr    eax,0x2
  402556:	83 c0 01             	add    eax,0x1
  402559:	83 fa 08             	cmp    edx,0x8
  40255c:	44 8d 04 85 00 00 00 	lea    r8d,[rax*4+0x0]
  402563:	00 
  402564:	0f 86 96 03 00 00    	jbe    402900 <ncr(int, int)+0x3c0>
  40256a:	89 7c 24 f4          	mov    DWORD PTR [rsp-0xc],edi
  40256e:	31 d2                	xor    edx,edx
  402570:	66 0f 6e 6c 24 f4    	movd   xmm5,DWORD PTR [rsp-0xc]
  402576:	66 0f 6f 05 02 87 00 	movdqa xmm0,XMMWORD PTR [rip+0x8702]        # 40ac80 <typeinfo for int (*)(int, int)+0x20>
  40257d:	00 
  40257e:	66 0f 70 d5 00       	pshufd xmm2,xmm5,0x0
  402583:	66 0f 6f 1d 15 87 00 	movdqa xmm3,XMMWORD PTR [rip+0x8715]        # 40aca0 <typeinfo for int (*)(int, int)+0x40>
  40258a:	00 
  40258b:	66 0f fe 15 fd 86 00 	paddd  xmm2,XMMWORD PTR [rip+0x86fd]        # 40ac90 <typeinfo for int (*)(int, int)+0x30>
  402592:	00 
  402593:	66 0f 6f e2          	movdqa xmm4,xmm2
  402597:	83 c2 01             	add    edx,0x1
  40259a:	66 0f 6f ca          	movdqa xmm1,xmm2
  40259e:	39 c2                	cmp    edx,eax
  4025a0:	66 0f fe d3          	paddd  xmm2,xmm3
  4025a4:	66 0f f4 e0          	pmuludq xmm4,xmm0
  4025a8:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  4025ad:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  4025b2:	66 0f f4 c8          	pmuludq xmm1,xmm0
  4025b6:	66 0f 70 c4 08       	pshufd xmm0,xmm4,0x8
  4025bb:	66 0f 70 c9 08       	pshufd xmm1,xmm1,0x8
  4025c0:	66 0f 62 c1          	punpckldq xmm0,xmm1
  4025c4:	72 cd                	jb     402593 <ncr(int, int)+0x53>
  4025c6:	66 0f 6f c8          	movdqa xmm1,xmm0
  4025ca:	89 f9                	mov    ecx,edi
  4025cc:	66 0f 6f d0          	movdqa xmm2,xmm0
  4025d0:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  4025d5:	44 29 c1             	sub    ecx,r8d
  4025d8:	66 0f 73 d9 08       	psrldq xmm1,0x8
  4025dd:	45 39 c1             	cmp    r9d,r8d
  4025e0:	66 0f f4 d1          	pmuludq xmm2,xmm1
  4025e4:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  4025e9:	66 0f f4 c1          	pmuludq xmm0,xmm1
  4025ed:	66 0f 70 ca 08       	pshufd xmm1,xmm2,0x8
  4025f2:	66 0f 70 c0 08       	pshufd xmm0,xmm0,0x8
  4025f7:	66 0f 62 c8          	punpckldq xmm1,xmm0
  4025fb:	66 0f 6f c1          	movdqa xmm0,xmm1
  4025ff:	66 0f 73 d9 04       	psrldq xmm1,0x4
  402604:	66 0f f4 c1          	pmuludq xmm0,xmm1
  402608:	66 0f 7e c0          	movd   eax,xmm0
  40260c:	74 5f                	je     40266d <ncr(int, int)+0x12d>
  40260e:	8d 51 ff             	lea    edx,[rcx-0x1]
  402611:	0f af c1             	imul   eax,ecx
  402614:	83 fa 01             	cmp    edx,0x1
  402617:	74 54                	je     40266d <ncr(int, int)+0x12d>
  402619:	44 8d 41 fe          	lea    r8d,[rcx-0x2]
  40261d:	0f af c2             	imul   eax,edx
  402620:	41 83 f8 01          	cmp    r8d,0x1
  402624:	74 47                	je     40266d <ncr(int, int)+0x12d>
  402626:	8d 51 fd             	lea    edx,[rcx-0x3]
  402629:	41 0f af c0          	imul   eax,r8d
  40262d:	83 fa 01             	cmp    edx,0x1
  402630:	74 3b                	je     40266d <ncr(int, int)+0x12d>
  402632:	44 8d 41 fc          	lea    r8d,[rcx-0x4]
  402636:	0f af c2             	imul   eax,edx
  402639:	41 83 f8 01          	cmp    r8d,0x1
  40263d:	74 2e                	je     40266d <ncr(int, int)+0x12d>
  40263f:	8d 51 fb             	lea    edx,[rcx-0x5]
  402642:	41 0f af c0          	imul   eax,r8d
  402646:	83 fa 01             	cmp    edx,0x1
  402649:	74 22                	je     40266d <ncr(int, int)+0x12d>
  40264b:	44 8d 41 fa          	lea    r8d,[rcx-0x6]
  40264f:	0f af c2             	imul   eax,edx
  402652:	41 83 f8 01          	cmp    r8d,0x1
  402656:	74 15                	je     40266d <ncr(int, int)+0x12d>
  402658:	8d 51 f9             	lea    edx,[rcx-0x7]
  40265b:	41 0f af c0          	imul   eax,r8d
  40265f:	83 fa 01             	cmp    edx,0x1
  402662:	74 09                	je     40266d <ncr(int, int)+0x12d>
  402664:	0f af c2             	imul   eax,edx
  402667:	83 e9 08             	sub    ecx,0x8
  40266a:	0f af c1             	imul   eax,ecx
  40266d:	29 f7                	sub    edi,esi
  40266f:	83 ff 01             	cmp    edi,0x1
  402672:	0f 8e a8 02 00 00    	jle    402920 <ncr(int, int)+0x3e0>
  402678:	8d 57 fb             	lea    edx,[rdi-0x5]
  40267b:	8d 4f fe             	lea    ecx,[rdi-0x2]
  40267e:	44 8d 47 ff          	lea    r8d,[rdi-0x1]
  402682:	c1 ea 02             	shr    edx,0x2
  402685:	83 c2 01             	add    edx,0x1
  402688:	83 f9 08             	cmp    ecx,0x8
  40268b:	44 8d 0c 95 00 00 00 	lea    r9d,[rdx*4+0x0]
  402692:	00 
  402693:	0f 86 57 02 00 00    	jbe    4028f0 <ncr(int, int)+0x3b0>
  402699:	89 7c 24 f4          	mov    DWORD PTR [rsp-0xc],edi
  40269d:	31 c9                	xor    ecx,ecx
  40269f:	66 0f 6e 74 24 f4    	movd   xmm6,DWORD PTR [rsp-0xc]
  4026a5:	66 0f 6f 05 d3 85 00 	movdqa xmm0,XMMWORD PTR [rip+0x85d3]        # 40ac80 <typeinfo for int (*)(int, int)+0x20>
  4026ac:	00 
  4026ad:	66 0f 70 d6 00       	pshufd xmm2,xmm6,0x0
  4026b2:	66 0f 6f 1d e6 85 00 	movdqa xmm3,XMMWORD PTR [rip+0x85e6]        # 40aca0 <typeinfo for int (*)(int, int)+0x40>
  4026b9:	00 
  4026ba:	66 0f fe 15 ce 85 00 	paddd  xmm2,XMMWORD PTR [rip+0x85ce]        # 40ac90 <typeinfo for int (*)(int, int)+0x30>
  4026c1:	00 
  4026c2:	66 0f 6f e2          	movdqa xmm4,xmm2
  4026c6:	83 c1 01             	add    ecx,0x1
  4026c9:	66 0f 6f ca          	movdqa xmm1,xmm2
  4026cd:	39 d1                	cmp    ecx,edx
  4026cf:	66 0f fe d3          	paddd  xmm2,xmm3
  4026d3:	66 0f f4 e0          	pmuludq xmm4,xmm0
  4026d7:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  4026dc:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  4026e1:	66 0f f4 c8          	pmuludq xmm1,xmm0
  4026e5:	66 0f 70 c4 08       	pshufd xmm0,xmm4,0x8
  4026ea:	66 0f 70 c9 08       	pshufd xmm1,xmm1,0x8
  4026ef:	66 0f 62 c1          	punpckldq xmm0,xmm1
  4026f3:	72 cd                	jb     4026c2 <ncr(int, int)+0x182>
  4026f5:	66 0f 6f c8          	movdqa xmm1,xmm0
  4026f9:	44 29 cf             	sub    edi,r9d
  4026fc:	66 0f 6f d0          	movdqa xmm2,xmm0
  402700:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  402705:	45 39 c8             	cmp    r8d,r9d
  402708:	66 0f 73 d9 08       	psrldq xmm1,0x8
  40270d:	66 0f f4 d1          	pmuludq xmm2,xmm1
  402711:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  402716:	66 0f f4 c1          	pmuludq xmm0,xmm1
  40271a:	66 0f 70 ca 08       	pshufd xmm1,xmm2,0x8
  40271f:	66 0f 70 c0 08       	pshufd xmm0,xmm0,0x8
  402724:	66 0f 62 c8          	punpckldq xmm1,xmm0
  402728:	66 0f 6f c1          	movdqa xmm0,xmm1
  40272c:	66 0f 73 d9 04       	psrldq xmm1,0x4
  402731:	66 0f f4 c1          	pmuludq xmm0,xmm1
  402735:	66 0f 7e c2          	movd   edx,xmm0
  402739:	74 64                	je     40279f <ncr(int, int)+0x25f>
  40273b:	44 8d 47 ff          	lea    r8d,[rdi-0x1]
  40273f:	0f af d7             	imul   edx,edi
  402742:	41 83 f8 01          	cmp    r8d,0x1
  402746:	74 57                	je     40279f <ncr(int, int)+0x25f>
  402748:	44 8d 4f fe          	lea    r9d,[rdi-0x2]
  40274c:	41 0f af d0          	imul   edx,r8d
  402750:	41 83 f9 01          	cmp    r9d,0x1
  402754:	74 49                	je     40279f <ncr(int, int)+0x25f>
  402756:	8d 4f fd             	lea    ecx,[rdi-0x3]
  402759:	41 0f af d1          	imul   edx,r9d
  40275d:	83 f9 01             	cmp    ecx,0x1
  402760:	74 3d                	je     40279f <ncr(int, int)+0x25f>
  402762:	44 8d 47 fc          	lea    r8d,[rdi-0x4]
  402766:	0f af d1             	imul   edx,ecx
  402769:	41 83 f8 01          	cmp    r8d,0x1
  40276d:	74 30                	je     40279f <ncr(int, int)+0x25f>
  40276f:	8d 4f fb             	lea    ecx,[rdi-0x5]
  402772:	41 0f af d0          	imul   edx,r8d
  402776:	83 f9 01             	cmp    ecx,0x1
  402779:	74 24                	je     40279f <ncr(int, int)+0x25f>
  40277b:	44 8d 47 fa          	lea    r8d,[rdi-0x6]
  40277f:	0f af d1             	imul   edx,ecx
  402782:	41 83 f8 01          	cmp    r8d,0x1
  402786:	74 17                	je     40279f <ncr(int, int)+0x25f>
  402788:	8d 4f f9             	lea    ecx,[rdi-0x7]
  40278b:	41 0f af d0          	imul   edx,r8d
  40278f:	83 f9 01             	cmp    ecx,0x1
  402792:	74 0b                	je     40279f <ncr(int, int)+0x25f>
  402794:	0f af ca             	imul   ecx,edx
  402797:	83 ef 08             	sub    edi,0x8
  40279a:	89 fa                	mov    edx,edi
  40279c:	0f af d1             	imul   edx,ecx
  40279f:	83 fe 01             	cmp    esi,0x1
  4027a2:	0f 8e 88 01 00 00    	jle    402930 <ncr(int, int)+0x3f0>
  4027a8:	8d 4e fb             	lea    ecx,[rsi-0x5]
  4027ab:	8d 7e fe             	lea    edi,[rsi-0x2]
  4027ae:	44 8d 46 ff          	lea    r8d,[rsi-0x1]
  4027b2:	c1 e9 02             	shr    ecx,0x2
  4027b5:	83 c1 01             	add    ecx,0x1
  4027b8:	83 ff 08             	cmp    edi,0x8
  4027bb:	44 8d 0c 8d 00 00 00 	lea    r9d,[rcx*4+0x0]
  4027c2:	00 
  4027c3:	0f 86 17 01 00 00    	jbe    4028e0 <ncr(int, int)+0x3a0>
  4027c9:	89 74 24 f4          	mov    DWORD PTR [rsp-0xc],esi
  4027cd:	31 ff                	xor    edi,edi
  4027cf:	66 0f 6e 7c 24 f4    	movd   xmm7,DWORD PTR [rsp-0xc]
  4027d5:	66 0f 6f 05 a3 84 00 	movdqa xmm0,XMMWORD PTR [rip+0x84a3]        # 40ac80 <typeinfo for int (*)(int, int)+0x20>
  4027dc:	00 
  4027dd:	66 0f 70 d7 00       	pshufd xmm2,xmm7,0x0
  4027e2:	66 0f 6f 1d b6 84 00 	movdqa xmm3,XMMWORD PTR [rip+0x84b6]        # 40aca0 <typeinfo for int (*)(int, int)+0x40>
  4027e9:	00 
  4027ea:	66 0f fe 15 9e 84 00 	paddd  xmm2,XMMWORD PTR [rip+0x849e]        # 40ac90 <typeinfo for int (*)(int, int)+0x30>
  4027f1:	00 
  4027f2:	66 0f 6f e2          	movdqa xmm4,xmm2
  4027f6:	83 c7 01             	add    edi,0x1
  4027f9:	66 0f 6f ca          	movdqa xmm1,xmm2
  4027fd:	39 f9                	cmp    ecx,edi
  4027ff:	66 0f fe d3          	paddd  xmm2,xmm3
  402803:	66 0f f4 e0          	pmuludq xmm4,xmm0
  402807:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  40280c:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  402811:	66 0f f4 c8          	pmuludq xmm1,xmm0
  402815:	66 0f 70 c4 08       	pshufd xmm0,xmm4,0x8
  40281a:	66 0f 70 c9 08       	pshufd xmm1,xmm1,0x8
  40281f:	66 0f 62 c1          	punpckldq xmm0,xmm1
  402823:	77 cd                	ja     4027f2 <ncr(int, int)+0x2b2>
  402825:	66 0f 6f c8          	movdqa xmm1,xmm0
  402829:	44 29 ce             	sub    esi,r9d
  40282c:	66 0f 6f d0          	movdqa xmm2,xmm0
  402830:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  402835:	45 39 c1             	cmp    r9d,r8d
  402838:	66 0f 73 d9 08       	psrldq xmm1,0x8
  40283d:	66 0f f4 d1          	pmuludq xmm2,xmm1
  402841:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  402846:	66 0f 70 d2 08       	pshufd xmm2,xmm2,0x8
  40284b:	66 0f f4 c1          	pmuludq xmm0,xmm1
  40284f:	66 0f 70 c8 08       	pshufd xmm1,xmm0,0x8
  402854:	66 0f 62 d1          	punpckldq xmm2,xmm1
  402858:	66 0f 6f c2          	movdqa xmm0,xmm2
  40285c:	66 0f 6f ca          	movdqa xmm1,xmm2
  402860:	66 0f 73 d9 04       	psrldq xmm1,0x4
  402865:	66 0f f4 c1          	pmuludq xmm0,xmm1
  402869:	66 0f 7e c1          	movd   ecx,xmm0
  40286d:	74 62                	je     4028d1 <ncr(int, int)+0x391>
  40286f:	44 8d 46 ff          	lea    r8d,[rsi-0x1]
  402873:	0f af ce             	imul   ecx,esi
  402876:	41 83 f8 01          	cmp    r8d,0x1
  40287a:	74 55                	je     4028d1 <ncr(int, int)+0x391>
  40287c:	44 8d 4e fe          	lea    r9d,[rsi-0x2]
  402880:	41 0f af c8          	imul   ecx,r8d
  402884:	41 83 f9 01          	cmp    r9d,0x1
  402888:	74 47                	je     4028d1 <ncr(int, int)+0x391>
  40288a:	8d 7e fd             	lea    edi,[rsi-0x3]
  40288d:	41 0f af c9          	imul   ecx,r9d
  402891:	83 ff 01             	cmp    edi,0x1
  402894:	74 3b                	je     4028d1 <ncr(int, int)+0x391>
  402896:	44 8d 46 fc          	lea    r8d,[rsi-0x4]
  40289a:	0f af cf             	imul   ecx,edi
  40289d:	41 83 f8 01          	cmp    r8d,0x1
  4028a1:	74 2e                	je     4028d1 <ncr(int, int)+0x391>
  4028a3:	8d 7e fb             	lea    edi,[rsi-0x5]
  4028a6:	41 0f af c8          	imul   ecx,r8d
  4028aa:	83 ff 01             	cmp    edi,0x1
  4028ad:	74 22                	je     4028d1 <ncr(int, int)+0x391>
  4028af:	44 8d 46 fa          	lea    r8d,[rsi-0x6]
  4028b3:	0f af cf             	imul   ecx,edi
  4028b6:	41 83 f8 01          	cmp    r8d,0x1
  4028ba:	74 15                	je     4028d1 <ncr(int, int)+0x391>
  4028bc:	8d 7e f9             	lea    edi,[rsi-0x7]
  4028bf:	41 0f af c8          	imul   ecx,r8d
  4028c3:	83 ff 01             	cmp    edi,0x1
  4028c6:	74 09                	je     4028d1 <ncr(int, int)+0x391>
  4028c8:	0f af cf             	imul   ecx,edi
  4028cb:	83 ee 08             	sub    esi,0x8
  4028ce:	0f af ce             	imul   ecx,esi
  4028d1:	0f af ca             	imul   ecx,edx
  4028d4:	99                   	cdq    
  4028d5:	f7 f9                	idiv   ecx
  4028d7:	c3                   	ret    
  4028d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4028df:	00 
  4028e0:	b9 01 00 00 00       	mov    ecx,0x1
  4028e5:	eb 8c                	jmp    402873 <ncr(int, int)+0x333>
  4028e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  4028ee:	00 00 
  4028f0:	ba 01 00 00 00       	mov    edx,0x1
  4028f5:	e9 45 fe ff ff       	jmp    40273f <ncr(int, int)+0x1ff>
  4028fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  402900:	89 f9                	mov    ecx,edi
  402902:	b8 01 00 00 00       	mov    eax,0x1
  402907:	e9 02 fd ff ff       	jmp    40260e <ncr(int, int)+0xce>
  40290c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  402910:	b8 01 00 00 00       	mov    eax,0x1
  402915:	e9 53 fd ff ff       	jmp    40266d <ncr(int, int)+0x12d>
  40291a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  402920:	ba 01 00 00 00       	mov    edx,0x1
  402925:	e9 75 fe ff ff       	jmp    40279f <ncr(int, int)+0x25f>
  40292a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  402930:	b9 01 00 00 00       	mov    ecx,0x1
  402935:	eb 9a                	jmp    4028d1 <ncr(int, int)+0x391>
  402937:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40293e:	00 00 

0000000000402940 <npr(int, int)>:
  402940:	83 ff 01             	cmp    edi,0x1
  402943:	0f 8e 87 02 00 00    	jle    402bd0 <npr(int, int)+0x290>
  402949:	8d 47 fb             	lea    eax,[rdi-0x5]
  40294c:	8d 57 fe             	lea    edx,[rdi-0x2]
  40294f:	44 8d 4f ff          	lea    r9d,[rdi-0x1]
  402953:	c1 e8 02             	shr    eax,0x2
  402956:	83 c0 01             	add    eax,0x1
  402959:	83 fa 08             	cmp    edx,0x8
  40295c:	44 8d 04 85 00 00 00 	lea    r8d,[rax*4+0x0]
  402963:	00 
  402964:	0f 86 46 02 00 00    	jbe    402bb0 <npr(int, int)+0x270>
  40296a:	89 7c 24 f4          	mov    DWORD PTR [rsp-0xc],edi
  40296e:	31 d2                	xor    edx,edx
  402970:	66 0f 6e 6c 24 f4    	movd   xmm5,DWORD PTR [rsp-0xc]
  402976:	66 0f 6f 05 02 83 00 	movdqa xmm0,XMMWORD PTR [rip+0x8302]        # 40ac80 <typeinfo for int (*)(int, int)+0x20>
  40297d:	00 
  40297e:	66 0f 70 d5 00       	pshufd xmm2,xmm5,0x0
  402983:	66 0f 6f 25 15 83 00 	movdqa xmm4,XMMWORD PTR [rip+0x8315]        # 40aca0 <typeinfo for int (*)(int, int)+0x40>
  40298a:	00 
  40298b:	66 0f fe 15 fd 82 00 	paddd  xmm2,XMMWORD PTR [rip+0x82fd]        # 40ac90 <typeinfo for int (*)(int, int)+0x30>
  402992:	00 
  402993:	66 0f 6f da          	movdqa xmm3,xmm2
  402997:	83 c2 01             	add    edx,0x1
  40299a:	66 0f 6f ca          	movdqa xmm1,xmm2
  40299e:	39 c2                	cmp    edx,eax
  4029a0:	66 0f fe d4          	paddd  xmm2,xmm4
  4029a4:	66 0f f4 d8          	pmuludq xmm3,xmm0
  4029a8:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  4029ad:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  4029b2:	66 0f f4 c8          	pmuludq xmm1,xmm0
  4029b6:	66 0f 70 c3 08       	pshufd xmm0,xmm3,0x8
  4029bb:	66 0f 70 c9 08       	pshufd xmm1,xmm1,0x8
  4029c0:	66 0f 62 c1          	punpckldq xmm0,xmm1
  4029c4:	72 cd                	jb     402993 <npr(int, int)+0x53>
  4029c6:	66 0f 6f c8          	movdqa xmm1,xmm0
  4029ca:	89 f9                	mov    ecx,edi
  4029cc:	66 0f 6f d0          	movdqa xmm2,xmm0
  4029d0:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  4029d5:	44 29 c1             	sub    ecx,r8d
  4029d8:	66 0f 73 d9 08       	psrldq xmm1,0x8
  4029dd:	45 39 c1             	cmp    r9d,r8d
  4029e0:	66 0f f4 d1          	pmuludq xmm2,xmm1
  4029e4:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  4029e9:	66 0f f4 c1          	pmuludq xmm0,xmm1
  4029ed:	66 0f 70 ca 08       	pshufd xmm1,xmm2,0x8
  4029f2:	66 0f 70 c0 08       	pshufd xmm0,xmm0,0x8
  4029f7:	66 0f 62 c8          	punpckldq xmm1,xmm0
  4029fb:	66 0f 6f c1          	movdqa xmm0,xmm1
  4029ff:	66 0f 73 d9 04       	psrldq xmm1,0x4
  402a04:	66 0f f4 c1          	pmuludq xmm0,xmm1
  402a08:	66 0f 7e c0          	movd   eax,xmm0
  402a0c:	74 5f                	je     402a6d <npr(int, int)+0x12d>
  402a0e:	8d 51 ff             	lea    edx,[rcx-0x1]
  402a11:	0f af c1             	imul   eax,ecx
  402a14:	83 fa 01             	cmp    edx,0x1
  402a17:	74 54                	je     402a6d <npr(int, int)+0x12d>
  402a19:	44 8d 41 fe          	lea    r8d,[rcx-0x2]
  402a1d:	0f af c2             	imul   eax,edx
  402a20:	41 83 f8 01          	cmp    r8d,0x1
  402a24:	74 47                	je     402a6d <npr(int, int)+0x12d>
  402a26:	8d 51 fd             	lea    edx,[rcx-0x3]
  402a29:	41 0f af c0          	imul   eax,r8d
  402a2d:	83 fa 01             	cmp    edx,0x1
  402a30:	74 3b                	je     402a6d <npr(int, int)+0x12d>
  402a32:	44 8d 41 fc          	lea    r8d,[rcx-0x4]
  402a36:	0f af c2             	imul   eax,edx
  402a39:	41 83 f8 01          	cmp    r8d,0x1
  402a3d:	74 2e                	je     402a6d <npr(int, int)+0x12d>
  402a3f:	8d 51 fb             	lea    edx,[rcx-0x5]
  402a42:	41 0f af c0          	imul   eax,r8d
  402a46:	83 fa 01             	cmp    edx,0x1
  402a49:	74 22                	je     402a6d <npr(int, int)+0x12d>
  402a4b:	44 8d 41 fa          	lea    r8d,[rcx-0x6]
  402a4f:	0f af c2             	imul   eax,edx
  402a52:	41 83 f8 01          	cmp    r8d,0x1
  402a56:	74 15                	je     402a6d <npr(int, int)+0x12d>
  402a58:	8d 51 f9             	lea    edx,[rcx-0x7]
  402a5b:	41 0f af c0          	imul   eax,r8d
  402a5f:	83 fa 01             	cmp    edx,0x1
  402a62:	74 09                	je     402a6d <npr(int, int)+0x12d>
  402a64:	0f af c2             	imul   eax,edx
  402a67:	83 e9 08             	sub    ecx,0x8
  402a6a:	0f af c1             	imul   eax,ecx
  402a6d:	29 f7                	sub    edi,esi
  402a6f:	83 ff 01             	cmp    edi,0x1
  402a72:	0f 8e 48 01 00 00    	jle    402bc0 <npr(int, int)+0x280>
  402a78:	8d 57 fb             	lea    edx,[rdi-0x5]
  402a7b:	8d 4f fe             	lea    ecx,[rdi-0x2]
  402a7e:	8d 77 ff             	lea    esi,[rdi-0x1]
  402a81:	c1 ea 02             	shr    edx,0x2
  402a84:	83 c2 01             	add    edx,0x1
  402a87:	83 f9 08             	cmp    ecx,0x8
  402a8a:	44 8d 04 95 00 00 00 	lea    r8d,[rdx*4+0x0]
  402a91:	00 
  402a92:	0f 86 08 01 00 00    	jbe    402ba0 <npr(int, int)+0x260>
  402a98:	89 7c 24 f4          	mov    DWORD PTR [rsp-0xc],edi
  402a9c:	31 c9                	xor    ecx,ecx
  402a9e:	66 0f 6e 74 24 f4    	movd   xmm6,DWORD PTR [rsp-0xc]
  402aa4:	66 0f 6f 05 d4 81 00 	movdqa xmm0,XMMWORD PTR [rip+0x81d4]        # 40ac80 <typeinfo for int (*)(int, int)+0x20>
  402aab:	00 
  402aac:	66 0f 70 d6 00       	pshufd xmm2,xmm6,0x0
  402ab1:	66 0f 6f 25 e7 81 00 	movdqa xmm4,XMMWORD PTR [rip+0x81e7]        # 40aca0 <typeinfo for int (*)(int, int)+0x40>
  402ab8:	00 
  402ab9:	66 0f fe 15 cf 81 00 	paddd  xmm2,XMMWORD PTR [rip+0x81cf]        # 40ac90 <typeinfo for int (*)(int, int)+0x30>
  402ac0:	00 
  402ac1:	66 0f 6f da          	movdqa xmm3,xmm2
  402ac5:	83 c1 01             	add    ecx,0x1
  402ac8:	66 0f 6f ca          	movdqa xmm1,xmm2
  402acc:	39 ca                	cmp    edx,ecx
  402ace:	66 0f fe d4          	paddd  xmm2,xmm4
  402ad2:	66 0f f4 d8          	pmuludq xmm3,xmm0
  402ad6:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  402adb:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  402ae0:	66 0f f4 c8          	pmuludq xmm1,xmm0
  402ae4:	66 0f 70 c3 08       	pshufd xmm0,xmm3,0x8
  402ae9:	66 0f 70 c9 08       	pshufd xmm1,xmm1,0x8
  402aee:	66 0f 62 c1          	punpckldq xmm0,xmm1
  402af2:	77 cd                	ja     402ac1 <npr(int, int)+0x181>
  402af4:	66 0f 6f c8          	movdqa xmm1,xmm0
  402af8:	44 29 c7             	sub    edi,r8d
  402afb:	66 0f 6f d0          	movdqa xmm2,xmm0
  402aff:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  402b04:	44 39 c6             	cmp    esi,r8d
  402b07:	66 0f 73 d9 08       	psrldq xmm1,0x8
  402b0c:	66 0f f4 d1          	pmuludq xmm2,xmm1
  402b10:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  402b15:	66 0f 70 d2 08       	pshufd xmm2,xmm2,0x8
  402b1a:	66 0f f4 c1          	pmuludq xmm0,xmm1
  402b1e:	66 0f 70 c8 08       	pshufd xmm1,xmm0,0x8
  402b23:	66 0f 62 d1          	punpckldq xmm2,xmm1
  402b27:	66 0f 6f c2          	movdqa xmm0,xmm2
  402b2b:	66 0f 6f ca          	movdqa xmm1,xmm2
  402b2f:	66 0f 73 d9 04       	psrldq xmm1,0x4
  402b34:	66 0f f4 c1          	pmuludq xmm0,xmm1
  402b38:	66 0f 7e c1          	movd   ecx,xmm0
  402b3c:	74 59                	je     402b97 <npr(int, int)+0x257>
  402b3e:	8d 77 ff             	lea    esi,[rdi-0x1]
  402b41:	0f af cf             	imul   ecx,edi
  402b44:	83 fe 01             	cmp    esi,0x1
  402b47:	74 4e                	je     402b97 <npr(int, int)+0x257>
  402b49:	44 8d 47 fe          	lea    r8d,[rdi-0x2]
  402b4d:	0f af ce             	imul   ecx,esi
  402b50:	41 83 f8 01          	cmp    r8d,0x1
  402b54:	74 41                	je     402b97 <npr(int, int)+0x257>
  402b56:	8d 57 fd             	lea    edx,[rdi-0x3]
  402b59:	41 0f af c8          	imul   ecx,r8d
  402b5d:	83 fa 01             	cmp    edx,0x1
  402b60:	74 35                	je     402b97 <npr(int, int)+0x257>
  402b62:	8d 77 fc             	lea    esi,[rdi-0x4]
  402b65:	0f af ca             	imul   ecx,edx
  402b68:	83 fe 01             	cmp    esi,0x1
  402b6b:	74 2a                	je     402b97 <npr(int, int)+0x257>
  402b6d:	8d 57 fb             	lea    edx,[rdi-0x5]
  402b70:	0f af ce             	imul   ecx,esi
  402b73:	83 fa 01             	cmp    edx,0x1
  402b76:	74 1f                	je     402b97 <npr(int, int)+0x257>
  402b78:	8d 77 fa             	lea    esi,[rdi-0x6]
  402b7b:	0f af ca             	imul   ecx,edx
  402b7e:	83 fe 01             	cmp    esi,0x1
  402b81:	74 14                	je     402b97 <npr(int, int)+0x257>
  402b83:	8d 57 f9             	lea    edx,[rdi-0x7]
  402b86:	0f af ce             	imul   ecx,esi
  402b89:	83 fa 01             	cmp    edx,0x1
  402b8c:	74 09                	je     402b97 <npr(int, int)+0x257>
  402b8e:	0f af ca             	imul   ecx,edx
  402b91:	83 ef 08             	sub    edi,0x8
  402b94:	0f af cf             	imul   ecx,edi
  402b97:	99                   	cdq    
  402b98:	f7 f9                	idiv   ecx
  402b9a:	c3                   	ret    
  402b9b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  402ba0:	b9 01 00 00 00       	mov    ecx,0x1
  402ba5:	eb 9a                	jmp    402b41 <npr(int, int)+0x201>
  402ba7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  402bae:	00 00 
  402bb0:	89 f9                	mov    ecx,edi
  402bb2:	b8 01 00 00 00       	mov    eax,0x1
  402bb7:	e9 52 fe ff ff       	jmp    402a0e <npr(int, int)+0xce>
  402bbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  402bc0:	b9 01 00 00 00       	mov    ecx,0x1
  402bc5:	eb d0                	jmp    402b97 <npr(int, int)+0x257>
  402bc7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  402bce:	00 00 
  402bd0:	b8 01 00 00 00       	mov    eax,0x1
  402bd5:	e9 93 fe ff ff       	jmp    402a6d <npr(int, int)+0x12d>
  402bda:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000402be0 <max(int, int)>:
  402be0:	39 f7                	cmp    edi,esi
  402be2:	89 f0                	mov    eax,esi
  402be4:	0f 4d c7             	cmovge eax,edi
  402be7:	c3                   	ret    
  402be8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  402bef:	00 

0000000000402bf0 <min(int, int)>:
  402bf0:	39 fe                	cmp    esi,edi
  402bf2:	89 f8                	mov    eax,edi
  402bf4:	0f 4e c6             	cmovle eax,esi
  402bf7:	c3                   	ret    
  402bf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  402bff:	00 

0000000000402c00 <fibsum(int, int)>:
  402c00:	31 c9                	xor    ecx,ecx
  402c02:	31 d2                	xor    edx,edx
  402c04:	85 ff                	test   edi,edi
  402c06:	b8 01 00 00 00       	mov    eax,0x1
  402c0b:	7f 06                	jg     402c13 <fibsum(int, int)+0x13>
  402c0d:	eb 34                	jmp    402c43 <fibsum(int, int)+0x43>
  402c0f:	90                   	nop
  402c10:	44 89 c0             	mov    eax,r8d
  402c13:	83 c2 01             	add    edx,0x1
  402c16:	44 8d 04 01          	lea    r8d,[rcx+rax*1]
  402c1a:	89 c1                	mov    ecx,eax
  402c1c:	39 d7                	cmp    edi,edx
  402c1e:	75 f0                	jne    402c10 <fibsum(int, int)+0x10>
  402c20:	85 f6                	test   esi,esi
  402c22:	7e 23                	jle    402c47 <fibsum(int, int)+0x47>
  402c24:	ba 01 00 00 00       	mov    edx,0x1
  402c29:	31 c9                	xor    ecx,ecx
  402c2b:	31 ff                	xor    edi,edi
  402c2d:	eb 04                	jmp    402c33 <fibsum(int, int)+0x33>
  402c2f:	90                   	nop
  402c30:	44 89 c2             	mov    edx,r8d
  402c33:	83 c1 01             	add    ecx,0x1
  402c36:	44 8d 04 17          	lea    r8d,[rdi+rdx*1]
  402c3a:	89 d7                	mov    edi,edx
  402c3c:	39 ce                	cmp    esi,ecx
  402c3e:	75 f0                	jne    402c30 <fibsum(int, int)+0x30>
  402c40:	01 d0                	add    eax,edx
  402c42:	c3                   	ret    
  402c43:	31 c0                	xor    eax,eax
  402c45:	eb d9                	jmp    402c20 <fibsum(int, int)+0x20>
  402c47:	31 d2                	xor    edx,edx
  402c49:	eb f5                	jmp    402c40 <fibsum(int, int)+0x40>
  402c4b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000402c50 <sumofsums(int, int)>:
  402c50:	8d 47 01             	lea    eax,[rdi+0x1]
  402c53:	0f af f8             	imul   edi,eax
  402c56:	89 f8                	mov    eax,edi
  402c58:	c1 e8 1f             	shr    eax,0x1f
  402c5b:	01 c7                	add    edi,eax
  402c5d:	8d 46 01             	lea    eax,[rsi+0x1]
  402c60:	d1 ff                	sar    edi,1
  402c62:	0f af f0             	imul   esi,eax
  402c65:	89 f0                	mov    eax,esi
  402c67:	c1 e8 1f             	shr    eax,0x1f
  402c6a:	01 c6                	add    esi,eax
  402c6c:	d1 fe                	sar    esi,1
  402c6e:	8d 04 37             	lea    eax,[rdi+rsi*1]
  402c71:	c3                   	ret    
  402c72:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  402c76:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c7d:	00 00 00 

0000000000402c80 <largestprime(int, int)>:
  402c80:	0f af fe             	imul   edi,esi
  402c83:	66 0f ef d2          	pxor   xmm2,xmm2
  402c87:	41 54                	push   r12
  402c89:	55                   	push   rbp
  402c8a:	31 ed                	xor    ebp,ebp
  402c8c:	53                   	push   rbx
  402c8d:	bb 02 00 00 00       	mov    ebx,0x2
  402c92:	f2 0f 2a d7          	cvtsi2sd xmm2,edi
  402c96:	41 89 fc             	mov    r12d,edi
  402c99:	48 83 ec 10          	sub    rsp,0x10
  402c9d:	f2 0f 51 c2          	sqrtsd xmm0,xmm2
  402ca1:	66 0f 2e c0          	ucomisd xmm0,xmm0
  402ca5:	7a 54                	jp     402cfb <largestprime(int, int)+0x7b>
  402ca7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  402cae:	00 00 
  402cb0:	66 0f ef c9          	pxor   xmm1,xmm1
  402cb4:	f2 0f 2a cb          	cvtsi2sd xmm1,ebx
  402cb8:	66 0f 2e c1          	ucomisd xmm0,xmm1
  402cbc:	72 60                	jb     402d1e <largestprime(int, int)+0x9e>
  402cbe:	44 89 e0             	mov    eax,r12d
  402cc1:	99                   	cdq    
  402cc2:	f7 fb                	idiv   ebx
  402cc4:	85 d2                	test   edx,edx
  402cc6:	75 26                	jne    402cee <largestprime(int, int)+0x6e>
  402cc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  402ccf:	00 
  402cd0:	44 89 e0             	mov    eax,r12d
  402cd3:	99                   	cdq    
  402cd4:	f7 fb                	idiv   ebx
  402cd6:	39 dd                	cmp    ebp,ebx
  402cd8:	0f 4c eb             	cmovl  ebp,ebx
  402cdb:	99                   	cdq    
  402cdc:	41 89 c4             	mov    r12d,eax
  402cdf:	f7 fb                	idiv   ebx
  402ce1:	85 d2                	test   edx,edx
  402ce3:	74 eb                	je     402cd0 <largestprime(int, int)+0x50>
  402ce5:	66 0f ef d2          	pxor   xmm2,xmm2
  402ce9:	f2 41 0f 2a d4       	cvtsi2sd xmm2,r12d
  402cee:	83 c3 01             	add    ebx,0x1
  402cf1:	f2 0f 51 c2          	sqrtsd xmm0,xmm2
  402cf5:	66 0f 2e c0          	ucomisd xmm0,xmm0
  402cf9:	7b b5                	jnp    402cb0 <largestprime(int, int)+0x30>
  402cfb:	66 0f 28 c2          	movapd xmm0,xmm2
  402cff:	f2 0f 11 54 24 08    	movsd  QWORD PTR [rsp+0x8],xmm2
  402d05:	e8 c6 ed ff ff       	call   401ad0 <sqrt@plt>
  402d0a:	66 0f ef c9          	pxor   xmm1,xmm1
  402d0e:	f2 0f 10 54 24 08    	movsd  xmm2,QWORD PTR [rsp+0x8]
  402d14:	f2 0f 2a cb          	cvtsi2sd xmm1,ebx
  402d18:	66 0f 2e c1          	ucomisd xmm0,xmm1
  402d1c:	73 a0                	jae    402cbe <largestprime(int, int)+0x3e>
  402d1e:	48 83 c4 10          	add    rsp,0x10
  402d22:	89 e8                	mov    eax,ebp
  402d24:	5b                   	pop    rbx
  402d25:	5d                   	pop    rbp
  402d26:	41 5c                	pop    r12
  402d28:	c3                   	ret    
  402d29:	90                   	nop
  402d2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000402d30 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]>:
  402d30:	41 54                	push   r12
  402d32:	55                   	push   rbp
  402d33:	49 89 f4             	mov    r12,rsi
  402d36:	53                   	push   rbx
  402d37:	48 89 fd             	mov    rbp,rdi
  402d3a:	48 83 ec 10          	sub    rsp,0x10
  402d3e:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  402d45:	00 00 
  402d47:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  402d4c:	31 c0                	xor    eax,eax
  402d4e:	48 85 f6             	test   rsi,rsi
  402d51:	75 15                	jne    402d68 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0x38>
  402d53:	48 85 d2             	test   rdx,rdx
  402d56:	74 10                	je     402d68 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0x38>
  402d58:	bf 68 98 40 00       	mov    edi,0x409868
  402d5d:	e8 ae ec ff ff       	call   401a10 <std::__throw_logic_error(char const*)@plt>
  402d62:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  402d68:	48 89 d3             	mov    rbx,rdx
  402d6b:	4c 29 e3             	sub    rbx,r12
  402d6e:	48 83 fb 0f          	cmp    rbx,0xf
  402d72:	48 89 1c 24          	mov    QWORD PTR [rsp],rbx
  402d76:	77 37                	ja     402daf <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0x7f>
  402d78:	48 8b 55 00          	mov    rdx,QWORD PTR [rbp+0x0]
  402d7c:	48 83 fb 01          	cmp    rbx,0x1
  402d80:	48 89 d7             	mov    rdi,rdx
  402d83:	74 57                	je     402ddc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0xac>
  402d85:	48 85 db             	test   rbx,rbx
  402d88:	75 41                	jne    402dcb <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0x9b>
  402d8a:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  402d8e:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
  402d92:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
  402d96:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  402d9b:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  402da2:	00 00 
  402da4:	75 43                	jne    402de9 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0xb9>
  402da6:	48 83 c4 10          	add    rsp,0x10
  402daa:	5b                   	pop    rbx
  402dab:	5d                   	pop    rbp
  402dac:	41 5c                	pop    r12
  402dae:	c3                   	ret    
  402daf:	48 89 ef             	mov    rdi,rbp
  402db2:	31 d2                	xor    edx,edx
  402db4:	48 89 e6             	mov    rsi,rsp
  402db7:	e8 f4 ea ff ff       	call   4018b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
  402dbc:	48 89 c7             	mov    rdi,rax
  402dbf:	48 89 45 00          	mov    QWORD PTR [rbp+0x0],rax
  402dc3:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  402dc7:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
  402dcb:	48 89 da             	mov    rdx,rbx
  402dce:	4c 89 e6             	mov    rsi,r12
  402dd1:	e8 1a ed ff ff       	call   401af0 <memcpy@plt>
  402dd6:	48 8b 55 00          	mov    rdx,QWORD PTR [rbp+0x0]
  402dda:	eb ae                	jmp    402d8a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0x5a>
  402ddc:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
  402de1:	88 02                	mov    BYTE PTR [rdx],al
  402de3:	48 8b 55 00          	mov    rdx,QWORD PTR [rbp+0x0]
  402de7:	eb a1                	jmp    402d8a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.55]+0x5a>
  402de9:	e8 d2 eb ff ff       	call   4019c0 <__stack_chk_fail@plt>
  402dee:	66 90                	xchg   ax,ax

0000000000402df0 <exponential(int, int)>:
  402df0:	85 f6                	test   esi,esi
  402df2:	b8 01 00 00 00       	mov    eax,0x1
  402df7:	75 07                	jne    402e00 <exponential(int, int)+0x10>
  402df9:	c3                   	ret    
  402dfa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  402e00:	89 f2                	mov    edx,esi
  402e02:	41 55                	push   r13
  402e04:	41 54                	push   r12
  402e06:	c1 ea 1f             	shr    edx,0x1f
  402e09:	55                   	push   rbp
  402e0a:	53                   	push   rbx
  402e0b:	01 f2                	add    edx,esi
  402e0d:	89 f3                	mov    ebx,esi
  402e0f:	89 fd                	mov    ebp,edi
  402e11:	48 83 ec 08          	sub    rsp,0x8
  402e15:	d1 fa                	sar    edx,1
  402e17:	41 89 d5             	mov    r13d,edx
  402e1a:	75 1c                	jne    402e38 <exponential(int, int)+0x48>
  402e1c:	89 ef                	mov    edi,ebp
  402e1e:	0f af f8             	imul   edi,eax
  402e21:	83 e3 01             	and    ebx,0x1
  402e24:	0f 45 c7             	cmovne eax,edi
  402e27:	48 83 c4 08          	add    rsp,0x8
  402e2b:	5b                   	pop    rbx
  402e2c:	5d                   	pop    rbp
  402e2d:	41 5c                	pop    r12
  402e2f:	41 5d                	pop    r13
  402e31:	c3                   	ret    
  402e32:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  402e38:	44 8d 66 03          	lea    r12d,[rsi+0x3]
  402e3c:	85 f6                	test   esi,esi
  402e3e:	44 0f 49 e6          	cmovns r12d,esi
  402e42:	41 c1 fc 02          	sar    r12d,0x2
  402e46:	45 85 e4             	test   r12d,r12d
  402e49:	75 25                	jne    402e70 <exponential(int, int)+0x80>
  402e4b:	41 83 e5 01          	and    r13d,0x1
  402e4f:	75 0f                	jne    402e60 <exponential(int, int)+0x70>
  402e51:	0f af c0             	imul   eax,eax
  402e54:	eb c6                	jmp    402e1c <exponential(int, int)+0x2c>
  402e56:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  402e5d:	00 00 00 
  402e60:	0f af c5             	imul   eax,ebp
  402e63:	0f af c0             	imul   eax,eax
  402e66:	eb b4                	jmp    402e1c <exponential(int, int)+0x2c>
  402e68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  402e6f:	00 
  402e70:	8d 76 07             	lea    esi,[rsi+0x7]
  402e73:	85 db                	test   ebx,ebx
  402e75:	0f 49 f3             	cmovns esi,ebx
  402e78:	c1 fe 03             	sar    esi,0x3
  402e7b:	e8 70 ff ff ff       	call   402df0 <exponential(int, int)>
  402e80:	0f af c0             	imul   eax,eax
  402e83:	41 83 e4 01          	and    r12d,0x1
  402e87:	75 07                	jne    402e90 <exponential(int, int)+0xa0>
  402e89:	0f af c0             	imul   eax,eax
  402e8c:	eb bd                	jmp    402e4b <exponential(int, int)+0x5b>
  402e8e:	66 90                	xchg   ax,ax
  402e90:	0f af c5             	imul   eax,ebp
  402e93:	0f af c0             	imul   eax,eax
  402e96:	eb b3                	jmp    402e4b <exponential(int, int)+0x5b>
  402e98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  402e9f:	00 

0000000000402ea0 <AES::AES(AESKeyLength)>:
  402ea0:	83 fe 01             	cmp    esi,0x1
  402ea3:	74 2b                	je     402ed0 <AES::AES(AESKeyLength)+0x30>
  402ea5:	83 fe 02             	cmp    esi,0x2
  402ea8:	74 16                	je     402ec0 <AES::AES(AESKeyLength)+0x20>
  402eaa:	85 f6                	test   esi,esi
  402eac:	74 02                	je     402eb0 <AES::AES(AESKeyLength)+0x10>
  402eae:	f3 c3                	repz ret 
  402eb0:	c7 07 04 00 00 00    	mov    DWORD PTR [rdi],0x4
  402eb6:	c7 47 04 0a 00 00 00 	mov    DWORD PTR [rdi+0x4],0xa
  402ebd:	c3                   	ret    
  402ebe:	66 90                	xchg   ax,ax
  402ec0:	c7 07 08 00 00 00    	mov    DWORD PTR [rdi],0x8
  402ec6:	c7 47 04 0e 00 00 00 	mov    DWORD PTR [rdi+0x4],0xe
  402ecd:	c3                   	ret    
  402ece:	66 90                	xchg   ax,ax
  402ed0:	c7 07 06 00 00 00    	mov    DWORD PTR [rdi],0x6
  402ed6:	c7 47 04 0c 00 00 00 	mov    DWORD PTR [rdi+0x4],0xc
  402edd:	c3                   	ret    
  402ede:	66 90                	xchg   ax,ax

0000000000402ee0 <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)>:
  402ee0:	41 57                	push   r15
  402ee2:	41 56                	push   r14
  402ee4:	41 55                	push   r13
  402ee6:	41 54                	push   r12
  402ee8:	55                   	push   rbp
  402ee9:	53                   	push   rbx
  402eea:	48 89 cd             	mov    rbp,rcx
  402eed:	48 81 ec e8 00 00 00 	sub    rsp,0xe8
  402ef4:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  402efb:	00 00 
  402efd:	48 89 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],rax
  402f04:	00 
  402f05:	31 c0                	xor    eax,eax
  402f07:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
  402f0a:	48 89 94 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],rdx
  402f11:	00 
  402f12:	88 84 24 b0 00 00 00 	mov    BYTE PTR [rsp+0xb0],al
  402f19:	0f b6 46 04          	movzx  eax,BYTE PTR [rsi+0x4]
  402f1d:	88 84 24 b1 00 00 00 	mov    BYTE PTR [rsp+0xb1],al
  402f24:	0f b6 46 08          	movzx  eax,BYTE PTR [rsi+0x8]
  402f28:	88 84 24 b2 00 00 00 	mov    BYTE PTR [rsp+0xb2],al
  402f2f:	0f b6 46 0c          	movzx  eax,BYTE PTR [rsi+0xc]
  402f33:	88 84 24 b3 00 00 00 	mov    BYTE PTR [rsp+0xb3],al
  402f3a:	0f b6 46 01          	movzx  eax,BYTE PTR [rsi+0x1]
  402f3e:	88 84 24 b4 00 00 00 	mov    BYTE PTR [rsp+0xb4],al
  402f45:	0f b6 46 05          	movzx  eax,BYTE PTR [rsi+0x5]
  402f49:	88 84 24 b5 00 00 00 	mov    BYTE PTR [rsp+0xb5],al
  402f50:	0f b6 46 09          	movzx  eax,BYTE PTR [rsi+0x9]
  402f54:	88 84 24 b6 00 00 00 	mov    BYTE PTR [rsp+0xb6],al
  402f5b:	0f b6 46 0d          	movzx  eax,BYTE PTR [rsi+0xd]
  402f5f:	88 84 24 b7 00 00 00 	mov    BYTE PTR [rsp+0xb7],al
  402f66:	0f b6 46 02          	movzx  eax,BYTE PTR [rsi+0x2]
  402f6a:	88 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],al
  402f71:	0f b6 46 06          	movzx  eax,BYTE PTR [rsi+0x6]
  402f75:	88 84 24 b9 00 00 00 	mov    BYTE PTR [rsp+0xb9],al
  402f7c:	0f b6 46 0a          	movzx  eax,BYTE PTR [rsi+0xa]
  402f80:	88 84 24 ba 00 00 00 	mov    BYTE PTR [rsp+0xba],al
  402f87:	0f b6 46 0e          	movzx  eax,BYTE PTR [rsi+0xe]
  402f8b:	88 84 24 bb 00 00 00 	mov    BYTE PTR [rsp+0xbb],al
  402f92:	0f b6 46 03          	movzx  eax,BYTE PTR [rsi+0x3]
  402f96:	8b 57 04             	mov    edx,DWORD PTR [rdi+0x4]
  402f99:	88 84 24 bc 00 00 00 	mov    BYTE PTR [rsp+0xbc],al
  402fa0:	0f b6 46 07          	movzx  eax,BYTE PTR [rsi+0x7]
  402fa4:	89 d1                	mov    ecx,edx
  402fa6:	c1 e1 04             	shl    ecx,0x4
  402fa9:	88 84 24 bd 00 00 00 	mov    BYTE PTR [rsp+0xbd],al
  402fb0:	0f b6 46 0b          	movzx  eax,BYTE PTR [rsi+0xb]
  402fb4:	88 84 24 be 00 00 00 	mov    BYTE PTR [rsp+0xbe],al
  402fbb:	0f b6 46 0f          	movzx  eax,BYTE PTR [rsi+0xf]
  402fbf:	88 84 24 bf 00 00 00 	mov    BYTE PTR [rsp+0xbf],al
  402fc6:	89 c8                	mov    eax,ecx
  402fc8:	0f b6 74 05 00       	movzx  esi,BYTE PTR [rbp+rax*1+0x0]
  402fcd:	40 30 b4 24 b0 00 00 	xor    BYTE PTR [rsp+0xb0],sil
  402fd4:	00 
  402fd5:	0f b6 74 05 04       	movzx  esi,BYTE PTR [rbp+rax*1+0x4]
  402fda:	40 30 b4 24 b1 00 00 	xor    BYTE PTR [rsp+0xb1],sil
  402fe1:	00 
  402fe2:	0f b6 74 05 08       	movzx  esi,BYTE PTR [rbp+rax*1+0x8]
  402fe7:	40 30 b4 24 b2 00 00 	xor    BYTE PTR [rsp+0xb2],sil
  402fee:	00 
  402fef:	0f b6 74 05 0c       	movzx  esi,BYTE PTR [rbp+rax*1+0xc]
  402ff4:	40 30 b4 24 b3 00 00 	xor    BYTE PTR [rsp+0xb3],sil
  402ffb:	00 
  402ffc:	0f b6 74 05 01       	movzx  esi,BYTE PTR [rbp+rax*1+0x1]
  403001:	40 30 b4 24 b4 00 00 	xor    BYTE PTR [rsp+0xb4],sil
  403008:	00 
  403009:	0f b6 74 05 05       	movzx  esi,BYTE PTR [rbp+rax*1+0x5]
  40300e:	40 30 b4 24 b5 00 00 	xor    BYTE PTR [rsp+0xb5],sil
  403015:	00 
  403016:	0f b6 74 05 09       	movzx  esi,BYTE PTR [rbp+rax*1+0x9]
  40301b:	40 30 b4 24 b6 00 00 	xor    BYTE PTR [rsp+0xb6],sil
  403022:	00 
  403023:	0f b6 74 05 0d       	movzx  esi,BYTE PTR [rbp+rax*1+0xd]
  403028:	40 30 b4 24 b7 00 00 	xor    BYTE PTR [rsp+0xb7],sil
  40302f:	00 
  403030:	0f b6 74 05 02       	movzx  esi,BYTE PTR [rbp+rax*1+0x2]
  403035:	40 30 b4 24 b8 00 00 	xor    BYTE PTR [rsp+0xb8],sil
  40303c:	00 
  40303d:	0f b6 74 05 06       	movzx  esi,BYTE PTR [rbp+rax*1+0x6]
  403042:	40 30 b4 24 b9 00 00 	xor    BYTE PTR [rsp+0xb9],sil
  403049:	00 
  40304a:	0f b6 74 05 0a       	movzx  esi,BYTE PTR [rbp+rax*1+0xa]
  40304f:	40 30 b4 24 ba 00 00 	xor    BYTE PTR [rsp+0xba],sil
  403056:	00 
  403057:	0f b6 74 05 0e       	movzx  esi,BYTE PTR [rbp+rax*1+0xe]
  40305c:	40 30 b4 24 bb 00 00 	xor    BYTE PTR [rsp+0xbb],sil
  403063:	00 
  403064:	0f b6 74 05 03       	movzx  esi,BYTE PTR [rbp+rax*1+0x3]
  403069:	40 30 b4 24 bc 00 00 	xor    BYTE PTR [rsp+0xbc],sil
  403070:	00 
  403071:	0f b6 74 05 07       	movzx  esi,BYTE PTR [rbp+rax*1+0x7]
  403076:	40 30 b4 24 bd 00 00 	xor    BYTE PTR [rsp+0xbd],sil
  40307d:	00 
  40307e:	0f b6 74 05 0b       	movzx  esi,BYTE PTR [rbp+rax*1+0xb]
  403083:	0f b6 44 05 0f       	movzx  eax,BYTE PTR [rbp+rax*1+0xf]
  403088:	40 30 b4 24 be 00 00 	xor    BYTE PTR [rsp+0xbe],sil
  40308f:	00 
  403090:	30 84 24 bf 00 00 00 	xor    BYTE PTR [rsp+0xbf],al
  403097:	8d 41 f0             	lea    eax,[rcx-0x10]
  40309a:	83 ea 01             	sub    edx,0x1
  40309d:	89 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],eax
  4030a4:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
  4030ab:	00 
  4030ac:	89 94 24 a4 00 00 00 	mov    DWORD PTR [rsp+0xa4],edx
  4030b3:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4030b8:	0f 84 ba 08 00 00    	je     403978 <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)+0xa98>
  4030be:	89 d8                	mov    eax,ebx
  4030c0:	44 89 34 24          	mov    DWORD PTR [rsp],r14d
  4030c4:	44 89 f9             	mov    ecx,r15d
  4030c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  4030ce:	00 00 
  4030d0:	0f b6 b4 24 b0 00 00 	movzx  esi,BYTE PTR [rsp+0xb0]
  4030d7:	00 
  4030d8:	44 0f b6 84 24 b8 00 	movzx  r8d,BYTE PTR [rsp+0xb8]
  4030df:	00 00 
  4030e1:	44 0f b6 bc 24 b5 00 	movzx  r15d,BYTE PTR [rsp+0xb5]
  4030e8:	00 00 
  4030ea:	48 89 f7             	mov    rdi,rsi
  4030ed:	40 c0 ee 04          	shr    sil,0x4
  4030f1:	4d 89 c1             	mov    r9,r8
  4030f4:	83 e6 0f             	and    esi,0xf
  4030f7:	83 e7 0f             	and    edi,0xf
  4030fa:	41 c0 e8 04          	shr    r8b,0x4
  4030fe:	48 c1 e6 04          	shl    rsi,0x4
  403102:	41 83 e0 0f          	and    r8d,0xf
  403106:	4d 89 fa             	mov    r10,r15
  403109:	44 0f b6 b4 37 40 aa 	movzx  r14d,BYTE PTR [rdi+rsi*1+0x40aa40]
  403110:	40 00 
  403112:	0f b6 b4 24 b1 00 00 	movzx  esi,BYTE PTR [rsp+0xb1]
  403119:	00 
  40311a:	49 c1 e0 04          	shl    r8,0x4
  40311e:	4c 89 44 24 60       	mov    QWORD PTR [rsp+0x60],r8
  403123:	44 0f b6 84 24 b9 00 	movzx  r8d,BYTE PTR [rsp+0xb9]
  40312a:	00 00 
  40312c:	41 c0 ef 04          	shr    r15b,0x4
  403130:	41 83 e7 0f          	and    r15d,0xf
  403134:	41 83 e2 0f          	and    r10d,0xf
  403138:	41 83 e1 0f          	and    r9d,0xf
  40313c:	49 c1 e7 04          	shl    r15,0x4
  403140:	4c 89 4c 24 58       	mov    QWORD PTR [rsp+0x58],r9
  403145:	48 89 f7             	mov    rdi,rsi
  403148:	40 c0 ee 04          	shr    sil,0x4
  40314c:	83 e6 0f             	and    esi,0xf
  40314f:	83 e7 0f             	and    edi,0xf
  403152:	4d 89 c3             	mov    r11,r8
  403155:	48 c1 e6 04          	shl    rsi,0x4
  403159:	0f b6 bc 37 40 aa 40 	movzx  edi,BYTE PTR [rdi+rsi*1+0x40aa40]
  403160:	00 
  403161:	0f b6 b4 24 b2 00 00 	movzx  esi,BYTE PTR [rsp+0xb2]
  403168:	00 
  403169:	40 88 7c 24 18       	mov    BYTE PTR [rsp+0x18],dil
  40316e:	48 89 f7             	mov    rdi,rsi
  403171:	40 c0 ee 04          	shr    sil,0x4
  403175:	83 e6 0f             	and    esi,0xf
  403178:	83 e7 0f             	and    edi,0xf
  40317b:	48 c1 e6 04          	shl    rsi,0x4
  40317f:	44 0f b6 ac 37 40 aa 	movzx  r13d,BYTE PTR [rdi+rsi*1+0x40aa40]
  403186:	40 00 
  403188:	0f b6 b4 24 b3 00 00 	movzx  esi,BYTE PTR [rsp+0xb3]
  40318f:	00 
  403190:	48 89 f7             	mov    rdi,rsi
  403193:	40 c0 ee 04          	shr    sil,0x4
  403197:	83 e6 0f             	and    esi,0xf
  40319a:	83 e7 0f             	and    edi,0xf
  40319d:	48 c1 e6 04          	shl    rsi,0x4
  4031a1:	0f b6 9c 37 40 aa 40 	movzx  ebx,BYTE PTR [rdi+rsi*1+0x40aa40]
  4031a8:	00 
  4031a9:	0f b6 b4 24 b4 00 00 	movzx  esi,BYTE PTR [rsp+0xb4]
  4031b0:	00 
  4031b1:	48 89 f7             	mov    rdi,rsi
  4031b4:	40 c0 ee 04          	shr    sil,0x4
  4031b8:	88 5c 24 20          	mov    BYTE PTR [rsp+0x20],bl
  4031bc:	83 e6 0f             	and    esi,0xf
  4031bf:	83 e7 0f             	and    edi,0xf
  4031c2:	48 c1 e6 04          	shl    rsi,0x4
  4031c6:	0f b6 94 37 40 aa 40 	movzx  edx,BYTE PTR [rdi+rsi*1+0x40aa40]
  4031cd:	00 
  4031ce:	0f b6 b4 24 b6 00 00 	movzx  esi,BYTE PTR [rsp+0xb6]
  4031d5:	00 
  4031d6:	88 54 24 30          	mov    BYTE PTR [rsp+0x30],dl
  4031da:	48 89 f2             	mov    rdx,rsi
  4031dd:	40 c0 ee 04          	shr    sil,0x4
  4031e1:	83 e6 0f             	and    esi,0xf
  4031e4:	83 e2 0f             	and    edx,0xf
  4031e7:	48 c1 e6 04          	shl    rsi,0x4
  4031eb:	41 83 e3 0f          	and    r11d,0xf
  4031ef:	41 c0 e8 04          	shr    r8b,0x4
  4031f3:	41 83 e0 0f          	and    r8d,0xf
  4031f7:	4c 89 5c 24 68       	mov    QWORD PTR [rsp+0x68],r11
  4031fc:	48 89 f7             	mov    rdi,rsi
  4031ff:	49 c1 e0 04          	shl    r8,0x4
  403203:	0f b6 b4 24 b7 00 00 	movzx  esi,BYTE PTR [rsp+0xb7]
  40320a:	00 
  40320b:	48 89 54 24 50       	mov    QWORD PTR [rsp+0x50],rdx
  403210:	4c 89 44 24 70       	mov    QWORD PTR [rsp+0x70],r8
  403215:	44 0f b6 84 24 ba 00 	movzx  r8d,BYTE PTR [rsp+0xba]
  40321c:	00 00 
  40321e:	4c 89 c3             	mov    rbx,r8
  403221:	41 c0 e8 04          	shr    r8b,0x4
  403225:	41 83 e0 0f          	and    r8d,0xf
  403229:	83 e3 0f             	and    ebx,0xf
  40322c:	49 c1 e0 04          	shl    r8,0x4
  403230:	48 89 5c 24 78       	mov    QWORD PTR [rsp+0x78],rbx
  403235:	4c 89 84 24 80 00 00 	mov    QWORD PTR [rsp+0x80],r8
  40323c:	00 
  40323d:	44 0f b6 84 24 bb 00 	movzx  r8d,BYTE PTR [rsp+0xbb]
  403244:	00 00 
  403246:	4d 89 c1             	mov    r9,r8
  403249:	41 c0 e8 04          	shr    r8b,0x4
  40324d:	41 83 e0 0f          	and    r8d,0xf
  403251:	41 83 e1 0f          	and    r9d,0xf
  403255:	49 c1 e0 04          	shl    r8,0x4
  403259:	43 0f b6 9c 01 40 aa 	movzx  ebx,BYTE PTR [r9+r8*1+0x40aa40]
  403260:	40 00 
  403262:	44 0f b6 84 24 bc 00 	movzx  r8d,BYTE PTR [rsp+0xbc]
  403269:	00 00 
  40326b:	4d 89 c1             	mov    r9,r8
  40326e:	41 c0 e8 04          	shr    r8b,0x4
  403272:	41 83 e0 0f          	and    r8d,0xf
  403276:	41 83 e1 0f          	and    r9d,0xf
  40327a:	4d 89 c3             	mov    r11,r8
  40327d:	4c 89 8c 24 88 00 00 	mov    QWORD PTR [rsp+0x88],r9
  403284:	00 
  403285:	49 c1 e3 04          	shl    r11,0x4
  403289:	4c 89 9c 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r11
  403290:	00 
  403291:	44 0f b6 9c 24 bd 00 	movzx  r11d,BYTE PTR [rsp+0xbd]
  403298:	00 00 
  40329a:	4d 89 dc             	mov    r12,r11
  40329d:	41 c0 eb 04          	shr    r11b,0x4
  4032a1:	41 83 e4 0f          	and    r12d,0xf
  4032a5:	41 83 e3 0f          	and    r11d,0xf
  4032a9:	4c 89 a4 24 98 00 00 	mov    QWORD PTR [rsp+0x98],r12
  4032b0:	00 
  4032b1:	44 0f b6 84 24 be 00 	movzx  r8d,BYTE PTR [rsp+0xbe]
  4032b8:	00 00 
  4032ba:	49 c1 e3 04          	shl    r11,0x4
  4032be:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
  4032c3:	4d 89 c1             	mov    r9,r8
  4032c6:	41 c0 e8 04          	shr    r8b,0x4
  4032ca:	41 83 e0 0f          	and    r8d,0xf
  4032ce:	41 83 e1 0f          	and    r9d,0xf
  4032d2:	49 c1 e0 04          	shl    r8,0x4
  4032d6:	47 0f b6 8c 01 40 aa 	movzx  r9d,BYTE PTR [r9+r8*1+0x40aa40]
  4032dd:	40 00 
  4032df:	49 89 f0             	mov    r8,rsi
  4032e2:	40 c0 ee 04          	shr    sil,0x4
  4032e6:	83 e6 0f             	and    esi,0xf
  4032e9:	41 83 e0 0f          	and    r8d,0xf
  4032ed:	48 c1 e6 04          	shl    rsi,0x4
  4032f1:	41 8a 84 30 40 aa 40 	mov    al,BYTE PTR [r8+rsi*1+0x40aa40]
  4032f8:	00 
  4032f9:	43 0f b6 b4 3a 40 aa 	movzx  esi,BYTE PTR [r10+r15*1+0x40aa40]
  403300:	40 00 
  403302:	44 88 4c 24 40       	mov    BYTE PTR [rsp+0x40],r9b
  403307:	44 0f b6 8c 24 bf 00 	movzx  r9d,BYTE PTR [rsp+0xbf]
  40330e:	00 00 
  403310:	44 8b 14 24          	mov    r10d,DWORD PTR [rsp]
  403314:	88 d4                	mov    ah,dl
  403316:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
  40331b:	44 0f b7 c0          	movzx  r8d,ax
  40331f:	4d 89 cc             	mov    r12,r9
  403322:	41 c0 e9 04          	shr    r9b,0x4
  403326:	0f b6 84 3a 40 aa 40 	movzx  eax,BYTE PTR [rdx+rdi*1+0x40aa40]
  40332d:	00 
  40332e:	41 83 e1 0f          	and    r9d,0xf
  403332:	41 83 e4 0f          	and    r12d,0xf
  403336:	49 c1 e1 04          	shl    r9,0x4
  40333a:	c1 e6 10             	shl    esi,0x10
  40333d:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
  403344:	00 
  403345:	47 0f b6 8c 0c 40 aa 	movzx  r9d,BYTE PTR [r12+r9*1+0x40aa40]
  40334c:	40 00 
  40334e:	c1 e0 18             	shl    eax,0x18
  403351:	89 c7                	mov    edi,eax
  403353:	44 89 c0             	mov    eax,r8d
  403356:	09 f0                	or     eax,esi
  403358:	41 c1 e1 10          	shl    r9d,0x10
  40335c:	09 f8                	or     eax,edi
  40335e:	48 8b 7c 24 78       	mov    rdi,QWORD PTR [rsp+0x78]
  403363:	89 c6                	mov    esi,eax
  403365:	41 89 c7             	mov    r15d,eax
  403368:	66 c1 ee 08          	shr    si,0x8
  40336c:	41 c1 ef 18          	shr    r15d,0x18
  403370:	44 8a 94 17 40 aa 40 	mov    r10b,BYTE PTR [rdi+rdx*1+0x40aa40]
  403377:	00 
  403378:	41 89 f0             	mov    r8d,esi
  40337b:	89 c6                	mov    esi,eax
  40337d:	c1 ee 10             	shr    esi,0x10
  403380:	4c 89 d2             	mov    rdx,r10
  403383:	4c 8b 54 24 60       	mov    r10,QWORD PTR [rsp+0x60]
  403388:	88 de                	mov    dh,bl
  40338a:	48 89 d3             	mov    rbx,rdx
  40338d:	48 8b 54 24 58       	mov    rdx,QWORD PTR [rsp+0x58]
  403392:	0f b7 db             	movzx  ebx,bx
  403395:	42 0f b6 bc 12 40 aa 	movzx  edi,BYTE PTR [rdx+r10*1+0x40aa40]
  40339c:	40 00 
  40339e:	4c 8b 54 24 70       	mov    r10,QWORD PTR [rsp+0x70]
  4033a3:	48 8b 54 24 68       	mov    rdx,QWORD PTR [rsp+0x68]
  4033a8:	42 0f b6 94 12 40 aa 	movzx  edx,BYTE PTR [rdx+r10*1+0x40aa40]
  4033af:	40 00 
  4033b1:	c1 e7 10             	shl    edi,0x10
  4033b4:	09 fb                	or     ebx,edi
  4033b6:	41 89 d2             	mov    r10d,edx
  4033b9:	89 da                	mov    edx,ebx
  4033bb:	41 c1 e2 18          	shl    r10d,0x18
  4033bf:	44 09 d2             	or     edx,r10d
  4033c2:	41 89 d2             	mov    r10d,edx
  4033c5:	89 14 24             	mov    DWORD PTR [rsp],edx
  4033c8:	89 d3                	mov    ebx,edx
  4033ca:	66 41 c1 ea 08       	shr    r10w,0x8
  4033cf:	c1 eb 18             	shr    ebx,0x18
  4033d2:	44 89 d7             	mov    edi,r10d
  4033d5:	41 89 d2             	mov    r10d,edx
  4033d8:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
  4033df:	00 
  4033e0:	41 c1 ea 10          	shr    r10d,0x10
  4033e4:	42 8a 8c 1a 40 aa 40 	mov    cl,BYTE PTR [rdx+r11*1+0x40aa40]
  4033eb:	00 
  4033ec:	48 8b 54 24 40       	mov    rdx,QWORD PTR [rsp+0x40]
  4033f1:	4c 8b 9c 24 90 00 00 	mov    r11,QWORD PTR [rsp+0x90]
  4033f8:	00 
  4033f9:	88 d5                	mov    ch,dl
  4033fb:	44 0f b7 e1          	movzx  r12d,cx
  4033ff:	48 8b 8c 24 88 00 00 	mov    rcx,QWORD PTR [rsp+0x88]
  403406:	00 
  403407:	42 0f b6 8c 19 40 aa 	movzx  ecx,BYTE PTR [rcx+r11*1+0x40aa40]
  40340e:	40 00 
  403410:	c1 e1 18             	shl    ecx,0x18
  403413:	41 89 cb             	mov    r11d,ecx
  403416:	44 89 e1             	mov    ecx,r12d
  403419:	44 09 c9             	or     ecx,r9d
  40341c:	44 09 d9             	or     ecx,r11d
  40341f:	44 8b 9c 24 a0 00 00 	mov    r11d,DWORD PTR [rsp+0xa0]
  403426:	00 
  403427:	41 89 c9             	mov    r9d,ecx
  40342a:	89 ca                	mov    edx,ecx
  40342c:	41 c1 e9 10          	shr    r9d,0x10
  403430:	66 c1 ea 08          	shr    dx,0x8
  403434:	44 89 4c 24 40       	mov    DWORD PTR [rsp+0x40],r9d
  403439:	41 89 c9             	mov    r9d,ecx
  40343c:	66 89 54 24 30       	mov    WORD PTR [rsp+0x30],dx
  403441:	41 c1 e9 18          	shr    r9d,0x18
  403445:	89 c2                	mov    edx,eax
  403447:	44 89 4c 24 50       	mov    DWORD PTR [rsp+0x50],r9d
  40344c:	45 89 f1             	mov    r9d,r14d
  40344f:	46 32 4c 1d 00       	xor    r9b,BYTE PTR [rbp+r11*1+0x0]
  403454:	44 88 8c 24 b0 00 00 	mov    BYTE PTR [rsp+0xb0],r9b
  40345b:	00 
  40345c:	42 32 54 1d 01       	xor    dl,BYTE PTR [rbp+r11*1+0x1]
  403461:	44 0f b6 74 24 18    	movzx  r14d,BYTE PTR [rsp+0x18]
  403467:	44 0f b6 64 24 20    	movzx  r12d,BYTE PTR [rsp+0x20]
  40346d:	46 32 74 1d 04       	xor    r14b,BYTE PTR [rbp+r11*1+0x4]
  403472:	46 32 6c 1d 08       	xor    r13b,BYTE PTR [rbp+r11*1+0x8]
  403477:	46 32 64 1d 0c       	xor    r12b,BYTE PTR [rbp+r11*1+0xc]
  40347c:	46 32 44 1d 05       	xor    r8b,BYTE PTR [rbp+r11*1+0x5]
  403481:	88 94 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],dl
  403488:	88 94 24 b4 00 00 00 	mov    BYTE PTR [rsp+0xb4],dl
  40348f:	0f b6 14 24          	movzx  edx,BYTE PTR [rsp]
  403493:	42 32 74 1d 09       	xor    sil,BYTE PTR [rbp+r11*1+0x9]
  403498:	42 32 54 1d 02       	xor    dl,BYTE PTR [rbp+r11*1+0x2]
  40349d:	46 32 7c 1d 0d       	xor    r15b,BYTE PTR [rbp+r11*1+0xd]
  4034a2:	42 32 7c 1d 06       	xor    dil,BYTE PTR [rbp+r11*1+0x6]
  4034a7:	46 32 54 1d 0a       	xor    r10b,BYTE PTR [rbp+r11*1+0xa]
  4034ac:	42 32 5c 1d 0e       	xor    bl,BYTE PTR [rbp+r11*1+0xe]
  4034b1:	44 88 b4 24 b1 00 00 	mov    BYTE PTR [rsp+0xb1],r14b
  4034b8:	00 
  4034b9:	44 88 ac 24 b2 00 00 	mov    BYTE PTR [rsp+0xb2],r13b
  4034c0:	00 
  4034c1:	44 88 a4 24 b3 00 00 	mov    BYTE PTR [rsp+0xb3],r12b
  4034c8:	00 
  4034c9:	88 54 24 60          	mov    BYTE PTR [rsp+0x60],dl
  4034cd:	88 94 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],dl
  4034d4:	89 ca                	mov    edx,ecx
  4034d6:	42 32 54 1d 03       	xor    dl,BYTE PTR [rbp+r11*1+0x3]
  4034db:	44 88 84 24 b5 00 00 	mov    BYTE PTR [rsp+0xb5],r8b
  4034e2:	00 
  4034e3:	40 88 b4 24 b6 00 00 	mov    BYTE PTR [rsp+0xb6],sil
  4034ea:	00 
  4034eb:	44 88 bc 24 b7 00 00 	mov    BYTE PTR [rsp+0xb7],r15b
  4034f2:	00 
  4034f3:	40 88 bc 24 b9 00 00 	mov    BYTE PTR [rsp+0xb9],dil
  4034fa:	00 
  4034fb:	44 88 94 24 ba 00 00 	mov    BYTE PTR [rsp+0xba],r10b
  403502:	00 
  403503:	88 9c 24 bb 00 00 00 	mov    BYTE PTR [rsp+0xbb],bl
  40350a:	88 54 24 78          	mov    BYTE PTR [rsp+0x78],dl
  40350e:	88 94 24 bc 00 00 00 	mov    BYTE PTR [rsp+0xbc],dl
  403515:	0f b6 54 24 30       	movzx  edx,BYTE PTR [rsp+0x30]
  40351a:	42 32 54 1d 07       	xor    dl,BYTE PTR [rbp+r11*1+0x7]
  40351f:	88 54 24 58          	mov    BYTE PTR [rsp+0x58],dl
  403523:	88 94 24 bd 00 00 00 	mov    BYTE PTR [rsp+0xbd],dl
  40352a:	0f b6 54 24 40       	movzx  edx,BYTE PTR [rsp+0x40]
  40352f:	42 32 54 1d 0b       	xor    dl,BYTE PTR [rbp+r11*1+0xb]
  403534:	88 54 24 68          	mov    BYTE PTR [rsp+0x68],dl
  403538:	88 94 24 be 00 00 00 	mov    BYTE PTR [rsp+0xbe],dl
  40353f:	0f b6 54 24 50       	movzx  edx,BYTE PTR [rsp+0x50]
  403544:	42 32 54 1d 0f       	xor    dl,BYTE PTR [rbp+r11*1+0xf]
  403549:	4c 8d 9c 24 c0 00 00 	lea    r11,[rsp+0xc0]
  403550:	00 
  403551:	88 94 24 88 00 00 00 	mov    BYTE PTR [rsp+0x88],dl
  403558:	8b 14 24             	mov    edx,DWORD PTR [rsp]
  40355b:	41 c7 03 00 00 00 00 	mov    DWORD PTR [r11],0x0
  403562:	49 83 c3 04          	add    r11,0x4
  403566:	4c 3b 5c 24 10       	cmp    r11,QWORD PTR [rsp+0x10]
  40356b:	75 ee                	jne    40355b <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)+0x67b>
  40356d:	45 0f b6 f6          	movzx  r14d,r14b
  403571:	45 0f b6 e4          	movzx  r12d,r12b
  403575:	45 0f b6 c0          	movzx  r8d,r8b
  403579:	45 0f b6 9e 40 a9 40 	movzx  r11d,BYTE PTR [r14+0x40a940]
  403580:	00 
  403581:	89 14 24             	mov    DWORD PTR [rsp],edx
  403584:	41 0f b6 d2          	movzx  edx,r10b
  403588:	44 32 9c 24 c1 00 00 	xor    r11b,BYTE PTR [rsp+0xc1]
  40358f:	00 
  403590:	45 0f b6 94 24 40 a9 	movzx  r10d,BYTE PTR [r12+0x40a940]
  403597:	40 00 
  403599:	40 0f b6 ff          	movzx  edi,dil
  40359d:	45 32 98 40 a6 40 00 	xor    r11b,BYTE PTR [r8+0x40a640]
  4035a4:	44 32 94 24 c3 00 00 	xor    r10b,BYTE PTR [rsp+0xc3]
  4035ab:	00 
  4035ac:	45 0f b6 ff          	movzx  r15d,r15b
  4035b0:	44 32 9f 40 a8 40 00 	xor    r11b,BYTE PTR [rdi+0x40a840]
  4035b7:	45 32 97 40 a6 40 00 	xor    r10b,BYTE PTR [r15+0x40a640]
  4035be:	0f b6 db             	movzx  ebx,bl
  4035c1:	44 32 93 40 a8 40 00 	xor    r10b,BYTE PTR [rbx+0x40a840]
  4035c8:	48 89 5c 24 40       	mov    QWORD PTR [rsp+0x40],rbx
  4035cd:	41 0f b6 d9          	movzx  ebx,r9b
  4035d1:	44 0f b6 8b 40 a9 40 	movzx  r9d,BYTE PTR [rbx+0x40a940]
  4035d8:	00 
  4035d9:	48 89 5c 24 50       	mov    QWORD PTR [rsp+0x50],rbx
  4035de:	45 0f b6 ed          	movzx  r13d,r13b
  4035e2:	0f b6 9c 24 80 00 00 	movzx  ebx,BYTE PTR [rsp+0x80]
  4035e9:	00 
  4035ea:	44 32 8c 24 c0 00 00 	xor    r9b,BYTE PTR [rsp+0xc0]
  4035f1:	00 
  4035f2:	40 0f b6 f6          	movzx  esi,sil
  4035f6:	44 88 5c 24 70       	mov    BYTE PTR [rsp+0x70],r11b
  4035fb:	45 0f b6 9d 40 a9 40 	movzx  r11d,BYTE PTR [r13+0x40a940]
  403602:	00 
  403603:	44 32 9c 24 c2 00 00 	xor    r11b,BYTE PTR [rsp+0xc2]
  40360a:	00 
  40360b:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
  403610:	44 32 9e 40 a6 40 00 	xor    r11b,BYTE PTR [rsi+0x40a640]
  403617:	4c 89 7c 24 30       	mov    QWORD PTR [rsp+0x30],r15
  40361c:	48 89 de             	mov    rsi,rbx
  40361f:	44 32 8b 40 a6 40 00 	xor    r9b,BYTE PTR [rbx+0x40a640]
  403626:	0f b6 5c 24 60       	movzx  ebx,BYTE PTR [rsp+0x60]
  40362b:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
  403630:	44 32 9a 40 a8 40 00 	xor    r11b,BYTE PTR [rdx+0x40a840]
  403637:	49 89 df             	mov    r15,rbx
  40363a:	44 32 8b 40 a8 40 00 	xor    r9b,BYTE PTR [rbx+0x40a840]
  403641:	0f b6 5c 24 78       	movzx  ebx,BYTE PTR [rsp+0x78]
  403646:	44 32 8b 40 a4 40 00 	xor    r9b,BYTE PTR [rbx+0x40a440]
  40364d:	48 89 df             	mov    rdi,rbx
  403650:	0f b6 5c 24 70       	movzx  ebx,BYTE PTR [rsp+0x70]
  403655:	44 88 8c 24 c0 00 00 	mov    BYTE PTR [rsp+0xc0],r9b
  40365c:	00 
  40365d:	44 0f b6 4c 24 58    	movzx  r9d,BYTE PTR [rsp+0x58]
  403663:	41 32 99 40 a4 40 00 	xor    bl,BYTE PTR [r9+0x40a440]
  40366a:	4c 89 4c 24 58       	mov    QWORD PTR [rsp+0x58],r9
  40366f:	88 9c 24 c1 00 00 00 	mov    BYTE PTR [rsp+0xc1],bl
  403676:	44 0f b6 4c 24 68    	movzx  r9d,BYTE PTR [rsp+0x68]
  40367c:	48 8b 5c 24 30       	mov    rbx,QWORD PTR [rsp+0x30]
  403681:	45 32 99 40 a4 40 00 	xor    r11b,BYTE PTR [r9+0x40a440]
  403688:	4c 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],r9
  40368d:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
  403692:	44 88 9c 24 c2 00 00 	mov    BYTE PTR [rsp+0xc2],r11b
  403699:	00 
  40369a:	44 0f b6 9c 24 88 00 	movzx  r11d,BYTE PTR [rsp+0x88]
  4036a1:	00 00 
  4036a3:	45 32 93 40 a4 40 00 	xor    r10b,BYTE PTR [r11+0x40a440]
  4036aa:	4c 89 5c 24 68       	mov    QWORD PTR [rsp+0x68],r11
  4036af:	45 0f b6 9e 40 a4 40 	movzx  r11d,BYTE PTR [r14+0x40a440]
  4036b6:	00 
  4036b7:	44 32 9c 24 c5 00 00 	xor    r11b,BYTE PTR [rsp+0xc5]
  4036be:	00 
  4036bf:	45 32 98 40 a9 40 00 	xor    r11b,BYTE PTR [r8+0x40a940]
  4036c6:	44 88 94 24 c3 00 00 	mov    BYTE PTR [rsp+0xc3],r10b
  4036cd:	00 
  4036ce:	4c 8b 54 24 18       	mov    r10,QWORD PTR [rsp+0x18]
  4036d3:	45 32 9a 40 a6 40 00 	xor    r11b,BYTE PTR [r10+0x40a640]
  4036da:	45 0f b6 95 40 a4 40 	movzx  r10d,BYTE PTR [r13+0x40a440]
  4036e1:	00 
  4036e2:	44 32 94 24 c6 00 00 	xor    r10b,BYTE PTR [rsp+0xc6]
  4036e9:	00 
  4036ea:	45 32 91 40 a9 40 00 	xor    r10b,BYTE PTR [r9+0x40a940]
  4036f1:	45 0f b6 8c 24 40 a4 	movzx  r9d,BYTE PTR [r12+0x40a440]
  4036f8:	40 00 
  4036fa:	44 32 8c 24 c7 00 00 	xor    r9b,BYTE PTR [rsp+0xc7]
  403701:	00 
  403702:	44 32 92 40 a6 40 00 	xor    r10b,BYTE PTR [rdx+0x40a640]
  403709:	44 32 8b 40 a9 40 00 	xor    r9b,BYTE PTR [rbx+0x40a940]
  403710:	48 8b 5c 24 40       	mov    rbx,QWORD PTR [rsp+0x40]
  403715:	44 32 8b 40 a6 40 00 	xor    r9b,BYTE PTR [rbx+0x40a640]
  40371c:	48 8b 5c 24 50       	mov    rbx,QWORD PTR [rsp+0x50]
  403721:	0f b6 9b 40 a4 40 00 	movzx  ebx,BYTE PTR [rbx+0x40a440]
  403728:	32 9c 24 c4 00 00 00 	xor    bl,BYTE PTR [rsp+0xc4]
  40372f:	32 9e 40 a9 40 00    	xor    bl,BYTE PTR [rsi+0x40a940]
  403735:	41 32 9f 40 a6 40 00 	xor    bl,BYTE PTR [r15+0x40a640]
  40373c:	32 9f 40 a8 40 00    	xor    bl,BYTE PTR [rdi+0x40a840]
  403742:	88 9c 24 c4 00 00 00 	mov    BYTE PTR [rsp+0xc4],bl
  403749:	48 8b 5c 24 58       	mov    rbx,QWORD PTR [rsp+0x58]
  40374e:	44 32 9b 40 a8 40 00 	xor    r11b,BYTE PTR [rbx+0x40a840]
  403755:	48 8b 5c 24 30       	mov    rbx,QWORD PTR [rsp+0x30]
  40375a:	48 89 74 24 70       	mov    QWORD PTR [rsp+0x70],rsi
  40375f:	48 89 7c 24 78       	mov    QWORD PTR [rsp+0x78],rdi
  403764:	44 88 9c 24 c5 00 00 	mov    BYTE PTR [rsp+0xc5],r11b
  40376b:	00 
  40376c:	4c 8b 5c 24 60       	mov    r11,QWORD PTR [rsp+0x60]
  403771:	45 32 93 40 a8 40 00 	xor    r10b,BYTE PTR [r11+0x40a840]
  403778:	45 0f b6 9e 40 a8 40 	movzx  r11d,BYTE PTR [r14+0x40a840]
  40377f:	00 
  403780:	44 88 94 24 c6 00 00 	mov    BYTE PTR [rsp+0xc6],r10b
  403787:	00 
  403788:	4c 8b 54 24 68       	mov    r10,QWORD PTR [rsp+0x68]
  40378d:	45 32 8a 40 a8 40 00 	xor    r9b,BYTE PTR [r10+0x40a840]
  403794:	4c 8b 54 24 18       	mov    r10,QWORD PTR [rsp+0x18]
  403799:	44 32 9c 24 c9 00 00 	xor    r11b,BYTE PTR [rsp+0xc9]
  4037a0:	00 
  4037a1:	45 32 98 40 a4 40 00 	xor    r11b,BYTE PTR [r8+0x40a440]
  4037a8:	45 32 9a 40 a9 40 00 	xor    r11b,BYTE PTR [r10+0x40a940]
  4037af:	45 0f b6 95 40 a8 40 	movzx  r10d,BYTE PTR [r13+0x40a840]
  4037b6:	00 
  4037b7:	44 88 8c 24 c7 00 00 	mov    BYTE PTR [rsp+0xc7],r9b
  4037be:	00 
  4037bf:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
  4037c4:	44 32 94 24 ca 00 00 	xor    r10b,BYTE PTR [rsp+0xca]
  4037cb:	00 
  4037cc:	45 32 91 40 a4 40 00 	xor    r10b,BYTE PTR [r9+0x40a440]
  4037d3:	45 0f b6 8c 24 40 a8 	movzx  r9d,BYTE PTR [r12+0x40a840]
  4037da:	40 00 
  4037dc:	44 32 8c 24 cb 00 00 	xor    r9b,BYTE PTR [rsp+0xcb]
  4037e3:	00 
  4037e4:	44 32 92 40 a9 40 00 	xor    r10b,BYTE PTR [rdx+0x40a940]
  4037eb:	44 32 8b 40 a4 40 00 	xor    r9b,BYTE PTR [rbx+0x40a440]
  4037f2:	48 8b 5c 24 40       	mov    rbx,QWORD PTR [rsp+0x40]
  4037f7:	44 32 8b 40 a9 40 00 	xor    r9b,BYTE PTR [rbx+0x40a940]
  4037fe:	48 8b 5c 24 50       	mov    rbx,QWORD PTR [rsp+0x50]
  403803:	0f b6 9b 40 a8 40 00 	movzx  ebx,BYTE PTR [rbx+0x40a840]
  40380a:	32 9c 24 c8 00 00 00 	xor    bl,BYTE PTR [rsp+0xc8]
  403811:	32 9e 40 a4 40 00    	xor    bl,BYTE PTR [rsi+0x40a440]
  403817:	41 32 9f 40 a9 40 00 	xor    bl,BYTE PTR [r15+0x40a940]
  40381e:	32 9f 40 a6 40 00    	xor    bl,BYTE PTR [rdi+0x40a640]
  403824:	88 9c 24 c8 00 00 00 	mov    BYTE PTR [rsp+0xc8],bl
  40382b:	48 8b 7c 24 58       	mov    rdi,QWORD PTR [rsp+0x58]
  403830:	48 8b 74 24 20       	mov    rsi,QWORD PTR [rsp+0x20]
  403835:	48 8b 5c 24 30       	mov    rbx,QWORD PTR [rsp+0x30]
  40383a:	44 32 9f 40 a6 40 00 	xor    r11b,BYTE PTR [rdi+0x40a640]
  403841:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
  403846:	44 88 9c 24 c9 00 00 	mov    BYTE PTR [rsp+0xc9],r11b
  40384d:	00 
  40384e:	4c 8b 5c 24 60       	mov    r11,QWORD PTR [rsp+0x60]
  403853:	45 32 93 40 a6 40 00 	xor    r10b,BYTE PTR [r11+0x40a640]
  40385a:	44 88 94 24 ca 00 00 	mov    BYTE PTR [rsp+0xca],r10b
  403861:	00 
  403862:	4c 8b 54 24 68       	mov    r10,QWORD PTR [rsp+0x68]
  403867:	45 32 8a 40 a6 40 00 	xor    r9b,BYTE PTR [r10+0x40a640]
  40386e:	44 88 8c 24 cb 00 00 	mov    BYTE PTR [rsp+0xcb],r9b
  403875:	00 
  403876:	44 0f b6 8c 24 cd 00 	movzx  r9d,BYTE PTR [rsp+0xcd]
  40387d:	00 00 
  40387f:	45 32 8e 40 a6 40 00 	xor    r9b,BYTE PTR [r14+0x40a640]
  403886:	45 32 88 40 a8 40 00 	xor    r9b,BYTE PTR [r8+0x40a840]
  40388d:	44 0f b6 84 24 cc 00 	movzx  r8d,BYTE PTR [rsp+0xcc]
  403894:	00 00 
  403896:	44 32 8f 40 a4 40 00 	xor    r9b,BYTE PTR [rdi+0x40a440]
  40389d:	0f b6 bc 24 ce 00 00 	movzx  edi,BYTE PTR [rsp+0xce]
  4038a4:	00 
  4038a5:	41 32 bd 40 a6 40 00 	xor    dil,BYTE PTR [r13+0x40a640]
  4038ac:	40 32 be 40 a8 40 00 	xor    dil,BYTE PTR [rsi+0x40a840]
  4038b3:	0f b6 b4 24 cf 00 00 	movzx  esi,BYTE PTR [rsp+0xcf]
  4038ba:	00 
  4038bb:	41 32 b4 24 40 a6 40 	xor    sil,BYTE PTR [r12+0x40a640]
  4038c2:	00 
  4038c3:	40 32 ba 40 a4 40 00 	xor    dil,BYTE PTR [rdx+0x40a440]
  4038ca:	40 32 b3 40 a8 40 00 	xor    sil,BYTE PTR [rbx+0x40a840]
  4038d1:	48 8b 5c 24 40       	mov    rbx,QWORD PTR [rsp+0x40]
  4038d6:	40 32 b3 40 a4 40 00 	xor    sil,BYTE PTR [rbx+0x40a440]
  4038dd:	48 8b 5c 24 50       	mov    rbx,QWORD PTR [rsp+0x50]
  4038e2:	44 32 83 40 a6 40 00 	xor    r8b,BYTE PTR [rbx+0x40a640]
  4038e9:	48 8b 5c 24 70       	mov    rbx,QWORD PTR [rsp+0x70]
  4038ee:	44 32 83 40 a8 40 00 	xor    r8b,BYTE PTR [rbx+0x40a840]
  4038f5:	48 8b 5c 24 78       	mov    rbx,QWORD PTR [rsp+0x78]
  4038fa:	45 32 87 40 a4 40 00 	xor    r8b,BYTE PTR [r15+0x40a440]
  403901:	44 32 83 40 a9 40 00 	xor    r8b,BYTE PTR [rbx+0x40a940]
  403908:	48 8b 5c 24 58       	mov    rbx,QWORD PTR [rsp+0x58]
  40390d:	41 32 bb 40 a9 40 00 	xor    dil,BYTE PTR [r11+0x40a940]
  403914:	41 32 b2 40 a9 40 00 	xor    sil,BYTE PTR [r10+0x40a940]
  40391b:	44 32 8b 40 a9 40 00 	xor    r9b,BYTE PTR [rbx+0x40a940]
  403922:	83 ac 24 a0 00 00 00 	sub    DWORD PTR [rsp+0xa0],0x10
  403929:	10 
  40392a:	83 ac 24 a4 00 00 00 	sub    DWORD PTR [rsp+0xa4],0x1
  403931:	01 
  403932:	44 88 84 24 cc 00 00 	mov    BYTE PTR [rsp+0xcc],r8b
  403939:	00 
  40393a:	40 88 b4 24 cf 00 00 	mov    BYTE PTR [rsp+0xcf],sil
  403941:	00 
  403942:	40 88 bc 24 ce 00 00 	mov    BYTE PTR [rsp+0xce],dil
  403949:	00 
  40394a:	48 8b b4 24 c0 00 00 	mov    rsi,QWORD PTR [rsp+0xc0]
  403951:	00 
  403952:	44 88 8c 24 cd 00 00 	mov    BYTE PTR [rsp+0xcd],r9b
  403959:	00 
  40395a:	48 8b bc 24 c8 00 00 	mov    rdi,QWORD PTR [rsp+0xc8]
  403961:	00 
  403962:	48 89 b4 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rsi
  403969:	00 
  40396a:	48 89 bc 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rdi
  403971:	00 
  403972:	0f 85 58 f7 ff ff    	jne    4030d0 <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)+0x1f0>
  403978:	0f b6 84 24 b0 00 00 	movzx  eax,BYTE PTR [rsp+0xb0]
  40397f:	00 
  403980:	48 89 c2             	mov    rdx,rax
  403983:	c0 e8 04             	shr    al,0x4
  403986:	83 e0 0f             	and    eax,0xf
  403989:	83 e2 0f             	and    edx,0xf
  40398c:	48 c1 e0 04          	shl    rax,0x4
  403990:	44 0f b6 84 02 40 aa 	movzx  r8d,BYTE PTR [rdx+rax*1+0x40aa40]
  403997:	40 00 
  403999:	0f b6 84 24 b1 00 00 	movzx  eax,BYTE PTR [rsp+0xb1]
  4039a0:	00 
  4039a1:	48 89 c2             	mov    rdx,rax
  4039a4:	c0 e8 04             	shr    al,0x4
  4039a7:	83 e0 0f             	and    eax,0xf
  4039aa:	83 e2 0f             	and    edx,0xf
  4039ad:	48 c1 e0 04          	shl    rax,0x4
  4039b1:	0f b6 bc 02 40 aa 40 	movzx  edi,BYTE PTR [rdx+rax*1+0x40aa40]
  4039b8:	00 
  4039b9:	0f b6 84 24 b2 00 00 	movzx  eax,BYTE PTR [rsp+0xb2]
  4039c0:	00 
  4039c1:	48 89 c2             	mov    rdx,rax
  4039c4:	c0 e8 04             	shr    al,0x4
  4039c7:	83 e0 0f             	and    eax,0xf
  4039ca:	83 e2 0f             	and    edx,0xf
  4039cd:	48 c1 e0 04          	shl    rax,0x4
  4039d1:	0f b6 b4 02 40 aa 40 	movzx  esi,BYTE PTR [rdx+rax*1+0x40aa40]
  4039d8:	00 
  4039d9:	0f b6 84 24 b3 00 00 	movzx  eax,BYTE PTR [rsp+0xb3]
  4039e0:	00 
  4039e1:	48 89 c2             	mov    rdx,rax
  4039e4:	c0 e8 04             	shr    al,0x4
  4039e7:	83 e0 0f             	and    eax,0xf
  4039ea:	83 e2 0f             	and    edx,0xf
  4039ed:	48 c1 e0 04          	shl    rax,0x4
  4039f1:	0f b6 8c 02 40 aa 40 	movzx  ecx,BYTE PTR [rdx+rax*1+0x40aa40]
  4039f8:	00 
  4039f9:	0f b6 84 24 b4 00 00 	movzx  eax,BYTE PTR [rsp+0xb4]
  403a00:	00 
  403a01:	48 89 c2             	mov    rdx,rax
  403a04:	c0 e8 04             	shr    al,0x4
  403a07:	83 e0 0f             	and    eax,0xf
  403a0a:	83 e2 0f             	and    edx,0xf
  403a0d:	48 c1 e0 04          	shl    rax,0x4
  403a11:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  403a18:	00 
  403a19:	0f b6 94 24 b8 00 00 	movzx  edx,BYTE PTR [rsp+0xb8]
  403a20:	00 
  403a21:	49 89 d1             	mov    r9,rdx
  403a24:	c0 ea 04             	shr    dl,0x4
  403a27:	88 44 24 20          	mov    BYTE PTR [rsp+0x20],al
  403a2b:	83 e2 0f             	and    edx,0xf
  403a2e:	0f b6 84 24 b5 00 00 	movzx  eax,BYTE PTR [rsp+0xb5]
  403a35:	00 
  403a36:	41 83 e1 0f          	and    r9d,0xf
  403a3a:	48 c1 e2 04          	shl    rdx,0x4
  403a3e:	41 0f b6 94 11 40 aa 	movzx  edx,BYTE PTR [r9+rdx*1+0x40aa40]
  403a45:	40 00 
  403a47:	48 89 c3             	mov    rbx,rax
  403a4a:	41 89 c6             	mov    r14d,eax
  403a4d:	0f b6 84 24 b6 00 00 	movzx  eax,BYTE PTR [rsp+0xb6]
  403a54:	00 
  403a55:	41 c0 ee 04          	shr    r14b,0x4
  403a59:	83 e3 0f             	and    ebx,0xf
  403a5c:	88 54 24 10          	mov    BYTE PTR [rsp+0x10],dl
  403a60:	0f b6 94 24 b9 00 00 	movzx  edx,BYTE PTR [rsp+0xb9]
  403a67:	00 
  403a68:	41 83 e6 0f          	and    r14d,0xf
  403a6c:	49 c1 e6 04          	shl    r14,0x4
  403a70:	48 89 5c 24 30       	mov    QWORD PTR [rsp+0x30],rbx
  403a75:	49 89 c7             	mov    r15,rax
  403a78:	c0 e8 04             	shr    al,0x4
  403a7b:	83 e0 0f             	and    eax,0xf
  403a7e:	41 83 e7 0f          	and    r15d,0xf
  403a82:	49 89 d1             	mov    r9,rdx
  403a85:	48 c1 e0 04          	shl    rax,0x4
  403a89:	41 83 e1 0f          	and    r9d,0xf
  403a8d:	c0 ea 04             	shr    dl,0x4
  403a90:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
  403a95:	83 e2 0f             	and    edx,0xf
  403a98:	0f b6 84 24 b7 00 00 	movzx  eax,BYTE PTR [rsp+0xb7]
  403a9f:	00 
  403aa0:	48 c1 e2 04          	shl    rdx,0x4
  403aa4:	45 0f b6 94 11 40 aa 	movzx  r10d,BYTE PTR [r9+rdx*1+0x40aa40]
  403aab:	40 00 
  403aad:	0f b6 94 24 ba 00 00 	movzx  edx,BYTE PTR [rsp+0xba]
  403ab4:	00 
  403ab5:	49 89 d1             	mov    r9,rdx
  403ab8:	c0 ea 04             	shr    dl,0x4
  403abb:	83 e2 0f             	and    edx,0xf
  403abe:	41 83 e1 0f          	and    r9d,0xf
  403ac2:	48 c1 e2 04          	shl    rdx,0x4
  403ac6:	45 0f b6 9c 11 40 aa 	movzx  r11d,BYTE PTR [r9+rdx*1+0x40aa40]
  403acd:	40 00 
  403acf:	0f b6 94 24 bb 00 00 	movzx  edx,BYTE PTR [rsp+0xbb]
  403ad6:	00 
  403ad7:	49 89 d1             	mov    r9,rdx
  403ada:	c0 ea 04             	shr    dl,0x4
  403add:	83 e2 0f             	and    edx,0xf
  403ae0:	41 83 e1 0f          	and    r9d,0xf
  403ae4:	48 c1 e2 04          	shl    rdx,0x4
  403ae8:	45 0f b6 8c 11 40 aa 	movzx  r9d,BYTE PTR [r9+rdx*1+0x40aa40]
  403aef:	40 00 
  403af1:	0f b6 94 24 bc 00 00 	movzx  edx,BYTE PTR [rsp+0xbc]
  403af8:	00 
  403af9:	44 88 0c 24          	mov    BYTE PTR [rsp],r9b
  403afd:	49 89 d1             	mov    r9,rdx
  403b00:	c0 ea 04             	shr    dl,0x4
  403b03:	83 e2 0f             	and    edx,0xf
  403b06:	41 83 e1 0f          	and    r9d,0xf
  403b0a:	48 c1 e2 04          	shl    rdx,0x4
  403b0e:	45 0f b6 a4 11 40 aa 	movzx  r12d,BYTE PTR [r9+rdx*1+0x40aa40]
  403b15:	40 00 
  403b17:	0f b6 94 24 bd 00 00 	movzx  edx,BYTE PTR [rsp+0xbd]
  403b1e:	00 
  403b1f:	49 89 d1             	mov    r9,rdx
  403b22:	c0 ea 04             	shr    dl,0x4
  403b25:	83 e2 0f             	and    edx,0xf
  403b28:	41 83 e1 0f          	and    r9d,0xf
  403b2c:	48 c1 e2 04          	shl    rdx,0x4
  403b30:	45 0f b6 8c 11 40 aa 	movzx  r9d,BYTE PTR [r9+rdx*1+0x40aa40]
  403b37:	40 00 
  403b39:	0f b6 94 24 be 00 00 	movzx  edx,BYTE PTR [rsp+0xbe]
  403b40:	00 
  403b41:	48 89 d3             	mov    rbx,rdx
  403b44:	c0 ea 04             	shr    dl,0x4
  403b47:	83 e2 0f             	and    edx,0xf
  403b4a:	83 e3 0f             	and    ebx,0xf
  403b4d:	48 c1 e2 04          	shl    rdx,0x4
  403b51:	0f b6 9c 13 40 aa 40 	movzx  ebx,BYTE PTR [rbx+rdx*1+0x40aa40]
  403b58:	00 
  403b59:	0f b6 94 24 bf 00 00 	movzx  edx,BYTE PTR [rsp+0xbf]
  403b60:	00 
  403b61:	49 89 d5             	mov    r13,rdx
  403b64:	c0 ea 04             	shr    dl,0x4
  403b67:	83 e2 0f             	and    edx,0xf
  403b6a:	41 83 e5 0f          	and    r13d,0xf
  403b6e:	48 c1 e2 04          	shl    rdx,0x4
  403b72:	45 0f b6 ac 15 40 aa 	movzx  r13d,BYTE PTR [r13+rdx*1+0x40aa40]
  403b79:	40 00 
  403b7b:	48 89 c2             	mov    rdx,rax
  403b7e:	c0 e8 04             	shr    al,0x4
  403b81:	83 e0 0f             	and    eax,0xf
  403b84:	83 e2 0f             	and    edx,0xf
  403b87:	48 c1 e0 04          	shl    rax,0x4
  403b8b:	44 88 6c 24 18       	mov    BYTE PTR [rsp+0x18],r13b
  403b90:	45 31 ed             	xor    r13d,r13d
  403b93:	44 8a ac 02 40 aa 40 	mov    r13b,BYTE PTR [rdx+rax*1+0x40aa40]
  403b9a:	00 
  403b9b:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
  403ba0:	41 c1 e2 18          	shl    r10d,0x18
  403ba4:	40 32 7d 04          	xor    dil,BYTE PTR [rbp+0x4]
  403ba8:	44 32 45 00          	xor    r8b,BYTE PTR [rbp+0x0]
  403bac:	40 32 75 08          	xor    sil,BYTE PTR [rbp+0x8]
  403bb0:	4c 89 e8             	mov    rax,r13
  403bb3:	32 4d 0c             	xor    cl,BYTE PTR [rbp+0xc]
  403bb6:	88 d4                	mov    ah,dl
  403bb8:	49 89 c5             	mov    r13,rax
  403bbb:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
  403bc0:	40 88 bc 24 b1 00 00 	mov    BYTE PTR [rsp+0xb1],dil
  403bc7:	00 
  403bc8:	45 0f b7 ed          	movzx  r13d,r13w
  403bcc:	44 88 84 24 b0 00 00 	mov    BYTE PTR [rsp+0xb0],r8b
  403bd3:	00 
  403bd4:	40 88 b4 24 b2 00 00 	mov    BYTE PTR [rsp+0xb2],sil
  403bdb:	00 
  403bdc:	88 8c 24 b3 00 00 00 	mov    BYTE PTR [rsp+0xb3],cl
  403be3:	42 0f b6 84 30 40 aa 	movzx  eax,BYTE PTR [rax+r14*1+0x40aa40]
  403bea:	40 00 
  403bec:	89 c2                	mov    edx,eax
  403bee:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
  403bf3:	c1 e2 10             	shl    edx,0x10
  403bf6:	41 09 d5             	or     r13d,edx
  403bf9:	31 d2                	xor    edx,edx
  403bfb:	41 0f b6 84 07 40 aa 	movzx  eax,BYTE PTR [r15+rax*1+0x40aa40]
  403c02:	40 00 
  403c04:	44 88 da             	mov    dl,r11b
  403c07:	c1 e0 18             	shl    eax,0x18
  403c0a:	41 09 c5             	or     r13d,eax
  403c0d:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  403c11:	44 89 ac 24 b4 00 00 	mov    DWORD PTR [rsp+0xb4],r13d
  403c18:	00 
  403c19:	88 c6                	mov    dh,al
  403c1b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [rsp+0x10]
  403c20:	0f b7 d2             	movzx  edx,dx
  403c23:	c1 e0 10             	shl    eax,0x10
  403c26:	09 d0                	or     eax,edx
  403c28:	31 d2                	xor    edx,edx
  403c2a:	44 09 d0             	or     eax,r10d
  403c2d:	44 88 ca             	mov    dl,r9b
  403c30:	89 84 24 b8 00 00 00 	mov    DWORD PTR [rsp+0xb8],eax
  403c37:	0f b6 44 24 18       	movzx  eax,BYTE PTR [rsp+0x18]
  403c3c:	88 de                	mov    dh,bl
  403c3e:	44 0f b7 ca          	movzx  r9d,dx
  403c42:	44 89 e2             	mov    edx,r12d
  403c45:	c1 e2 18             	shl    edx,0x18
  403c48:	c1 e0 10             	shl    eax,0x10
  403c4b:	44 09 c8             	or     eax,r9d
  403c4e:	09 d0                	or     eax,edx
  403c50:	89 84 24 bc 00 00 00 	mov    DWORD PTR [rsp+0xbc],eax
  403c57:	0f b6 45 01          	movzx  eax,BYTE PTR [rbp+0x1]
  403c5b:	30 84 24 b4 00 00 00 	xor    BYTE PTR [rsp+0xb4],al
  403c62:	0f b6 45 05          	movzx  eax,BYTE PTR [rbp+0x5]
  403c66:	30 84 24 b5 00 00 00 	xor    BYTE PTR [rsp+0xb5],al
  403c6d:	0f b6 45 09          	movzx  eax,BYTE PTR [rbp+0x9]
  403c71:	30 84 24 b6 00 00 00 	xor    BYTE PTR [rsp+0xb6],al
  403c78:	0f b6 45 0d          	movzx  eax,BYTE PTR [rbp+0xd]
  403c7c:	30 84 24 b7 00 00 00 	xor    BYTE PTR [rsp+0xb7],al
  403c83:	0f b6 45 02          	movzx  eax,BYTE PTR [rbp+0x2]
  403c87:	30 84 24 b8 00 00 00 	xor    BYTE PTR [rsp+0xb8],al
  403c8e:	0f b6 45 06          	movzx  eax,BYTE PTR [rbp+0x6]
  403c92:	30 84 24 b9 00 00 00 	xor    BYTE PTR [rsp+0xb9],al
  403c99:	0f b6 45 0a          	movzx  eax,BYTE PTR [rbp+0xa]
  403c9d:	30 84 24 ba 00 00 00 	xor    BYTE PTR [rsp+0xba],al
  403ca4:	0f b6 45 0e          	movzx  eax,BYTE PTR [rbp+0xe]
  403ca8:	30 84 24 bb 00 00 00 	xor    BYTE PTR [rsp+0xbb],al
  403caf:	0f b6 45 03          	movzx  eax,BYTE PTR [rbp+0x3]
  403cb3:	30 84 24 bc 00 00 00 	xor    BYTE PTR [rsp+0xbc],al
  403cba:	0f b6 45 07          	movzx  eax,BYTE PTR [rbp+0x7]
  403cbe:	30 84 24 bd 00 00 00 	xor    BYTE PTR [rsp+0xbd],al
  403cc5:	0f b6 45 0b          	movzx  eax,BYTE PTR [rbp+0xb]
  403cc9:	30 84 24 be 00 00 00 	xor    BYTE PTR [rsp+0xbe],al
  403cd0:	0f b6 45 0f          	movzx  eax,BYTE PTR [rbp+0xf]
  403cd4:	30 84 24 bf 00 00 00 	xor    BYTE PTR [rsp+0xbf],al
  403cdb:	48 8b 84 24 a8 00 00 	mov    rax,QWORD PTR [rsp+0xa8]
  403ce2:	00 
  403ce3:	40 88 78 04          	mov    BYTE PTR [rax+0x4],dil
  403ce7:	44 88 00             	mov    BYTE PTR [rax],r8b
  403cea:	48 89 c7             	mov    rdi,rax
  403ced:	40 88 70 08          	mov    BYTE PTR [rax+0x8],sil
  403cf1:	88 48 0c             	mov    BYTE PTR [rax+0xc],cl
  403cf4:	0f b6 84 24 b4 00 00 	movzx  eax,BYTE PTR [rsp+0xb4]
  403cfb:	00 
  403cfc:	88 47 01             	mov    BYTE PTR [rdi+0x1],al
  403cff:	0f b6 84 24 b5 00 00 	movzx  eax,BYTE PTR [rsp+0xb5]
  403d06:	00 
  403d07:	88 47 05             	mov    BYTE PTR [rdi+0x5],al
  403d0a:	0f b6 84 24 b6 00 00 	movzx  eax,BYTE PTR [rsp+0xb6]
  403d11:	00 
  403d12:	88 47 09             	mov    BYTE PTR [rdi+0x9],al
  403d15:	0f b6 84 24 b7 00 00 	movzx  eax,BYTE PTR [rsp+0xb7]
  403d1c:	00 
  403d1d:	88 47 0d             	mov    BYTE PTR [rdi+0xd],al
  403d20:	0f b6 84 24 b8 00 00 	movzx  eax,BYTE PTR [rsp+0xb8]
  403d27:	00 
  403d28:	88 47 02             	mov    BYTE PTR [rdi+0x2],al
  403d2b:	0f b6 84 24 b9 00 00 	movzx  eax,BYTE PTR [rsp+0xb9]
  403d32:	00 
  403d33:	88 47 06             	mov    BYTE PTR [rdi+0x6],al
  403d36:	0f b6 84 24 ba 00 00 	movzx  eax,BYTE PTR [rsp+0xba]
  403d3d:	00 
  403d3e:	88 47 0a             	mov    BYTE PTR [rdi+0xa],al
  403d41:	0f b6 84 24 bb 00 00 	movzx  eax,BYTE PTR [rsp+0xbb]
  403d48:	00 
  403d49:	88 47 0e             	mov    BYTE PTR [rdi+0xe],al
  403d4c:	0f b6 84 24 bc 00 00 	movzx  eax,BYTE PTR [rsp+0xbc]
  403d53:	00 
  403d54:	88 47 03             	mov    BYTE PTR [rdi+0x3],al
  403d57:	0f b6 84 24 bd 00 00 	movzx  eax,BYTE PTR [rsp+0xbd]
  403d5e:	00 
  403d5f:	88 47 07             	mov    BYTE PTR [rdi+0x7],al
  403d62:	0f b6 84 24 be 00 00 	movzx  eax,BYTE PTR [rsp+0xbe]
  403d69:	00 
  403d6a:	88 47 0b             	mov    BYTE PTR [rdi+0xb],al
  403d6d:	0f b6 84 24 bf 00 00 	movzx  eax,BYTE PTR [rsp+0xbf]
  403d74:	00 
  403d75:	88 47 0f             	mov    BYTE PTR [rdi+0xf],al
  403d78:	48 8b 84 24 d8 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
  403d7f:	00 
  403d80:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  403d87:	00 00 
  403d89:	75 12                	jne    403d9d <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)+0xebd>
  403d8b:	48 81 c4 e8 00 00 00 	add    rsp,0xe8
  403d92:	5b                   	pop    rbx
  403d93:	5d                   	pop    rbp
  403d94:	41 5c                	pop    r12
  403d96:	41 5d                	pop    r13
  403d98:	41 5e                	pop    r14
  403d9a:	41 5f                	pop    r15
  403d9c:	c3                   	ret    
  403d9d:	e8 1e dc ff ff       	call   4019c0 <__stack_chk_fail@plt>
  403da2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  403da6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  403dad:	00 00 00 

0000000000403db0 <AES::SubBytes(unsigned char (*) [4])>:
  403db0:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
  403db3:	48 89 c2             	mov    rdx,rax
  403db6:	c0 e8 04             	shr    al,0x4
  403db9:	83 e0 0f             	and    eax,0xf
  403dbc:	83 e2 0f             	and    edx,0xf
  403dbf:	48 c1 e0 04          	shl    rax,0x4
  403dc3:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403dca:	00 
  403dcb:	88 06                	mov    BYTE PTR [rsi],al
  403dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [rsi+0x1]
  403dd1:	48 89 c2             	mov    rdx,rax
  403dd4:	c0 e8 04             	shr    al,0x4
  403dd7:	83 e0 0f             	and    eax,0xf
  403dda:	83 e2 0f             	and    edx,0xf
  403ddd:	48 c1 e0 04          	shl    rax,0x4
  403de1:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403de8:	00 
  403de9:	88 46 01             	mov    BYTE PTR [rsi+0x1],al
  403dec:	0f b6 46 02          	movzx  eax,BYTE PTR [rsi+0x2]
  403df0:	48 89 c2             	mov    rdx,rax
  403df3:	c0 e8 04             	shr    al,0x4
  403df6:	83 e0 0f             	and    eax,0xf
  403df9:	83 e2 0f             	and    edx,0xf
  403dfc:	48 c1 e0 04          	shl    rax,0x4
  403e00:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403e07:	00 
  403e08:	88 46 02             	mov    BYTE PTR [rsi+0x2],al
  403e0b:	0f b6 46 03          	movzx  eax,BYTE PTR [rsi+0x3]
  403e0f:	48 89 c2             	mov    rdx,rax
  403e12:	c0 e8 04             	shr    al,0x4
  403e15:	83 e0 0f             	and    eax,0xf
  403e18:	83 e2 0f             	and    edx,0xf
  403e1b:	48 c1 e0 04          	shl    rax,0x4
  403e1f:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403e26:	00 
  403e27:	88 46 03             	mov    BYTE PTR [rsi+0x3],al
  403e2a:	0f b6 46 04          	movzx  eax,BYTE PTR [rsi+0x4]
  403e2e:	48 89 c2             	mov    rdx,rax
  403e31:	c0 e8 04             	shr    al,0x4
  403e34:	83 e0 0f             	and    eax,0xf
  403e37:	83 e2 0f             	and    edx,0xf
  403e3a:	48 c1 e0 04          	shl    rax,0x4
  403e3e:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403e45:	00 
  403e46:	88 46 04             	mov    BYTE PTR [rsi+0x4],al
  403e49:	0f b6 46 05          	movzx  eax,BYTE PTR [rsi+0x5]
  403e4d:	48 89 c2             	mov    rdx,rax
  403e50:	c0 e8 04             	shr    al,0x4
  403e53:	83 e0 0f             	and    eax,0xf
  403e56:	83 e2 0f             	and    edx,0xf
  403e59:	48 c1 e0 04          	shl    rax,0x4
  403e5d:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403e64:	00 
  403e65:	88 46 05             	mov    BYTE PTR [rsi+0x5],al
  403e68:	0f b6 46 06          	movzx  eax,BYTE PTR [rsi+0x6]
  403e6c:	48 89 c2             	mov    rdx,rax
  403e6f:	c0 e8 04             	shr    al,0x4
  403e72:	83 e0 0f             	and    eax,0xf
  403e75:	83 e2 0f             	and    edx,0xf
  403e78:	48 c1 e0 04          	shl    rax,0x4
  403e7c:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403e83:	00 
  403e84:	88 46 06             	mov    BYTE PTR [rsi+0x6],al
  403e87:	0f b6 46 07          	movzx  eax,BYTE PTR [rsi+0x7]
  403e8b:	48 89 c2             	mov    rdx,rax
  403e8e:	c0 e8 04             	shr    al,0x4
  403e91:	83 e0 0f             	and    eax,0xf
  403e94:	83 e2 0f             	and    edx,0xf
  403e97:	48 c1 e0 04          	shl    rax,0x4
  403e9b:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403ea2:	00 
  403ea3:	88 46 07             	mov    BYTE PTR [rsi+0x7],al
  403ea6:	0f b6 46 08          	movzx  eax,BYTE PTR [rsi+0x8]
  403eaa:	48 89 c2             	mov    rdx,rax
  403ead:	83 e2 0f             	and    edx,0xf
  403eb0:	c0 e8 04             	shr    al,0x4
  403eb3:	83 e0 0f             	and    eax,0xf
  403eb6:	48 c1 e0 04          	shl    rax,0x4
  403eba:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403ec1:	00 
  403ec2:	88 46 08             	mov    BYTE PTR [rsi+0x8],al
  403ec5:	0f b6 46 09          	movzx  eax,BYTE PTR [rsi+0x9]
  403ec9:	48 89 c2             	mov    rdx,rax
  403ecc:	c0 e8 04             	shr    al,0x4
  403ecf:	83 e0 0f             	and    eax,0xf
  403ed2:	83 e2 0f             	and    edx,0xf
  403ed5:	48 c1 e0 04          	shl    rax,0x4
  403ed9:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403ee0:	00 
  403ee1:	88 46 09             	mov    BYTE PTR [rsi+0x9],al
  403ee4:	0f b6 46 0a          	movzx  eax,BYTE PTR [rsi+0xa]
  403ee8:	48 89 c2             	mov    rdx,rax
  403eeb:	c0 e8 04             	shr    al,0x4
  403eee:	83 e0 0f             	and    eax,0xf
  403ef1:	83 e2 0f             	and    edx,0xf
  403ef4:	48 c1 e0 04          	shl    rax,0x4
  403ef8:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403eff:	00 
  403f00:	88 46 0a             	mov    BYTE PTR [rsi+0xa],al
  403f03:	0f b6 46 0b          	movzx  eax,BYTE PTR [rsi+0xb]
  403f07:	48 89 c2             	mov    rdx,rax
  403f0a:	c0 e8 04             	shr    al,0x4
  403f0d:	83 e0 0f             	and    eax,0xf
  403f10:	83 e2 0f             	and    edx,0xf
  403f13:	48 c1 e0 04          	shl    rax,0x4
  403f17:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403f1e:	00 
  403f1f:	88 46 0b             	mov    BYTE PTR [rsi+0xb],al
  403f22:	0f b6 46 0c          	movzx  eax,BYTE PTR [rsi+0xc]
  403f26:	48 89 c2             	mov    rdx,rax
  403f29:	c0 e8 04             	shr    al,0x4
  403f2c:	83 e0 0f             	and    eax,0xf
  403f2f:	83 e2 0f             	and    edx,0xf
  403f32:	48 c1 e0 04          	shl    rax,0x4
  403f36:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403f3d:	00 
  403f3e:	88 46 0c             	mov    BYTE PTR [rsi+0xc],al
  403f41:	0f b6 46 0d          	movzx  eax,BYTE PTR [rsi+0xd]
  403f45:	48 89 c2             	mov    rdx,rax
  403f48:	c0 e8 04             	shr    al,0x4
  403f4b:	83 e0 0f             	and    eax,0xf
  403f4e:	83 e2 0f             	and    edx,0xf
  403f51:	48 c1 e0 04          	shl    rax,0x4
  403f55:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403f5c:	00 
  403f5d:	88 46 0d             	mov    BYTE PTR [rsi+0xd],al
  403f60:	0f b6 46 0e          	movzx  eax,BYTE PTR [rsi+0xe]
  403f64:	48 89 c2             	mov    rdx,rax
  403f67:	c0 e8 04             	shr    al,0x4
  403f6a:	83 e0 0f             	and    eax,0xf
  403f6d:	83 e2 0f             	and    edx,0xf
  403f70:	48 c1 e0 04          	shl    rax,0x4
  403f74:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403f7b:	00 
  403f7c:	88 46 0e             	mov    BYTE PTR [rsi+0xe],al
  403f7f:	0f b6 46 0f          	movzx  eax,BYTE PTR [rsi+0xf]
  403f83:	48 89 c2             	mov    rdx,rax
  403f86:	c0 e8 04             	shr    al,0x4
  403f89:	83 e0 0f             	and    eax,0xf
  403f8c:	83 e2 0f             	and    edx,0xf
  403f8f:	48 c1 e0 04          	shl    rax,0x4
  403f93:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  403f9a:	00 
  403f9b:	88 46 0f             	mov    BYTE PTR [rsi+0xf],al
  403f9e:	c3                   	ret    
  403f9f:	90                   	nop

0000000000403fa0 <AES::ShiftRow(unsigned char (*) [4], unsigned int, unsigned int)>:
  403fa0:	53                   	push   rbx
  403fa1:	89 d2                	mov    edx,edx
  403fa3:	31 db                	xor    ebx,ebx
  403fa5:	48 83 ec 10          	sub    rsp,0x10
  403fa9:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  403fb0:	00 00 
  403fb2:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  403fb7:	31 c0                	xor    eax,eax
  403fb9:	48 8d 04 96          	lea    rax,[rsi+rdx*4]
  403fbd:	89 ca                	mov    edx,ecx
  403fbf:	83 e2 03             	and    edx,0x3
  403fc2:	8a 1c 10             	mov    bl,BYTE PTR [rax+rdx*1]
  403fc5:	8d 51 01             	lea    edx,[rcx+0x1]
  403fc8:	83 e2 03             	and    edx,0x3
  403fcb:	0f b6 14 10          	movzx  edx,BYTE PTR [rax+rdx*1]
  403fcf:	88 d7                	mov    bh,dl
  403fd1:	8d 51 02             	lea    edx,[rcx+0x2]
  403fd4:	83 c1 03             	add    ecx,0x3
  403fd7:	83 e1 03             	and    ecx,0x3
  403fda:	83 e2 03             	and    edx,0x3
  403fdd:	0f b6 0c 08          	movzx  ecx,BYTE PTR [rax+rcx*1]
  403fe1:	0f b6 14 10          	movzx  edx,BYTE PTR [rax+rdx*1]
  403fe5:	c1 e1 18             	shl    ecx,0x18
  403fe8:	89 d6                	mov    esi,edx
  403fea:	0f b7 d3             	movzx  edx,bx
  403fed:	c1 e6 10             	shl    esi,0x10
  403ff0:	09 f2                	or     edx,esi
  403ff2:	09 ca                	or     edx,ecx
  403ff4:	89 10                	mov    DWORD PTR [rax],edx
  403ff6:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  403ffb:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  404002:	00 00 
  404004:	75 06                	jne    40400c <AES::ShiftRow(unsigned char (*) [4], unsigned int, unsigned int)+0x6c>
  404006:	48 83 c4 10          	add    rsp,0x10
  40400a:	5b                   	pop    rbx
  40400b:	c3                   	ret    
  40400c:	e8 af d9 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  404011:	90                   	nop
  404012:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  404016:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40401d:	00 00 00 

0000000000404020 <AES::ShiftRows(unsigned char (*) [4])>:
  404020:	48 83 ec 18          	sub    rsp,0x18
  404024:	31 d2                	xor    edx,edx
  404026:	8a 56 05             	mov    dl,BYTE PTR [rsi+0x5]
  404029:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  404030:	00 00 
  404032:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  404037:	31 c0                	xor    eax,eax
  404039:	0f b6 46 06          	movzx  eax,BYTE PTR [rsi+0x6]
  40403d:	88 c6                	mov    dh,al
  40403f:	0f b6 46 07          	movzx  eax,BYTE PTR [rsi+0x7]
  404043:	c1 e0 10             	shl    eax,0x10
  404046:	89 c1                	mov    ecx,eax
  404048:	0f b7 c2             	movzx  eax,dx
  40404b:	0f b6 56 04          	movzx  edx,BYTE PTR [rsi+0x4]
  40404f:	09 c8                	or     eax,ecx
  404051:	c1 e2 18             	shl    edx,0x18
  404054:	09 d0                	or     eax,edx
  404056:	31 d2                	xor    edx,edx
  404058:	8a 56 0a             	mov    dl,BYTE PTR [rsi+0xa]
  40405b:	89 46 04             	mov    DWORD PTR [rsi+0x4],eax
  40405e:	0f b6 46 0b          	movzx  eax,BYTE PTR [rsi+0xb]
  404062:	88 c6                	mov    dh,al
  404064:	0f b6 46 08          	movzx  eax,BYTE PTR [rsi+0x8]
  404068:	c1 e0 10             	shl    eax,0x10
  40406b:	89 c1                	mov    ecx,eax
  40406d:	0f b7 c2             	movzx  eax,dx
  404070:	0f b6 56 09          	movzx  edx,BYTE PTR [rsi+0x9]
  404074:	09 c8                	or     eax,ecx
  404076:	c1 e2 18             	shl    edx,0x18
  404079:	09 d0                	or     eax,edx
  40407b:	31 d2                	xor    edx,edx
  40407d:	8a 56 0f             	mov    dl,BYTE PTR [rsi+0xf]
  404080:	89 46 08             	mov    DWORD PTR [rsi+0x8],eax
  404083:	0f b6 46 0c          	movzx  eax,BYTE PTR [rsi+0xc]
  404087:	88 c6                	mov    dh,al
  404089:	0f b6 46 0d          	movzx  eax,BYTE PTR [rsi+0xd]
  40408d:	c1 e0 10             	shl    eax,0x10
  404090:	89 c1                	mov    ecx,eax
  404092:	0f b7 c2             	movzx  eax,dx
  404095:	0f b6 56 0e          	movzx  edx,BYTE PTR [rsi+0xe]
  404099:	09 c8                	or     eax,ecx
  40409b:	c1 e2 18             	shl    edx,0x18
  40409e:	09 d0                	or     eax,edx
  4040a0:	89 46 0c             	mov    DWORD PTR [rsi+0xc],eax
  4040a3:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  4040a8:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  4040af:	00 00 
  4040b1:	75 05                	jne    4040b8 <AES::ShiftRows(unsigned char (*) [4])+0x98>
  4040b3:	48 83 c4 18          	add    rsp,0x18
  4040b7:	c3                   	ret    
  4040b8:	e8 03 d9 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  4040bd:	90                   	nop
  4040be:	66 90                	xchg   ax,ax

00000000004040c0 <AES::xtime(unsigned char)>:
  4040c0:	89 f2                	mov    edx,esi
  4040c2:	01 f6                	add    esi,esi
  4040c4:	c0 ea 07             	shr    dl,0x7
  4040c7:	8d 04 12             	lea    eax,[rdx+rdx*1]
  4040ca:	01 d0                	add    eax,edx
  4040cc:	8d 04 c0             	lea    eax,[rax+rax*8]
  4040cf:	31 f0                	xor    eax,esi
  4040d1:	c3                   	ret    
  4040d2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4040d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4040dd:	00 00 00 

00000000004040e0 <AES::MixColumns(unsigned char (*) [4])>:
  4040e0:	48 83 ec 28          	sub    rsp,0x28
  4040e4:	48 8d 7c 24 10       	lea    rdi,[rsp+0x10]
  4040e9:	48 89 e2             	mov    rdx,rsp
  4040ec:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  4040f3:	00 00 
  4040f5:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  4040fa:	31 c0                	xor    eax,eax
  4040fc:	48 89 e0             	mov    rax,rsp
  4040ff:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
  404105:	48 83 c2 04          	add    rdx,0x4
  404109:	48 39 fa             	cmp    rdx,rdi
  40410c:	75 f1                	jne    4040ff <AES::MixColumns(unsigned char (*) [4])+0x1f>
  40410e:	b9 20 9b 40 00       	mov    ecx,0x409b20
  404113:	0f b6 11             	movzx  edx,BYTE PTR [rcx]
  404116:	80 fa 01             	cmp    dl,0x1
  404119:	0f 84 01 02 00 00    	je     404320 <AES::MixColumns(unsigned char (*) [4])+0x240>
  40411f:	44 0f b6 06          	movzx  r8d,BYTE PTR [rsi]
  404123:	48 c1 e2 08          	shl    rdx,0x8
  404127:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  40412e:	40 00 
  404130:	44 30 00             	xor    BYTE PTR [rax],r8b
  404133:	44 0f b6 46 01       	movzx  r8d,BYTE PTR [rsi+0x1]
  404138:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  40413f:	40 00 
  404141:	44 30 40 01          	xor    BYTE PTR [rax+0x1],r8b
  404145:	44 0f b6 46 02       	movzx  r8d,BYTE PTR [rsi+0x2]
  40414a:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  404151:	40 00 
  404153:	48 81 c2 40 9b 40 00 	add    rdx,0x409b40
  40415a:	44 30 40 02          	xor    BYTE PTR [rax+0x2],r8b
  40415e:	44 0f b6 46 03       	movzx  r8d,BYTE PTR [rsi+0x3]
  404163:	42 0f b6 14 02       	movzx  edx,BYTE PTR [rdx+r8*1]
  404168:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  40416b:	0f b6 51 01          	movzx  edx,BYTE PTR [rcx+0x1]
  40416f:	80 fa 01             	cmp    dl,0x1
  404172:	0f 84 88 01 00 00    	je     404300 <AES::MixColumns(unsigned char (*) [4])+0x220>
  404178:	44 0f b6 46 04       	movzx  r8d,BYTE PTR [rsi+0x4]
  40417d:	48 c1 e2 08          	shl    rdx,0x8
  404181:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  404188:	40 00 
  40418a:	44 30 00             	xor    BYTE PTR [rax],r8b
  40418d:	44 0f b6 46 05       	movzx  r8d,BYTE PTR [rsi+0x5]
  404192:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  404199:	40 00 
  40419b:	44 30 40 01          	xor    BYTE PTR [rax+0x1],r8b
  40419f:	44 0f b6 46 06       	movzx  r8d,BYTE PTR [rsi+0x6]
  4041a4:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  4041ab:	40 00 
  4041ad:	48 81 c2 40 9b 40 00 	add    rdx,0x409b40
  4041b4:	44 30 40 02          	xor    BYTE PTR [rax+0x2],r8b
  4041b8:	44 0f b6 46 07       	movzx  r8d,BYTE PTR [rsi+0x7]
  4041bd:	42 0f b6 14 02       	movzx  edx,BYTE PTR [rdx+r8*1]
  4041c2:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  4041c5:	0f b6 51 02          	movzx  edx,BYTE PTR [rcx+0x2]
  4041c9:	80 fa 01             	cmp    dl,0x1
  4041cc:	0f 84 06 01 00 00    	je     4042d8 <AES::MixColumns(unsigned char (*) [4])+0x1f8>
  4041d2:	44 0f b6 46 08       	movzx  r8d,BYTE PTR [rsi+0x8]
  4041d7:	48 c1 e2 08          	shl    rdx,0x8
  4041db:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  4041e2:	40 00 
  4041e4:	44 30 00             	xor    BYTE PTR [rax],r8b
  4041e7:	44 0f b6 46 09       	movzx  r8d,BYTE PTR [rsi+0x9]
  4041ec:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  4041f3:	40 00 
  4041f5:	44 30 40 01          	xor    BYTE PTR [rax+0x1],r8b
  4041f9:	44 0f b6 46 0a       	movzx  r8d,BYTE PTR [rsi+0xa]
  4041fe:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  404205:	40 00 
  404207:	48 81 c2 40 9b 40 00 	add    rdx,0x409b40
  40420e:	44 30 40 02          	xor    BYTE PTR [rax+0x2],r8b
  404212:	44 0f b6 46 0b       	movzx  r8d,BYTE PTR [rsi+0xb]
  404217:	42 0f b6 14 02       	movzx  edx,BYTE PTR [rdx+r8*1]
  40421c:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  40421f:	0f b6 51 03          	movzx  edx,BYTE PTR [rcx+0x3]
  404223:	80 fa 01             	cmp    dl,0x1
  404226:	0f 84 8c 00 00 00    	je     4042b8 <AES::MixColumns(unsigned char (*) [4])+0x1d8>
  40422c:	44 0f b6 46 0c       	movzx  r8d,BYTE PTR [rsi+0xc]
  404231:	48 c1 e2 08          	shl    rdx,0x8
  404235:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  40423c:	40 00 
  40423e:	44 30 00             	xor    BYTE PTR [rax],r8b
  404241:	44 0f b6 46 0d       	movzx  r8d,BYTE PTR [rsi+0xd]
  404246:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  40424d:	40 00 
  40424f:	44 30 40 01          	xor    BYTE PTR [rax+0x1],r8b
  404253:	44 0f b6 46 0e       	movzx  r8d,BYTE PTR [rsi+0xe]
  404258:	46 0f b6 84 02 40 9b 	movzx  r8d,BYTE PTR [rdx+r8*1+0x409b40]
  40425f:	40 00 
  404261:	48 81 c2 40 9b 40 00 	add    rdx,0x409b40
  404268:	44 30 40 02          	xor    BYTE PTR [rax+0x2],r8b
  40426c:	44 0f b6 46 0f       	movzx  r8d,BYTE PTR [rsi+0xf]
  404271:	42 0f b6 14 02       	movzx  edx,BYTE PTR [rdx+r8*1]
  404276:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  404279:	48 83 c0 04          	add    rax,0x4
  40427d:	48 83 c1 04          	add    rcx,0x4
  404281:	48 39 c7             	cmp    rdi,rax
  404284:	0f 85 89 fe ff ff    	jne    404113 <AES::MixColumns(unsigned char (*) [4])+0x33>
  40428a:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40428e:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  404293:	48 89 06             	mov    QWORD PTR [rsi],rax
  404296:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
  40429b:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  4042a2:	00 00 
  4042a4:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
  4042a8:	0f 85 91 00 00 00    	jne    40433f <AES::MixColumns(unsigned char (*) [4])+0x25f>
  4042ae:	48 83 c4 28          	add    rsp,0x28
  4042b2:	c3                   	ret    
  4042b3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  4042b8:	0f b6 56 0c          	movzx  edx,BYTE PTR [rsi+0xc]
  4042bc:	30 10                	xor    BYTE PTR [rax],dl
  4042be:	0f b6 56 0d          	movzx  edx,BYTE PTR [rsi+0xd]
  4042c2:	30 50 01             	xor    BYTE PTR [rax+0x1],dl
  4042c5:	0f b6 56 0e          	movzx  edx,BYTE PTR [rsi+0xe]
  4042c9:	30 50 02             	xor    BYTE PTR [rax+0x2],dl
  4042cc:	0f b6 56 0f          	movzx  edx,BYTE PTR [rsi+0xf]
  4042d0:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  4042d3:	eb a4                	jmp    404279 <AES::MixColumns(unsigned char (*) [4])+0x199>
  4042d5:	0f 1f 00             	nop    DWORD PTR [rax]
  4042d8:	0f b6 56 08          	movzx  edx,BYTE PTR [rsi+0x8]
  4042dc:	30 10                	xor    BYTE PTR [rax],dl
  4042de:	0f b6 56 09          	movzx  edx,BYTE PTR [rsi+0x9]
  4042e2:	30 50 01             	xor    BYTE PTR [rax+0x1],dl
  4042e5:	0f b6 56 0a          	movzx  edx,BYTE PTR [rsi+0xa]
  4042e9:	30 50 02             	xor    BYTE PTR [rax+0x2],dl
  4042ec:	0f b6 56 0b          	movzx  edx,BYTE PTR [rsi+0xb]
  4042f0:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  4042f3:	e9 27 ff ff ff       	jmp    40421f <AES::MixColumns(unsigned char (*) [4])+0x13f>
  4042f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4042ff:	00 
  404300:	0f b6 56 04          	movzx  edx,BYTE PTR [rsi+0x4]
  404304:	30 10                	xor    BYTE PTR [rax],dl
  404306:	0f b6 56 05          	movzx  edx,BYTE PTR [rsi+0x5]
  40430a:	30 50 01             	xor    BYTE PTR [rax+0x1],dl
  40430d:	0f b6 56 06          	movzx  edx,BYTE PTR [rsi+0x6]
  404311:	30 50 02             	xor    BYTE PTR [rax+0x2],dl
  404314:	0f b6 56 07          	movzx  edx,BYTE PTR [rsi+0x7]
  404318:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  40431b:	e9 a5 fe ff ff       	jmp    4041c5 <AES::MixColumns(unsigned char (*) [4])+0xe5>
  404320:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
  404323:	30 10                	xor    BYTE PTR [rax],dl
  404325:	0f b6 56 01          	movzx  edx,BYTE PTR [rsi+0x1]
  404329:	30 50 01             	xor    BYTE PTR [rax+0x1],dl
  40432c:	0f b6 56 02          	movzx  edx,BYTE PTR [rsi+0x2]
  404330:	30 50 02             	xor    BYTE PTR [rax+0x2],dl
  404333:	0f b6 56 03          	movzx  edx,BYTE PTR [rsi+0x3]
  404337:	30 50 03             	xor    BYTE PTR [rax+0x3],dl
  40433a:	e9 2c fe ff ff       	jmp    40416b <AES::MixColumns(unsigned char (*) [4])+0x8b>
  40433f:	e8 7c d6 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  404344:	66 90                	xchg   ax,ax
  404346:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40434d:	00 00 00 

0000000000404350 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)>:
  404350:	41 57                	push   r15
  404352:	41 56                	push   r14
  404354:	49 89 f0             	mov    r8,rsi
  404357:	41 55                	push   r13
  404359:	41 54                	push   r12
  40435b:	49 89 ce             	mov    r14,rcx
  40435e:	55                   	push   rbp
  40435f:	53                   	push   rbx
  404360:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
  404367:	45 0f b6 48 09       	movzx  r9d,BYTE PTR [r8+0x9]
  40436c:	45 0f b6 78 06       	movzx  r15d,BYTE PTR [r8+0x6]
  404371:	45 0f b6 50 0d       	movzx  r10d,BYTE PTR [r8+0xd]
  404376:	41 0f b6 68 0a       	movzx  ebp,BYTE PTR [r8+0xa]
  40437b:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  404382:	00 00 
  404384:	48 89 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],rax
  40438b:	00 
  40438c:	31 c0                	xor    eax,eax
  40438e:	0f b6 4e 04          	movzx  ecx,BYTE PTR [rsi+0x4]
  404392:	41 0f b6 40 01       	movzx  eax,BYTE PTR [r8+0x1]
  404397:	44 88 4c 24 30       	mov    BYTE PTR [rsp+0x30],r9b
  40439c:	45 0f b6 48 0e       	movzx  r9d,BYTE PTR [r8+0xe]
  4043a1:	44 88 7c 24 40       	mov    BYTE PTR [rsp+0x40],r15b
  4043a6:	45 0f b6 78 03       	movzx  r15d,BYTE PTR [r8+0x3]
  4043ab:	45 0f b6 58 02       	movzx  r11d,BYTE PTR [r8+0x2]
  4043b0:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
  4043b5:	48 89 54 24 78       	mov    QWORD PTR [rsp+0x78],rdx
  4043ba:	41 0f b6 78 05       	movzx  edi,BYTE PTR [r8+0x5]
  4043bf:	44 88 4c 24 68       	mov    BYTE PTR [rsp+0x68],r9b
  4043c4:	45 0f b6 48 0b       	movzx  r9d,BYTE PTR [r8+0xb]
  4043c9:	0f b6 56 08          	movzx  edx,BYTE PTR [rsi+0x8]
  4043cd:	44 88 3c 24          	mov    BYTE PTR [rsp],r15b
  4043d1:	0f b6 76 0c          	movzx  esi,BYTE PTR [rsi+0xc]
  4043d5:	45 0f b6 78 07       	movzx  r15d,BYTE PTR [r8+0x7]
  4043da:	44 88 4c 24 58       	mov    BYTE PTR [rsp+0x58],r9b
  4043df:	45 0f b6 48 0f       	movzx  r9d,BYTE PTR [r8+0xf]
  4043e4:	44 88 4c 24 63       	mov    BYTE PTR [rsp+0x63],r9b
  4043e9:	45 0f b6 0e          	movzx  r9d,BYTE PTR [r14]
  4043ed:	45 32 08             	xor    r9b,BYTE PTR [r8]
  4043f0:	44 0f b6 44 24 30    	movzx  r8d,BYTE PTR [rsp+0x30]
  4043f6:	41 32 7e 05          	xor    dil,BYTE PTR [r14+0x5]
  4043fa:	45 32 46 09          	xor    r8b,BYTE PTR [r14+0x9]
  4043fe:	45 32 5e 02          	xor    r11b,BYTE PTR [r14+0x2]
  404402:	41 32 4e 04          	xor    cl,BYTE PTR [r14+0x4]
  404406:	41 32 56 08          	xor    dl,BYTE PTR [r14+0x8]
  40440a:	41 32 76 0c          	xor    sil,BYTE PTR [r14+0xc]
  40440e:	41 32 46 01          	xor    al,BYTE PTR [r14+0x1]
  404412:	44 88 8c 24 80 00 00 	mov    BYTE PTR [rsp+0x80],r9b
  404419:	00 
  40441a:	40 88 7c 24 20       	mov    BYTE PTR [rsp+0x20],dil
  40441f:	40 88 bc 24 85 00 00 	mov    BYTE PTR [rsp+0x85],dil
  404426:	00 
  404427:	44 89 c7             	mov    edi,r8d
  40442a:	44 88 84 24 86 00 00 	mov    BYTE PTR [rsp+0x86],r8b
  404431:	00 
  404432:	45 89 d0             	mov    r8d,r10d
  404435:	44 0f b6 54 24 40    	movzx  r10d,BYTE PTR [rsp+0x40]
  40443b:	45 32 56 06          	xor    r10b,BYTE PTR [r14+0x6]
  40443f:	45 32 46 0d          	xor    r8b,BYTE PTR [r14+0xd]
  404443:	44 88 5c 24 30       	mov    BYTE PTR [rsp+0x30],r11b
  404448:	44 88 9c 24 88 00 00 	mov    BYTE PTR [rsp+0x88],r11b
  40444f:	00 
  404450:	41 89 eb             	mov    r11d,ebp
  404453:	45 32 5e 0a          	xor    r11b,BYTE PTR [r14+0xa]
  404457:	44 89 fd             	mov    ebp,r15d
  40445a:	88 8c 24 81 00 00 00 	mov    BYTE PTR [rsp+0x81],cl
  404461:	88 94 24 82 00 00 00 	mov    BYTE PTR [rsp+0x82],dl
  404468:	40 88 b4 24 83 00 00 	mov    BYTE PTR [rsp+0x83],sil
  40446f:	00 
  404470:	44 88 54 24 50       	mov    BYTE PTR [rsp+0x50],r10b
  404475:	44 88 94 24 89 00 00 	mov    BYTE PTR [rsp+0x89],r10b
  40447c:	00 
  40447d:	44 0f b6 54 24 68    	movzx  r10d,BYTE PTR [rsp+0x68]
  404483:	44 88 44 24 64       	mov    BYTE PTR [rsp+0x64],r8b
  404488:	45 32 56 0e          	xor    r10b,BYTE PTR [r14+0xe]
  40448c:	44 88 84 24 87 00 00 	mov    BYTE PTR [rsp+0x87],r8b
  404493:	00 
  404494:	88 84 24 84 00 00 00 	mov    BYTE PTR [rsp+0x84],al
  40449b:	44 88 9c 24 8a 00 00 	mov    BYTE PTR [rsp+0x8a],r11b
  4044a2:	00 
  4044a3:	44 88 54 24 40       	mov    BYTE PTR [rsp+0x40],r10b
  4044a8:	44 88 94 24 8b 00 00 	mov    BYTE PTR [rsp+0x8b],r10b
  4044af:	00 
  4044b0:	44 0f b6 14 24       	movzx  r10d,BYTE PTR [rsp]
  4044b5:	41 32 6e 07          	xor    bpl,BYTE PTR [r14+0x7]
  4044b9:	44 0f b6 7c 24 58    	movzx  r15d,BYTE PTR [rsp+0x58]
  4044bf:	45 32 56 03          	xor    r10b,BYTE PTR [r14+0x3]
  4044c3:	45 32 7e 0b          	xor    r15b,BYTE PTR [r14+0xb]
  4044c7:	41 89 e8             	mov    r8d,ebp
  4044ca:	40 88 ac 24 8d 00 00 	mov    BYTE PTR [rsp+0x8d],bpl
  4044d1:	00 
  4044d2:	48 8b 6c 24 18       	mov    rbp,QWORD PTR [rsp+0x18]
  4044d7:	44 88 94 24 8c 00 00 	mov    BYTE PTR [rsp+0x8c],r10b
  4044de:	00 
  4044df:	44 88 7c 24 58       	mov    BYTE PTR [rsp+0x58],r15b
  4044e4:	44 88 bc 24 8e 00 00 	mov    BYTE PTR [rsp+0x8e],r15b
  4044eb:	00 
  4044ec:	44 0f b6 7c 24 63    	movzx  r15d,BYTE PTR [rsp+0x63]
  4044f2:	8b 6d 04             	mov    ebp,DWORD PTR [rbp+0x4]
  4044f5:	45 32 7e 0f          	xor    r15b,BYTE PTR [r14+0xf]
  4044f9:	83 fd 01             	cmp    ebp,0x1
  4044fc:	44 88 bc 24 8f 00 00 	mov    BYTE PTR [rsp+0x8f],r15b
  404503:	00 
  404504:	0f 84 55 04 00 00    	je     40495f <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)+0x60f>
  40450a:	44 88 44 24 63       	mov    BYTE PTR [rsp+0x63],r8b
  40450f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [rsp],0x1
  404516:	44 89 d5             	mov    ebp,r10d
  404519:	44 0f b6 44 24 64    	movzx  r8d,BYTE PTR [rsp+0x64]
  40451f:	44 89 64 24 64       	mov    DWORD PTR [rsp+0x64],r12d
  404524:	41 89 dc             	mov    r12d,ebx
  404527:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40452e:	00 00 
  404530:	4d 89 ca             	mov    r10,r9
  404533:	41 c0 e9 04          	shr    r9b,0x4
  404537:	41 83 e1 0f          	and    r9d,0xf
  40453b:	41 83 e2 0f          	and    r10d,0xf
  40453f:	49 c1 e1 04          	shl    r9,0x4
  404543:	47 0f b6 8c 0a 40 ab 	movzx  r9d,BYTE PTR [r10+r9*1+0x40ab40]
  40454a:	40 00 
  40454c:	44 88 8c 24 80 00 00 	mov    BYTE PTR [rsp+0x80],r9b
  404553:	00 
  404554:	49 89 c9             	mov    r9,rcx
  404557:	c0 e9 04             	shr    cl,0x4
  40455a:	83 e1 0f             	and    ecx,0xf
  40455d:	41 83 e1 0f          	and    r9d,0xf
  404561:	48 c1 e1 04          	shl    rcx,0x4
  404565:	41 0f b6 8c 09 40 ab 	movzx  ecx,BYTE PTR [r9+rcx*1+0x40ab40]
  40456c:	40 00 
  40456e:	88 8c 24 81 00 00 00 	mov    BYTE PTR [rsp+0x81],cl
  404575:	48 89 d1             	mov    rcx,rdx
  404578:	c0 ea 04             	shr    dl,0x4
  40457b:	83 e2 0f             	and    edx,0xf
  40457e:	83 e1 0f             	and    ecx,0xf
  404581:	48 c1 e2 04          	shl    rdx,0x4
  404585:	0f b6 94 11 40 ab 40 	movzx  edx,BYTE PTR [rcx+rdx*1+0x40ab40]
  40458c:	00 
  40458d:	48 89 c1             	mov    rcx,rax
  404590:	c0 e8 04             	shr    al,0x4
  404593:	83 e0 0f             	and    eax,0xf
  404596:	83 e1 0f             	and    ecx,0xf
  404599:	48 c1 e0 04          	shl    rax,0x4
  40459d:	48 89 4c 24 68       	mov    QWORD PTR [rsp+0x68],rcx
  4045a2:	4c 89 d9             	mov    rcx,r11
  4045a5:	49 89 c2             	mov    r10,rax
  4045a8:	48 89 f8             	mov    rax,rdi
  4045ab:	40 c0 ef 04          	shr    dil,0x4
  4045af:	88 94 24 82 00 00 00 	mov    BYTE PTR [rsp+0x82],dl
  4045b6:	48 89 f2             	mov    rdx,rsi
  4045b9:	40 c0 ee 04          	shr    sil,0x4
  4045bd:	83 e6 0f             	and    esi,0xf
  4045c0:	83 e2 0f             	and    edx,0xf
  4045c3:	83 e7 0f             	and    edi,0xf
  4045c6:	48 c1 e6 04          	shl    rsi,0x4
  4045ca:	83 e0 0f             	and    eax,0xf
  4045cd:	48 c1 e7 04          	shl    rdi,0x4
  4045d1:	0f b6 94 32 40 ab 40 	movzx  edx,BYTE PTR [rdx+rsi*1+0x40ab40]
  4045d8:	00 
  4045d9:	0f b6 74 24 30       	movzx  esi,BYTE PTR [rsp+0x30]
  4045de:	88 94 24 83 00 00 00 	mov    BYTE PTR [rsp+0x83],dl
  4045e5:	0f b6 94 38 40 ab 40 	movzx  edx,BYTE PTR [rax+rdi*1+0x40ab40]
  4045ec:	00 
  4045ed:	48 89 f7             	mov    rdi,rsi
  4045f0:	40 c0 ee 04          	shr    sil,0x4
  4045f4:	83 e7 0f             	and    edi,0xf
  4045f7:	4c 89 c0             	mov    rax,r8
  4045fa:	83 e6 0f             	and    esi,0xf
  4045fd:	41 c0 e8 04          	shr    r8b,0x4
  404601:	83 e0 0f             	and    eax,0xf
  404604:	48 c1 e6 04          	shl    rsi,0x4
  404608:	41 83 e0 0f          	and    r8d,0xf
  40460c:	48 89 44 24 70       	mov    QWORD PTR [rsp+0x70],rax
  404611:	44 0f b6 8c 37 40 ab 	movzx  r9d,BYTE PTR [rdi+rsi*1+0x40ab40]
  404618:	40 00 
  40461a:	0f b6 74 24 50       	movzx  esi,BYTE PTR [rsp+0x50]
  40461f:	49 c1 e0 04          	shl    r8,0x4
  404623:	4c 89 c3             	mov    rbx,r8
  404626:	8b 44 24 64          	mov    eax,DWORD PTR [rsp+0x64]
  40462a:	48 89 f7             	mov    rdi,rsi
  40462d:	83 e7 0f             	and    edi,0xf
  404630:	40 c0 ee 04          	shr    sil,0x4
  404634:	41 c0 eb 04          	shr    r11b,0x4
  404638:	83 e6 0f             	and    esi,0xf
  40463b:	41 83 e3 0f          	and    r11d,0xf
  40463f:	83 e1 0f             	and    ecx,0xf
  404642:	48 c1 e6 04          	shl    rsi,0x4
  404646:	49 c1 e3 04          	shl    r11,0x4
  40464a:	0f b6 bc 37 40 ab 40 	movzx  edi,BYTE PTR [rdi+rsi*1+0x40ab40]
  404651:	00 
  404652:	0f b6 74 24 40       	movzx  esi,BYTE PTR [rsp+0x40]
  404657:	46 0f b6 84 19 40 ab 	movzx  r8d,BYTE PTR [rcx+r11*1+0x40ab40]
  40465e:	40 00 
  404660:	48 89 f1             	mov    rcx,rsi
  404663:	40 c0 ee 04          	shr    sil,0x4
  404667:	83 e6 0f             	and    esi,0xf
  40466a:	83 e1 0f             	and    ecx,0xf
  40466d:	45 88 c4             	mov    r12b,r8b
  404670:	48 c1 e6 04          	shl    rsi,0x4
  404674:	0f b6 b4 31 40 ab 40 	movzx  esi,BYTE PTR [rcx+rsi*1+0x40ab40]
  40467b:	00 
  40467c:	48 89 e9             	mov    rcx,rbp
  40467f:	83 e1 0f             	and    ecx,0xf
  404682:	40 88 74 24 30       	mov    BYTE PTR [rsp+0x30],sil
  404687:	89 ee                	mov    esi,ebp
  404689:	40 c0 ee 04          	shr    sil,0x4
  40468d:	83 e6 0f             	and    esi,0xf
  404690:	48 c1 e6 04          	shl    rsi,0x4
  404694:	44 0f b6 9c 31 40 ab 	movzx  r11d,BYTE PTR [rcx+rsi*1+0x40ab40]
  40469b:	40 00 
  40469d:	0f b6 74 24 63       	movzx  esi,BYTE PTR [rsp+0x63]
  4046a2:	44 88 5c 24 40       	mov    BYTE PTR [rsp+0x40],r11b
  4046a7:	44 0f b6 5c 24 58    	movzx  r11d,BYTE PTR [rsp+0x58]
  4046ad:	48 89 f1             	mov    rcx,rsi
  4046b0:	40 c0 ee 04          	shr    sil,0x4
  4046b4:	83 e1 0f             	and    ecx,0xf
  4046b7:	83 e6 0f             	and    esi,0xf
  4046ba:	48 c1 e6 04          	shl    rsi,0x4
  4046be:	0f b6 8c 31 40 ab 40 	movzx  ecx,BYTE PTR [rcx+rsi*1+0x40ab40]
  4046c5:	00 
  4046c6:	4c 89 de             	mov    rsi,r11
  4046c9:	41 c0 eb 04          	shr    r11b,0x4
  4046cd:	41 83 e3 0f          	and    r11d,0xf
  4046d1:	83 e6 0f             	and    esi,0xf
  4046d4:	49 c1 e3 04          	shl    r11,0x4
  4046d8:	46 0f b6 9c 1e 40 ab 	movzx  r11d,BYTE PTR [rsi+r11*1+0x40ab40]
  4046df:	40 00 
  4046e1:	4c 89 fe             	mov    rsi,r15
  4046e4:	41 c0 ef 04          	shr    r15b,0x4
  4046e8:	41 83 e7 0f          	and    r15d,0xf
  4046ec:	83 e6 0f             	and    esi,0xf
  4046ef:	49 c1 e7 04          	shl    r15,0x4
  4046f3:	42 0f b6 ac 3e 40 ab 	movzx  ebp,BYTE PTR [rsi+r15*1+0x40ab40]
  4046fa:	40 00 
  4046fc:	0f b6 74 24 20       	movzx  esi,BYTE PTR [rsp+0x20]
  404701:	49 89 f7             	mov    r15,rsi
  404704:	40 c0 ee 04          	shr    sil,0x4
  404708:	41 88 ed             	mov    r13b,bpl
  40470b:	83 e6 0f             	and    esi,0xf
  40470e:	41 83 e7 0f          	and    r15d,0xf
  404712:	48 c1 e6 04          	shl    rsi,0x4
  404716:	41 8a 84 37 40 ab 40 	mov    al,BYTE PTR [r15+rsi*1+0x40ab40]
  40471d:	00 
  40471e:	88 d4                	mov    ah,dl
  404720:	48 89 c6             	mov    rsi,rax
  404723:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
  404728:	0f b7 d6             	movzx  edx,si
  40472b:	0f b6 84 18 40 ab 40 	movzx  eax,BYTE PTR [rax+rbx*1+0x40ab40]
  404732:	00 
  404733:	48 8b 5c 24 68       	mov    rbx,QWORD PTR [rsp+0x68]
  404738:	42 0f b6 9c 13 40 ab 	movzx  ebx,BYTE PTR [rbx+r10*1+0x40ab40]
  40473f:	40 00 
  404741:	c1 e0 10             	shl    eax,0x10
  404744:	c1 e7 18             	shl    edi,0x18
  404747:	c1 e1 10             	shl    ecx,0x10
  40474a:	41 c1 e3 18          	shl    r11d,0x18
  40474e:	c1 e3 18             	shl    ebx,0x18
  404751:	89 de                	mov    esi,ebx
  404753:	89 d3                	mov    ebx,edx
  404755:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
  40475a:	09 c3                	or     ebx,eax
  40475c:	4c 89 e0             	mov    rax,r12
  40475f:	09 f3                	or     ebx,esi
  404761:	48 8d b4 24 80 00 00 	lea    rsi,[rsp+0x80]
  404768:	00 
  404769:	88 d4                	mov    ah,dl
  40476b:	48 8b 54 24 40       	mov    rdx,QWORD PTR [rsp+0x40]
  404770:	89 5c 24 64          	mov    DWORD PTR [rsp+0x64],ebx
  404774:	49 89 c4             	mov    r12,rax
  404777:	41 0f b6 c1          	movzx  eax,r9b
  40477b:	89 9c 24 84 00 00 00 	mov    DWORD PTR [rsp+0x84],ebx
  404782:	c1 e0 10             	shl    eax,0x10
  404785:	45 0f b7 e4          	movzx  r12d,r12w
  404789:	41 09 c4             	or     r12d,eax
  40478c:	4c 89 e8             	mov    rax,r13
  40478f:	88 d4                	mov    ah,dl
  404791:	41 09 fc             	or     r12d,edi
  404794:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
  404799:	44 0f b7 e8          	movzx  r13d,ax
  40479d:	44 89 a4 24 88 00 00 	mov    DWORD PTR [rsp+0x88],r12d
  4047a4:	00 
  4047a5:	44 09 e9             	or     ecx,r13d
  4047a8:	44 09 d9             	or     ecx,r11d
  4047ab:	41 89 cd             	mov    r13d,ecx
  4047ae:	89 8c 24 8c 00 00 00 	mov    DWORD PTR [rsp+0x8c],ecx
  4047b5:	e8 26 f9 ff ff       	call   4040e0 <AES::MixColumns(unsigned char (*) [4])>
  4047ba:	8b 1c 24             	mov    ebx,DWORD PTR [rsp]
  4047bd:	41 89 da             	mov    r10d,ebx
  4047c0:	41 c1 e2 04          	shl    r10d,0x4
  4047c4:	43 0f b6 7c 16 05    	movzx  edi,BYTE PTR [r14+r10*1+0x5]
  4047ca:	47 0f b6 5c 16 02    	movzx  r11d,BYTE PTR [r14+r10*1+0x2]
  4047d0:	40 32 bc 24 85 00 00 	xor    dil,BYTE PTR [rsp+0x85]
  4047d7:	00 
  4047d8:	44 32 9c 24 88 00 00 	xor    r11b,BYTE PTR [rsp+0x88]
  4047df:	00 
  4047e0:	47 0f b6 0c 16       	movzx  r9d,BYTE PTR [r14+r10*1]
  4047e5:	43 0f b6 4c 16 04    	movzx  ecx,BYTE PTR [r14+r10*1+0x4]
  4047eb:	43 0f b6 54 16 08    	movzx  edx,BYTE PTR [r14+r10*1+0x8]
  4047f1:	43 0f b6 74 16 0c    	movzx  esi,BYTE PTR [r14+r10*1+0xc]
  4047f7:	43 0f b6 44 16 01    	movzx  eax,BYTE PTR [r14+r10*1+0x1]
  4047fd:	47 0f b6 44 16 0d    	movzx  r8d,BYTE PTR [r14+r10*1+0xd]
  404803:	40 88 7c 24 20       	mov    BYTE PTR [rsp+0x20],dil
  404808:	40 88 bc 24 85 00 00 	mov    BYTE PTR [rsp+0x85],dil
  40480f:	00 
  404810:	44 88 5c 24 30       	mov    BYTE PTR [rsp+0x30],r11b
  404815:	43 0f b6 7c 16 09    	movzx  edi,BYTE PTR [r14+r10*1+0x9]
  40481b:	44 88 9c 24 88 00 00 	mov    BYTE PTR [rsp+0x88],r11b
  404822:	00 
  404823:	47 0f b6 5c 16 06    	movzx  r11d,BYTE PTR [r14+r10*1+0x6]
  404829:	44 32 9c 24 89 00 00 	xor    r11b,BYTE PTR [rsp+0x89]
  404830:	00 
  404831:	44 32 8c 24 80 00 00 	xor    r9b,BYTE PTR [rsp+0x80]
  404838:	00 
  404839:	32 8c 24 81 00 00 00 	xor    cl,BYTE PTR [rsp+0x81]
  404840:	32 94 24 82 00 00 00 	xor    dl,BYTE PTR [rsp+0x82]
  404847:	40 32 b4 24 83 00 00 	xor    sil,BYTE PTR [rsp+0x83]
  40484e:	00 
  40484f:	32 84 24 84 00 00 00 	xor    al,BYTE PTR [rsp+0x84]
  404856:	40 32 bc 24 86 00 00 	xor    dil,BYTE PTR [rsp+0x86]
  40485d:	00 
  40485e:	44 32 84 24 87 00 00 	xor    r8b,BYTE PTR [rsp+0x87]
  404865:	00 
  404866:	44 88 8c 24 80 00 00 	mov    BYTE PTR [rsp+0x80],r9b
  40486d:	00 
  40486e:	88 8c 24 81 00 00 00 	mov    BYTE PTR [rsp+0x81],cl
  404875:	88 94 24 82 00 00 00 	mov    BYTE PTR [rsp+0x82],dl
  40487c:	40 88 b4 24 83 00 00 	mov    BYTE PTR [rsp+0x83],sil
  404883:	00 
  404884:	88 84 24 84 00 00 00 	mov    BYTE PTR [rsp+0x84],al
  40488b:	40 88 bc 24 86 00 00 	mov    BYTE PTR [rsp+0x86],dil
  404892:	00 
  404893:	44 88 84 24 87 00 00 	mov    BYTE PTR [rsp+0x87],r8b
  40489a:	00 
  40489b:	44 88 5c 24 50       	mov    BYTE PTR [rsp+0x50],r11b
  4048a0:	47 0f b6 7c 16 07    	movzx  r15d,BYTE PTR [r14+r10*1+0x7]
  4048a6:	44 32 bc 24 8d 00 00 	xor    r15b,BYTE PTR [rsp+0x8d]
  4048ad:	00 
  4048ae:	43 0f b6 6c 16 0e    	movzx  ebp,BYTE PTR [r14+r10*1+0xe]
  4048b4:	40 32 ac 24 8b 00 00 	xor    bpl,BYTE PTR [rsp+0x8b]
  4048bb:	00 
  4048bc:	44 88 9c 24 89 00 00 	mov    BYTE PTR [rsp+0x89],r11b
  4048c3:	00 
  4048c4:	47 0f b6 5c 16 0a    	movzx  r11d,BYTE PTR [r14+r10*1+0xa]
  4048ca:	44 32 9c 24 8a 00 00 	xor    r11b,BYTE PTR [rsp+0x8a]
  4048d1:	00 
  4048d2:	44 88 7c 24 63       	mov    BYTE PTR [rsp+0x63],r15b
  4048d7:	44 88 bc 24 8d 00 00 	mov    BYTE PTR [rsp+0x8d],r15b
  4048de:	00 
  4048df:	47 0f b6 7c 16 0b    	movzx  r15d,BYTE PTR [r14+r10*1+0xb]
  4048e5:	40 88 6c 24 40       	mov    BYTE PTR [rsp+0x40],bpl
  4048ea:	44 32 bc 24 8e 00 00 	xor    r15b,BYTE PTR [rsp+0x8e]
  4048f1:	00 
  4048f2:	40 88 ac 24 8b 00 00 	mov    BYTE PTR [rsp+0x8b],bpl
  4048f9:	00 
  4048fa:	43 0f b6 6c 16 03    	movzx  ebp,BYTE PTR [r14+r10*1+0x3]
  404900:	44 88 9c 24 8a 00 00 	mov    BYTE PTR [rsp+0x8a],r11b
  404907:	00 
  404908:	40 32 ac 24 8c 00 00 	xor    bpl,BYTE PTR [rsp+0x8c]
  40490f:	00 
  404910:	44 88 7c 24 58       	mov    BYTE PTR [rsp+0x58],r15b
  404915:	44 88 bc 24 8e 00 00 	mov    BYTE PTR [rsp+0x8e],r15b
  40491c:	00 
  40491d:	47 0f b6 7c 16 0f    	movzx  r15d,BYTE PTR [r14+r10*1+0xf]
  404923:	41 89 da             	mov    r10d,ebx
  404926:	41 83 c2 01          	add    r10d,0x1
  40492a:	44 32 bc 24 8f 00 00 	xor    r15b,BYTE PTR [rsp+0x8f]
  404931:	00 
  404932:	40 88 ac 24 8c 00 00 	mov    BYTE PTR [rsp+0x8c],bpl
  404939:	00 
  40493a:	44 89 14 24          	mov    DWORD PTR [rsp],r10d
  40493e:	4c 8b 54 24 18       	mov    r10,QWORD PTR [rsp+0x18]
  404943:	45 8b 52 04          	mov    r10d,DWORD PTR [r10+0x4]
  404947:	44 88 bc 24 8f 00 00 	mov    BYTE PTR [rsp+0x8f],r15b
  40494e:	00 
  40494f:	41 8d 5a ff          	lea    ebx,[r10-0x1]
  404953:	3b 1c 24             	cmp    ebx,DWORD PTR [rsp]
  404956:	0f 83 d4 fb ff ff    	jae    404530 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)+0x1e0>
  40495c:	44 89 d5             	mov    ebp,r10d
  40495f:	0f b6 84 24 80 00 00 	movzx  eax,BYTE PTR [rsp+0x80]
  404966:	00 
  404967:	48 89 c2             	mov    rdx,rax
  40496a:	c0 e8 04             	shr    al,0x4
  40496d:	83 e0 0f             	and    eax,0xf
  404970:	83 e2 0f             	and    edx,0xf
  404973:	48 c1 e0 04          	shl    rax,0x4
  404977:	44 0f b6 84 02 40 ab 	movzx  r8d,BYTE PTR [rdx+rax*1+0x40ab40]
  40497e:	40 00 
  404980:	0f b6 84 24 81 00 00 	movzx  eax,BYTE PTR [rsp+0x81]
  404987:	00 
  404988:	48 89 c2             	mov    rdx,rax
  40498b:	c0 e8 04             	shr    al,0x4
  40498e:	83 e0 0f             	and    eax,0xf
  404991:	83 e2 0f             	and    edx,0xf
  404994:	48 c1 e0 04          	shl    rax,0x4
  404998:	0f b6 bc 02 40 ab 40 	movzx  edi,BYTE PTR [rdx+rax*1+0x40ab40]
  40499f:	00 
  4049a0:	0f b6 84 24 82 00 00 	movzx  eax,BYTE PTR [rsp+0x82]
  4049a7:	00 
  4049a8:	48 89 c2             	mov    rdx,rax
  4049ab:	c0 e8 04             	shr    al,0x4
  4049ae:	83 e0 0f             	and    eax,0xf
  4049b1:	83 e2 0f             	and    edx,0xf
  4049b4:	48 c1 e0 04          	shl    rax,0x4
  4049b8:	0f b6 b4 02 40 ab 40 	movzx  esi,BYTE PTR [rdx+rax*1+0x40ab40]
  4049bf:	00 
  4049c0:	0f b6 84 24 83 00 00 	movzx  eax,BYTE PTR [rsp+0x83]
  4049c7:	00 
  4049c8:	48 89 c2             	mov    rdx,rax
  4049cb:	c0 e8 04             	shr    al,0x4
  4049ce:	83 e0 0f             	and    eax,0xf
  4049d1:	83 e2 0f             	and    edx,0xf
  4049d4:	48 c1 e0 04          	shl    rax,0x4
  4049d8:	0f b6 8c 02 40 ab 40 	movzx  ecx,BYTE PTR [rdx+rax*1+0x40ab40]
  4049df:	00 
  4049e0:	0f b6 94 24 86 00 00 	movzx  edx,BYTE PTR [rsp+0x86]
  4049e7:	00 
  4049e8:	0f b6 84 24 84 00 00 	movzx  eax,BYTE PTR [rsp+0x84]
  4049ef:	00 
  4049f0:	49 89 d1             	mov    r9,rdx
  4049f3:	c0 ea 04             	shr    dl,0x4
  4049f6:	83 e2 0f             	and    edx,0xf
  4049f9:	41 83 e1 0f          	and    r9d,0xf
  4049fd:	48 89 c3             	mov    rbx,rax
  404a00:	48 c1 e2 04          	shl    rdx,0x4
  404a04:	c0 e8 04             	shr    al,0x4
  404a07:	83 e3 0f             	and    ebx,0xf
  404a0a:	41 0f b6 94 11 40 ab 	movzx  edx,BYTE PTR [r9+rdx*1+0x40ab40]
  404a11:	40 00 
  404a13:	83 e0 0f             	and    eax,0xf
  404a16:	48 89 5c 24 50       	mov    QWORD PTR [rsp+0x50],rbx
  404a1b:	48 c1 e0 04          	shl    rax,0x4
  404a1f:	49 89 c4             	mov    r12,rax
  404a22:	0f b6 84 24 85 00 00 	movzx  eax,BYTE PTR [rsp+0x85]
  404a29:	00 
  404a2a:	88 54 24 20          	mov    BYTE PTR [rsp+0x20],dl
  404a2e:	0f b6 94 24 87 00 00 	movzx  edx,BYTE PTR [rsp+0x87]
  404a35:	00 
  404a36:	49 89 d1             	mov    r9,rdx
  404a39:	c0 ea 04             	shr    dl,0x4
  404a3c:	41 89 d7             	mov    r15d,edx
  404a3f:	0f b6 94 24 88 00 00 	movzx  edx,BYTE PTR [rsp+0x88]
  404a46:	00 
  404a47:	41 83 e1 0f          	and    r9d,0xf
  404a4b:	4c 89 4c 24 58       	mov    QWORD PTR [rsp+0x58],r9
  404a50:	41 83 e7 0f          	and    r15d,0xf
  404a54:	49 c1 e7 04          	shl    r15,0x4
  404a58:	49 89 d1             	mov    r9,rdx
  404a5b:	c0 ea 04             	shr    dl,0x4
  404a5e:	83 e2 0f             	and    edx,0xf
  404a61:	41 83 e1 0f          	and    r9d,0xf
  404a65:	48 c1 e2 04          	shl    rdx,0x4
  404a69:	45 0f b6 94 11 40 ab 	movzx  r10d,BYTE PTR [r9+rdx*1+0x40ab40]
  404a70:	40 00 
  404a72:	0f b6 94 24 89 00 00 	movzx  edx,BYTE PTR [rsp+0x89]
  404a79:	00 
  404a7a:	49 89 d1             	mov    r9,rdx
  404a7d:	44 88 54 24 18       	mov    BYTE PTR [rsp+0x18],r10b
  404a82:	41 83 e1 0f          	and    r9d,0xf
  404a86:	c0 ea 04             	shr    dl,0x4
  404a89:	83 e2 0f             	and    edx,0xf
  404a8c:	48 c1 e2 04          	shl    rdx,0x4
  404a90:	45 0f b6 94 11 40 ab 	movzx  r10d,BYTE PTR [r9+rdx*1+0x40ab40]
  404a97:	40 00 
  404a99:	0f b6 94 24 8a 00 00 	movzx  edx,BYTE PTR [rsp+0x8a]
  404aa0:	00 
  404aa1:	49 89 d1             	mov    r9,rdx
  404aa4:	c0 ea 04             	shr    dl,0x4
  404aa7:	83 e2 0f             	and    edx,0xf
  404aaa:	41 83 e1 0f          	and    r9d,0xf
  404aae:	48 c1 e2 04          	shl    rdx,0x4
  404ab2:	45 0f b6 9c 11 40 ab 	movzx  r11d,BYTE PTR [r9+rdx*1+0x40ab40]
  404ab9:	40 00 
  404abb:	0f b6 94 24 8b 00 00 	movzx  edx,BYTE PTR [rsp+0x8b]
  404ac2:	00 
  404ac3:	49 89 d1             	mov    r9,rdx
  404ac6:	c0 ea 04             	shr    dl,0x4
  404ac9:	83 e2 0f             	and    edx,0xf
  404acc:	41 83 e1 0f          	and    r9d,0xf
  404ad0:	48 c1 e2 04          	shl    rdx,0x4
  404ad4:	45 0f b6 ac 11 40 ab 	movzx  r13d,BYTE PTR [r9+rdx*1+0x40ab40]
  404adb:	40 00 
  404add:	0f b6 94 24 8c 00 00 	movzx  edx,BYTE PTR [rsp+0x8c]
  404ae4:	00 
  404ae5:	49 89 d1             	mov    r9,rdx
  404ae8:	c0 ea 04             	shr    dl,0x4
  404aeb:	44 88 2c 24          	mov    BYTE PTR [rsp],r13b
  404aef:	83 e2 0f             	and    edx,0xf
  404af2:	41 83 e1 0f          	and    r9d,0xf
  404af6:	48 c1 e2 04          	shl    rdx,0x4
  404afa:	41 0f b6 9c 11 40 ab 	movzx  ebx,BYTE PTR [r9+rdx*1+0x40ab40]
  404b01:	40 00 
  404b03:	0f b6 94 24 8d 00 00 	movzx  edx,BYTE PTR [rsp+0x8d]
  404b0a:	00 
  404b0b:	49 89 d1             	mov    r9,rdx
  404b0e:	c0 ea 04             	shr    dl,0x4
  404b11:	83 e2 0f             	and    edx,0xf
  404b14:	41 83 e1 0f          	and    r9d,0xf
  404b18:	48 c1 e2 04          	shl    rdx,0x4
  404b1c:	45 0f b6 8c 11 40 ab 	movzx  r9d,BYTE PTR [r9+rdx*1+0x40ab40]
  404b23:	40 00 
  404b25:	0f b6 94 24 8e 00 00 	movzx  edx,BYTE PTR [rsp+0x8e]
  404b2c:	00 
  404b2d:	44 88 4c 24 30       	mov    BYTE PTR [rsp+0x30],r9b
  404b32:	49 89 d1             	mov    r9,rdx
  404b35:	c0 ea 04             	shr    dl,0x4
  404b38:	83 e2 0f             	and    edx,0xf
  404b3b:	41 83 e1 0f          	and    r9d,0xf
  404b3f:	48 c1 e2 04          	shl    rdx,0x4
  404b43:	45 0f b6 ac 11 40 ab 	movzx  r13d,BYTE PTR [r9+rdx*1+0x40ab40]
  404b4a:	40 00 
  404b4c:	0f b6 94 24 8f 00 00 	movzx  edx,BYTE PTR [rsp+0x8f]
  404b53:	00 
  404b54:	44 88 6c 24 40       	mov    BYTE PTR [rsp+0x40],r13b
  404b59:	49 89 d1             	mov    r9,rdx
  404b5c:	49 89 c5             	mov    r13,rax
  404b5f:	c0 ea 04             	shr    dl,0x4
  404b62:	c0 e8 04             	shr    al,0x4
  404b65:	41 83 e1 0f          	and    r9d,0xf
  404b69:	83 e2 0f             	and    edx,0xf
  404b6c:	83 e0 0f             	and    eax,0xf
  404b6f:	41 83 e5 0f          	and    r13d,0xf
  404b73:	48 c1 e0 04          	shl    rax,0x4
  404b77:	48 c1 e2 04          	shl    rdx,0x4
  404b7b:	45 0f b6 8c 11 40 ab 	movzx  r9d,BYTE PTR [r9+rdx*1+0x40ab40]
  404b82:	40 00 
  404b84:	31 d2                	xor    edx,edx
  404b86:	41 8a 94 05 40 ab 40 	mov    dl,BYTE PTR [r13+rax*1+0x40ab40]
  404b8d:	00 
  404b8e:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
  404b93:	41 c1 e2 18          	shl    r10d,0x18
  404b97:	c1 e5 04             	shl    ebp,0x4
  404b9a:	88 c6                	mov    dh,al
  404b9c:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
  404ba1:	0f b7 d2             	movzx  edx,dx
  404ba4:	42 0f b6 84 38 40 ab 	movzx  eax,BYTE PTR [rax+r15*1+0x40ab40]
  404bab:	40 00 
  404bad:	4c 8b 7c 24 50       	mov    r15,QWORD PTR [rsp+0x50]
  404bb2:	47 0f b6 a4 27 40 ab 	movzx  r12d,BYTE PTR [r15+r12*1+0x40ab40]
  404bb9:	40 00 
  404bbb:	c1 e0 10             	shl    eax,0x10
  404bbe:	09 c2                	or     edx,eax
  404bc0:	31 c0                	xor    eax,eax
  404bc2:	44 88 d8             	mov    al,r11b
  404bc5:	41 c1 e4 18          	shl    r12d,0x18
  404bc9:	44 09 e2             	or     edx,r12d
  404bcc:	89 94 24 84 00 00 00 	mov    DWORD PTR [rsp+0x84],edx
  404bd3:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  404bd7:	88 d4                	mov    ah,dl
  404bd9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [rsp+0x18]
  404bde:	0f b7 c0             	movzx  eax,ax
  404be1:	c1 e2 10             	shl    edx,0x10
  404be4:	09 c2                	or     edx,eax
  404be6:	0f b6 44 24 30       	movzx  eax,BYTE PTR [rsp+0x30]
  404beb:	44 09 d2             	or     edx,r10d
  404bee:	89 94 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],edx
  404bf5:	31 d2                	xor    edx,edx
  404bf7:	44 88 ca             	mov    dl,r9b
  404bfa:	44 8b 4c 24 40       	mov    r9d,DWORD PTR [rsp+0x40]
  404bff:	88 de                	mov    dh,bl
  404c01:	c1 e0 10             	shl    eax,0x10
  404c04:	41 89 c2             	mov    r10d,eax
  404c07:	0f b7 c2             	movzx  eax,dx
  404c0a:	41 c1 e1 18          	shl    r9d,0x18
  404c0e:	44 09 d0             	or     eax,r10d
  404c11:	44 09 c8             	or     eax,r9d
  404c14:	89 84 24 8c 00 00 00 	mov    DWORD PTR [rsp+0x8c],eax
  404c1b:	89 e8                	mov    eax,ebp
  404c1d:	45 32 04 06          	xor    r8b,BYTE PTR [r14+rax*1]
  404c21:	41 32 7c 06 04       	xor    dil,BYTE PTR [r14+rax*1+0x4]
  404c26:	41 32 74 06 08       	xor    sil,BYTE PTR [r14+rax*1+0x8]
  404c2b:	41 32 4c 06 0c       	xor    cl,BYTE PTR [r14+rax*1+0xc]
  404c30:	41 0f b6 54 06 01    	movzx  edx,BYTE PTR [r14+rax*1+0x1]
  404c36:	30 94 24 84 00 00 00 	xor    BYTE PTR [rsp+0x84],dl
  404c3d:	41 0f b6 54 06 05    	movzx  edx,BYTE PTR [r14+rax*1+0x5]
  404c43:	30 94 24 85 00 00 00 	xor    BYTE PTR [rsp+0x85],dl
  404c4a:	41 0f b6 54 06 09    	movzx  edx,BYTE PTR [r14+rax*1+0x9]
  404c50:	44 88 84 24 80 00 00 	mov    BYTE PTR [rsp+0x80],r8b
  404c57:	00 
  404c58:	40 88 bc 24 81 00 00 	mov    BYTE PTR [rsp+0x81],dil
  404c5f:	00 
  404c60:	40 88 b4 24 82 00 00 	mov    BYTE PTR [rsp+0x82],sil
  404c67:	00 
  404c68:	88 8c 24 83 00 00 00 	mov    BYTE PTR [rsp+0x83],cl
  404c6f:	30 94 24 86 00 00 00 	xor    BYTE PTR [rsp+0x86],dl
  404c76:	41 0f b6 54 06 0d    	movzx  edx,BYTE PTR [r14+rax*1+0xd]
  404c7c:	30 94 24 87 00 00 00 	xor    BYTE PTR [rsp+0x87],dl
  404c83:	41 0f b6 54 06 02    	movzx  edx,BYTE PTR [r14+rax*1+0x2]
  404c89:	30 94 24 88 00 00 00 	xor    BYTE PTR [rsp+0x88],dl
  404c90:	41 0f b6 54 06 06    	movzx  edx,BYTE PTR [r14+rax*1+0x6]
  404c96:	30 94 24 89 00 00 00 	xor    BYTE PTR [rsp+0x89],dl
  404c9d:	41 0f b6 54 06 0a    	movzx  edx,BYTE PTR [r14+rax*1+0xa]
  404ca3:	30 94 24 8a 00 00 00 	xor    BYTE PTR [rsp+0x8a],dl
  404caa:	41 0f b6 54 06 0e    	movzx  edx,BYTE PTR [r14+rax*1+0xe]
  404cb0:	48 8b 5c 24 78       	mov    rbx,QWORD PTR [rsp+0x78]
  404cb5:	30 94 24 8b 00 00 00 	xor    BYTE PTR [rsp+0x8b],dl
  404cbc:	41 0f b6 54 06 03    	movzx  edx,BYTE PTR [r14+rax*1+0x3]
  404cc2:	30 94 24 8c 00 00 00 	xor    BYTE PTR [rsp+0x8c],dl
  404cc9:	41 0f b6 54 06 07    	movzx  edx,BYTE PTR [r14+rax*1+0x7]
  404ccf:	30 94 24 8d 00 00 00 	xor    BYTE PTR [rsp+0x8d],dl
  404cd6:	41 0f b6 54 06 0b    	movzx  edx,BYTE PTR [r14+rax*1+0xb]
  404cdc:	41 0f b6 44 06 0f    	movzx  eax,BYTE PTR [r14+rax*1+0xf]
  404ce2:	30 94 24 8e 00 00 00 	xor    BYTE PTR [rsp+0x8e],dl
  404ce9:	30 84 24 8f 00 00 00 	xor    BYTE PTR [rsp+0x8f],al
  404cf0:	44 88 03             	mov    BYTE PTR [rbx],r8b
  404cf3:	40 88 7b 04          	mov    BYTE PTR [rbx+0x4],dil
  404cf7:	40 88 73 08          	mov    BYTE PTR [rbx+0x8],sil
  404cfb:	88 4b 0c             	mov    BYTE PTR [rbx+0xc],cl
  404cfe:	0f b6 84 24 84 00 00 	movzx  eax,BYTE PTR [rsp+0x84]
  404d05:	00 
  404d06:	88 43 01             	mov    BYTE PTR [rbx+0x1],al
  404d09:	0f b6 84 24 85 00 00 	movzx  eax,BYTE PTR [rsp+0x85]
  404d10:	00 
  404d11:	88 43 05             	mov    BYTE PTR [rbx+0x5],al
  404d14:	0f b6 84 24 86 00 00 	movzx  eax,BYTE PTR [rsp+0x86]
  404d1b:	00 
  404d1c:	88 43 09             	mov    BYTE PTR [rbx+0x9],al
  404d1f:	0f b6 84 24 87 00 00 	movzx  eax,BYTE PTR [rsp+0x87]
  404d26:	00 
  404d27:	88 43 0d             	mov    BYTE PTR [rbx+0xd],al
  404d2a:	0f b6 84 24 88 00 00 	movzx  eax,BYTE PTR [rsp+0x88]
  404d31:	00 
  404d32:	88 43 02             	mov    BYTE PTR [rbx+0x2],al
  404d35:	0f b6 84 24 89 00 00 	movzx  eax,BYTE PTR [rsp+0x89]
  404d3c:	00 
  404d3d:	88 43 06             	mov    BYTE PTR [rbx+0x6],al
  404d40:	0f b6 84 24 8a 00 00 	movzx  eax,BYTE PTR [rsp+0x8a]
  404d47:	00 
  404d48:	88 43 0a             	mov    BYTE PTR [rbx+0xa],al
  404d4b:	0f b6 84 24 8b 00 00 	movzx  eax,BYTE PTR [rsp+0x8b]
  404d52:	00 
  404d53:	88 43 0e             	mov    BYTE PTR [rbx+0xe],al
  404d56:	0f b6 84 24 8c 00 00 	movzx  eax,BYTE PTR [rsp+0x8c]
  404d5d:	00 
  404d5e:	88 43 03             	mov    BYTE PTR [rbx+0x3],al
  404d61:	0f b6 84 24 8d 00 00 	movzx  eax,BYTE PTR [rsp+0x8d]
  404d68:	00 
  404d69:	88 43 07             	mov    BYTE PTR [rbx+0x7],al
  404d6c:	0f b6 84 24 8e 00 00 	movzx  eax,BYTE PTR [rsp+0x8e]
  404d73:	00 
  404d74:	88 43 0b             	mov    BYTE PTR [rbx+0xb],al
  404d77:	0f b6 84 24 8f 00 00 	movzx  eax,BYTE PTR [rsp+0x8f]
  404d7e:	00 
  404d7f:	88 43 0f             	mov    BYTE PTR [rbx+0xf],al
  404d82:	48 8b 84 24 98 00 00 	mov    rax,QWORD PTR [rsp+0x98]
  404d89:	00 
  404d8a:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  404d91:	00 00 
  404d93:	75 12                	jne    404da7 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)+0xa57>
  404d95:	48 81 c4 a8 00 00 00 	add    rsp,0xa8
  404d9c:	5b                   	pop    rbx
  404d9d:	5d                   	pop    rbp
  404d9e:	41 5c                	pop    r12
  404da0:	41 5d                	pop    r13
  404da2:	41 5e                	pop    r14
  404da4:	41 5f                	pop    r15
  404da6:	c3                   	ret    
  404da7:	e8 14 cc ff ff       	call   4019c0 <__stack_chk_fail@plt>
  404dac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000404db0 <AES::AddRoundKey(unsigned char (*) [4], unsigned char*)>:
  404db0:	0f b6 02             	movzx  eax,BYTE PTR [rdx]
  404db3:	30 06                	xor    BYTE PTR [rsi],al
  404db5:	0f b6 42 04          	movzx  eax,BYTE PTR [rdx+0x4]
  404db9:	30 46 01             	xor    BYTE PTR [rsi+0x1],al
  404dbc:	0f b6 42 08          	movzx  eax,BYTE PTR [rdx+0x8]
  404dc0:	30 46 02             	xor    BYTE PTR [rsi+0x2],al
  404dc3:	0f b6 42 0c          	movzx  eax,BYTE PTR [rdx+0xc]
  404dc7:	30 46 03             	xor    BYTE PTR [rsi+0x3],al
  404dca:	0f b6 42 01          	movzx  eax,BYTE PTR [rdx+0x1]
  404dce:	30 46 04             	xor    BYTE PTR [rsi+0x4],al
  404dd1:	0f b6 42 05          	movzx  eax,BYTE PTR [rdx+0x5]
  404dd5:	30 46 05             	xor    BYTE PTR [rsi+0x5],al
  404dd8:	0f b6 42 09          	movzx  eax,BYTE PTR [rdx+0x9]
  404ddc:	30 46 06             	xor    BYTE PTR [rsi+0x6],al
  404ddf:	0f b6 42 0d          	movzx  eax,BYTE PTR [rdx+0xd]
  404de3:	30 46 07             	xor    BYTE PTR [rsi+0x7],al
  404de6:	0f b6 42 02          	movzx  eax,BYTE PTR [rdx+0x2]
  404dea:	30 46 08             	xor    BYTE PTR [rsi+0x8],al
  404ded:	0f b6 42 06          	movzx  eax,BYTE PTR [rdx+0x6]
  404df1:	30 46 09             	xor    BYTE PTR [rsi+0x9],al
  404df4:	0f b6 42 0a          	movzx  eax,BYTE PTR [rdx+0xa]
  404df8:	30 46 0a             	xor    BYTE PTR [rsi+0xa],al
  404dfb:	0f b6 42 0e          	movzx  eax,BYTE PTR [rdx+0xe]
  404dff:	30 46 0b             	xor    BYTE PTR [rsi+0xb],al
  404e02:	0f b6 42 03          	movzx  eax,BYTE PTR [rdx+0x3]
  404e06:	30 46 0c             	xor    BYTE PTR [rsi+0xc],al
  404e09:	0f b6 42 07          	movzx  eax,BYTE PTR [rdx+0x7]
  404e0d:	30 46 0d             	xor    BYTE PTR [rsi+0xd],al
  404e10:	0f b6 42 0b          	movzx  eax,BYTE PTR [rdx+0xb]
  404e14:	30 46 0e             	xor    BYTE PTR [rsi+0xe],al
  404e17:	0f b6 42 0f          	movzx  eax,BYTE PTR [rdx+0xf]
  404e1b:	30 46 0f             	xor    BYTE PTR [rsi+0xf],al
  404e1e:	c3                   	ret    
  404e1f:	90                   	nop

0000000000404e20 <AES::SubWord(unsigned char*)>:
  404e20:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
  404e23:	48 89 c2             	mov    rdx,rax
  404e26:	c0 e8 04             	shr    al,0x4
  404e29:	83 e0 0f             	and    eax,0xf
  404e2c:	83 e2 0f             	and    edx,0xf
  404e2f:	48 c1 e0 04          	shl    rax,0x4
  404e33:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  404e3a:	00 
  404e3b:	88 06                	mov    BYTE PTR [rsi],al
  404e3d:	0f b6 46 01          	movzx  eax,BYTE PTR [rsi+0x1]
  404e41:	48 89 c2             	mov    rdx,rax
  404e44:	c0 e8 04             	shr    al,0x4
  404e47:	83 e0 0f             	and    eax,0xf
  404e4a:	83 e2 0f             	and    edx,0xf
  404e4d:	48 c1 e0 04          	shl    rax,0x4
  404e51:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  404e58:	00 
  404e59:	88 46 01             	mov    BYTE PTR [rsi+0x1],al
  404e5c:	0f b6 46 02          	movzx  eax,BYTE PTR [rsi+0x2]
  404e60:	48 89 c2             	mov    rdx,rax
  404e63:	c0 e8 04             	shr    al,0x4
  404e66:	83 e0 0f             	and    eax,0xf
  404e69:	83 e2 0f             	and    edx,0xf
  404e6c:	48 c1 e0 04          	shl    rax,0x4
  404e70:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  404e77:	00 
  404e78:	88 46 02             	mov    BYTE PTR [rsi+0x2],al
  404e7b:	0f b6 46 03          	movzx  eax,BYTE PTR [rsi+0x3]
  404e7f:	48 89 c2             	mov    rdx,rax
  404e82:	c0 e8 04             	shr    al,0x4
  404e85:	83 e0 0f             	and    eax,0xf
  404e88:	83 e2 0f             	and    edx,0xf
  404e8b:	48 c1 e0 04          	shl    rax,0x4
  404e8f:	0f b6 84 02 40 ab 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40ab40]
  404e96:	00 
  404e97:	88 46 03             	mov    BYTE PTR [rsi+0x3],al
  404e9a:	c3                   	ret    
  404e9b:	90                   	nop
  404e9c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000404ea0 <AES::RotWord(unsigned char*)>:
  404ea0:	0f b6 56 01          	movzx  edx,BYTE PTR [rsi+0x1]
  404ea4:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
  404ea7:	88 16                	mov    BYTE PTR [rsi],dl
  404ea9:	0f b6 56 02          	movzx  edx,BYTE PTR [rsi+0x2]
  404ead:	88 56 01             	mov    BYTE PTR [rsi+0x1],dl
  404eb0:	0f b6 56 03          	movzx  edx,BYTE PTR [rsi+0x3]
  404eb4:	88 46 03             	mov    BYTE PTR [rsi+0x3],al
  404eb7:	88 56 02             	mov    BYTE PTR [rsi+0x2],dl
  404eba:	c3                   	ret    
  404ebb:	90                   	nop
  404ebc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000404ec0 <AES::XorWords(unsigned char*, unsigned char*, unsigned char*)>:
  404ec0:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
  404ec3:	32 02                	xor    al,BYTE PTR [rdx]
  404ec5:	88 01                	mov    BYTE PTR [rcx],al
  404ec7:	0f b6 46 01          	movzx  eax,BYTE PTR [rsi+0x1]
  404ecb:	32 42 01             	xor    al,BYTE PTR [rdx+0x1]
  404ece:	88 41 01             	mov    BYTE PTR [rcx+0x1],al
  404ed1:	0f b6 46 02          	movzx  eax,BYTE PTR [rsi+0x2]
  404ed5:	32 42 02             	xor    al,BYTE PTR [rdx+0x2]
  404ed8:	88 41 02             	mov    BYTE PTR [rcx+0x2],al
  404edb:	0f b6 46 03          	movzx  eax,BYTE PTR [rsi+0x3]
  404edf:	32 42 03             	xor    al,BYTE PTR [rdx+0x3]
  404ee2:	88 41 03             	mov    BYTE PTR [rcx+0x3],al
  404ee5:	c3                   	ret    
  404ee6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  404eed:	00 00 00 

0000000000404ef0 <AES::Rcon(unsigned char*, unsigned int)>:
  404ef0:	83 ea 01             	sub    edx,0x1
  404ef3:	b9 01 00 00 00       	mov    ecx,0x1
  404ef8:	74 20                	je     404f1a <AES::Rcon(unsigned char*, unsigned int)+0x2a>
  404efa:	31 ff                	xor    edi,edi
  404efc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  404f00:	89 c8                	mov    eax,ecx
  404f02:	83 c7 01             	add    edi,0x1
  404f05:	01 c9                	add    ecx,ecx
  404f07:	c0 e8 07             	shr    al,0x7
  404f0a:	44 8d 04 00          	lea    r8d,[rax+rax*1]
  404f0e:	44 01 c0             	add    eax,r8d
  404f11:	8d 04 c0             	lea    eax,[rax+rax*8]
  404f14:	31 c1                	xor    ecx,eax
  404f16:	39 d7                	cmp    edi,edx
  404f18:	75 e6                	jne    404f00 <AES::Rcon(unsigned char*, unsigned int)+0x10>
  404f1a:	88 0e                	mov    BYTE PTR [rsi],cl
  404f1c:	c6 46 03 00          	mov    BYTE PTR [rsi+0x3],0x0
  404f20:	c6 46 02 00          	mov    BYTE PTR [rsi+0x2],0x0
  404f24:	c6 46 01 00          	mov    BYTE PTR [rsi+0x1],0x0
  404f28:	c3                   	ret    
  404f29:	90                   	nop
  404f2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>:
  404f30:	41 57                	push   r15
  404f32:	41 56                	push   r14
  404f34:	31 c0                	xor    eax,eax
  404f36:	41 55                	push   r13
  404f38:	41 54                	push   r12
  404f3a:	49 89 d1             	mov    r9,rdx
  404f3d:	55                   	push   rbp
  404f3e:	8b 2f                	mov    ebp,DWORD PTR [rdi]
  404f40:	53                   	push   rbx
  404f41:	44 8d 04 ad 00 00 00 	lea    r8d,[rbp*4+0x0]
  404f48:	00 
  404f49:	45 85 c0             	test   r8d,r8d
  404f4c:	74 1e                	je     404f6c <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x3c>
  404f4e:	66 90                	xchg   ax,ax
  404f50:	89 c2                	mov    edx,eax
  404f52:	83 c0 01             	add    eax,0x1
  404f55:	0f b6 0c 16          	movzx  ecx,BYTE PTR [rsi+rdx*1]
  404f59:	41 88 0c 11          	mov    BYTE PTR [r9+rdx*1],cl
  404f5d:	8b 2f                	mov    ebp,DWORD PTR [rdi]
  404f5f:	44 8d 04 ad 00 00 00 	lea    r8d,[rbp*4+0x0]
  404f66:	00 
  404f67:	41 39 c0             	cmp    r8d,eax
  404f6a:	77 e4                	ja     404f50 <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x20>
  404f6c:	8b 47 04             	mov    eax,DWORD PTR [rdi+0x4]
  404f6f:	83 c0 01             	add    eax,0x1
  404f72:	c1 e0 04             	shl    eax,0x4
  404f75:	41 39 c0             	cmp    r8d,eax
  404f78:	0f 83 ea 01 00 00    	jae    405168 <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x238>
  404f7e:	41 bd 01 00 00 00    	mov    r13d,0x1
  404f84:	41 bc 02 00 00 00    	mov    r12d,0x2
  404f8a:	e9 ef 00 00 00       	jmp    40507e <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x14e>
  404f8f:	90                   	nop
  404f90:	83 fa 04             	cmp    edx,0x4
  404f93:	75 67                	jne    404ffc <AES::KeyExpansion(unsigned char const*, unsigned char*)+0xcc>
  404f95:	83 fd 06             	cmp    ebp,0x6
  404f98:	76 62                	jbe    404ffc <AES::KeyExpansion(unsigned char const*, unsigned char*)+0xcc>
  404f9a:	89 c8                	mov    eax,ecx
  404f9c:	83 e1 0f             	and    ecx,0xf
  404f9f:	c0 e8 04             	shr    al,0x4
  404fa2:	83 e0 0f             	and    eax,0xf
  404fa5:	48 c1 e0 04          	shl    rax,0x4
  404fa9:	0f b6 8c 01 40 ab 40 	movzx  ecx,BYTE PTR [rcx+rax*1+0x40ab40]
  404fb0:	00 
  404fb1:	44 89 d8             	mov    eax,r11d
  404fb4:	41 83 e3 0f          	and    r11d,0xf
  404fb8:	c0 e8 04             	shr    al,0x4
  404fbb:	83 e0 0f             	and    eax,0xf
  404fbe:	48 c1 e0 04          	shl    rax,0x4
  404fc2:	45 0f b6 9c 03 40 ab 	movzx  r11d,BYTE PTR [r11+rax*1+0x40ab40]
  404fc9:	40 00 
  404fcb:	44 89 d0             	mov    eax,r10d
  404fce:	41 83 e2 0f          	and    r10d,0xf
  404fd2:	c0 e8 04             	shr    al,0x4
  404fd5:	83 e0 0f             	and    eax,0xf
  404fd8:	48 c1 e0 04          	shl    rax,0x4
  404fdc:	45 0f b6 94 02 40 ab 	movzx  r10d,BYTE PTR [r10+rax*1+0x40ab40]
  404fe3:	40 00 
  404fe5:	89 f0                	mov    eax,esi
  404fe7:	83 e6 0f             	and    esi,0xf
  404fea:	c0 e8 04             	shr    al,0x4
  404fed:	83 e0 0f             	and    eax,0xf
  404ff0:	48 c1 e0 04          	shl    rax,0x4
  404ff4:	0f b6 b4 06 40 ab 40 	movzx  esi,BYTE PTR [rsi+rax*1+0x40ab40]
  404ffb:	00 
  404ffc:	8d 1c ad 00 00 00 00 	lea    ebx,[rbp*4+0x0]
  405003:	44 89 c2             	mov    edx,r8d
  405006:	44 89 c0             	mov    eax,r8d
  405009:	29 da                	sub    edx,ebx
  40500b:	44 89 eb             	mov    ebx,r13d
  40500e:	41 32 0c 11          	xor    cl,BYTE PTR [r9+rdx*1]
  405012:	41 8d 50 01          	lea    edx,[r8+0x1]
  405016:	41 88 0c 01          	mov    BYTE PTR [r9+rax*1],cl
  40501a:	8b 07                	mov    eax,DWORD PTR [rdi]
  40501c:	c1 e0 02             	shl    eax,0x2
  40501f:	29 c3                	sub    ebx,eax
  405021:	89 d8                	mov    eax,ebx
  405023:	44 89 e3             	mov    ebx,r12d
  405026:	44 01 c0             	add    eax,r8d
  405029:	45 32 1c 01          	xor    r11b,BYTE PTR [r9+rax*1]
  40502d:	45 88 1c 11          	mov    BYTE PTR [r9+rdx*1],r11b
  405031:	8b 07                	mov    eax,DWORD PTR [rdi]
  405033:	41 8d 50 02          	lea    edx,[r8+0x2]
  405037:	c1 e0 02             	shl    eax,0x2
  40503a:	29 c3                	sub    ebx,eax
  40503c:	89 d8                	mov    eax,ebx
  40503e:	bb 03 00 00 00       	mov    ebx,0x3
  405043:	44 01 c0             	add    eax,r8d
  405046:	45 32 14 01          	xor    r10b,BYTE PTR [r9+rax*1]
  40504a:	45 88 14 11          	mov    BYTE PTR [r9+rdx*1],r10b
  40504e:	8b 07                	mov    eax,DWORD PTR [rdi]
  405050:	41 8d 50 03          	lea    edx,[r8+0x3]
  405054:	c1 e0 02             	shl    eax,0x2
  405057:	29 c3                	sub    ebx,eax
  405059:	89 d8                	mov    eax,ebx
  40505b:	44 01 c0             	add    eax,r8d
  40505e:	41 83 c0 04          	add    r8d,0x4
  405062:	41 32 34 01          	xor    sil,BYTE PTR [r9+rax*1]
  405066:	41 88 34 11          	mov    BYTE PTR [r9+rdx*1],sil
  40506a:	8b 47 04             	mov    eax,DWORD PTR [rdi+0x4]
  40506d:	83 c0 01             	add    eax,0x1
  405070:	c1 e0 04             	shl    eax,0x4
  405073:	44 39 c0             	cmp    eax,r8d
  405076:	0f 86 ec 00 00 00    	jbe    405168 <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x238>
  40507c:	8b 2f                	mov    ebp,DWORD PTR [rdi]
  40507e:	41 8d 40 fc          	lea    eax,[r8-0x4]
  405082:	31 d2                	xor    edx,edx
  405084:	41 0f b6 0c 01       	movzx  ecx,BYTE PTR [r9+rax*1]
  405089:	41 8d 40 fd          	lea    eax,[r8-0x3]
  40508d:	45 0f b6 1c 01       	movzx  r11d,BYTE PTR [r9+rax*1]
  405092:	41 8d 40 fe          	lea    eax,[r8-0x2]
  405096:	45 0f b6 14 01       	movzx  r10d,BYTE PTR [r9+rax*1]
  40509b:	41 8d 40 ff          	lea    eax,[r8-0x1]
  40509f:	41 0f b6 34 01       	movzx  esi,BYTE PTR [r9+rax*1]
  4050a4:	44 89 c0             	mov    eax,r8d
  4050a7:	c1 e8 02             	shr    eax,0x2
  4050aa:	f7 f5                	div    ebp
  4050ac:	85 d2                	test   edx,edx
  4050ae:	0f 85 dc fe ff ff    	jne    404f90 <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x60>
  4050b4:	4c 89 d8             	mov    rax,r11
  4050b7:	41 c0 eb 04          	shr    r11b,0x4
  4050bb:	8d 1c ad 00 00 00 00 	lea    ebx,[rbp*4+0x0]
  4050c2:	41 83 e3 0f          	and    r11d,0xf
  4050c6:	83 e0 0f             	and    eax,0xf
  4050c9:	31 d2                	xor    edx,edx
  4050cb:	49 c1 e3 04          	shl    r11,0x4
  4050cf:	46 0f b6 b4 18 40 ab 	movzx  r14d,BYTE PTR [rax+r11*1+0x40ab40]
  4050d6:	40 00 
  4050d8:	4c 89 d0             	mov    rax,r10
  4050db:	41 c0 ea 04          	shr    r10b,0x4
  4050df:	41 83 e2 0f          	and    r10d,0xf
  4050e3:	83 e0 0f             	and    eax,0xf
  4050e6:	49 c1 e2 04          	shl    r10,0x4
  4050ea:	46 0f b6 9c 10 40 ab 	movzx  r11d,BYTE PTR [rax+r10*1+0x40ab40]
  4050f1:	40 00 
  4050f3:	48 89 f0             	mov    rax,rsi
  4050f6:	40 c0 ee 04          	shr    sil,0x4
  4050fa:	83 e6 0f             	and    esi,0xf
  4050fd:	83 e0 0f             	and    eax,0xf
  405100:	48 c1 e6 04          	shl    rsi,0x4
  405104:	44 0f b6 94 30 40 ab 	movzx  r10d,BYTE PTR [rax+rsi*1+0x40ab40]
  40510b:	40 00 
  40510d:	48 89 c8             	mov    rax,rcx
  405110:	c0 e9 04             	shr    cl,0x4
  405113:	83 e1 0f             	and    ecx,0xf
  405116:	83 e0 0f             	and    eax,0xf
  405119:	48 c1 e1 04          	shl    rcx,0x4
  40511d:	0f b6 b4 08 40 ab 40 	movzx  esi,BYTE PTR [rax+rcx*1+0x40ab40]
  405124:	00 
  405125:	44 89 c0             	mov    eax,r8d
  405128:	b9 01 00 00 00       	mov    ecx,0x1
  40512d:	f7 f3                	div    ebx
  40512f:	83 e8 01             	sub    eax,0x1
  405132:	74 26                	je     40515a <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x22a>
  405134:	31 ed                	xor    ebp,ebp
  405136:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40513d:	00 00 00 
  405140:	89 ca                	mov    edx,ecx
  405142:	83 c5 01             	add    ebp,0x1
  405145:	01 c9                	add    ecx,ecx
  405147:	c0 ea 07             	shr    dl,0x7
  40514a:	44 8d 3c 12          	lea    r15d,[rdx+rdx*1]
  40514e:	44 01 fa             	add    edx,r15d
  405151:	8d 14 d2             	lea    edx,[rdx+rdx*8]
  405154:	31 d1                	xor    ecx,edx
  405156:	39 c5                	cmp    ebp,eax
  405158:	75 e6                	jne    405140 <AES::KeyExpansion(unsigned char const*, unsigned char*)+0x210>
  40515a:	44 31 f1             	xor    ecx,r14d
  40515d:	e9 a1 fe ff ff       	jmp    405003 <AES::KeyExpansion(unsigned char const*, unsigned char*)+0xd3>
  405162:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405168:	5b                   	pop    rbx
  405169:	5d                   	pop    rbp
  40516a:	41 5c                	pop    r12
  40516c:	41 5d                	pop    r13
  40516e:	41 5e                	pop    r14
  405170:	41 5f                	pop    r15
  405172:	c3                   	ret    
  405173:	90                   	nop
  405174:	66 90                	xchg   ax,ax
  405176:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40517d:	00 00 00 

0000000000405180 <AES::InvSubBytes(unsigned char (*) [4])>:
  405180:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
  405183:	48 89 c2             	mov    rdx,rax
  405186:	c0 e8 04             	shr    al,0x4
  405189:	83 e0 0f             	and    eax,0xf
  40518c:	83 e2 0f             	and    edx,0xf
  40518f:	48 c1 e0 04          	shl    rax,0x4
  405193:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  40519a:	00 
  40519b:	88 06                	mov    BYTE PTR [rsi],al
  40519d:	0f b6 46 01          	movzx  eax,BYTE PTR [rsi+0x1]
  4051a1:	48 89 c2             	mov    rdx,rax
  4051a4:	c0 e8 04             	shr    al,0x4
  4051a7:	83 e0 0f             	and    eax,0xf
  4051aa:	83 e2 0f             	and    edx,0xf
  4051ad:	48 c1 e0 04          	shl    rax,0x4
  4051b1:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  4051b8:	00 
  4051b9:	88 46 01             	mov    BYTE PTR [rsi+0x1],al
  4051bc:	0f b6 46 02          	movzx  eax,BYTE PTR [rsi+0x2]
  4051c0:	48 89 c2             	mov    rdx,rax
  4051c3:	c0 e8 04             	shr    al,0x4
  4051c6:	83 e0 0f             	and    eax,0xf
  4051c9:	83 e2 0f             	and    edx,0xf
  4051cc:	48 c1 e0 04          	shl    rax,0x4
  4051d0:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  4051d7:	00 
  4051d8:	88 46 02             	mov    BYTE PTR [rsi+0x2],al
  4051db:	0f b6 46 03          	movzx  eax,BYTE PTR [rsi+0x3]
  4051df:	48 89 c2             	mov    rdx,rax
  4051e2:	c0 e8 04             	shr    al,0x4
  4051e5:	83 e0 0f             	and    eax,0xf
  4051e8:	83 e2 0f             	and    edx,0xf
  4051eb:	48 c1 e0 04          	shl    rax,0x4
  4051ef:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  4051f6:	00 
  4051f7:	88 46 03             	mov    BYTE PTR [rsi+0x3],al
  4051fa:	0f b6 46 04          	movzx  eax,BYTE PTR [rsi+0x4]
  4051fe:	48 89 c2             	mov    rdx,rax
  405201:	c0 e8 04             	shr    al,0x4
  405204:	83 e0 0f             	and    eax,0xf
  405207:	83 e2 0f             	and    edx,0xf
  40520a:	48 c1 e0 04          	shl    rax,0x4
  40520e:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  405215:	00 
  405216:	88 46 04             	mov    BYTE PTR [rsi+0x4],al
  405219:	0f b6 46 05          	movzx  eax,BYTE PTR [rsi+0x5]
  40521d:	48 89 c2             	mov    rdx,rax
  405220:	c0 e8 04             	shr    al,0x4
  405223:	83 e0 0f             	and    eax,0xf
  405226:	83 e2 0f             	and    edx,0xf
  405229:	48 c1 e0 04          	shl    rax,0x4
  40522d:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  405234:	00 
  405235:	88 46 05             	mov    BYTE PTR [rsi+0x5],al
  405238:	0f b6 46 06          	movzx  eax,BYTE PTR [rsi+0x6]
  40523c:	48 89 c2             	mov    rdx,rax
  40523f:	c0 e8 04             	shr    al,0x4
  405242:	83 e0 0f             	and    eax,0xf
  405245:	83 e2 0f             	and    edx,0xf
  405248:	48 c1 e0 04          	shl    rax,0x4
  40524c:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  405253:	00 
  405254:	88 46 06             	mov    BYTE PTR [rsi+0x6],al
  405257:	0f b6 46 07          	movzx  eax,BYTE PTR [rsi+0x7]
  40525b:	48 89 c2             	mov    rdx,rax
  40525e:	c0 e8 04             	shr    al,0x4
  405261:	83 e0 0f             	and    eax,0xf
  405264:	83 e2 0f             	and    edx,0xf
  405267:	48 c1 e0 04          	shl    rax,0x4
  40526b:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  405272:	00 
  405273:	88 46 07             	mov    BYTE PTR [rsi+0x7],al
  405276:	0f b6 46 08          	movzx  eax,BYTE PTR [rsi+0x8]
  40527a:	48 89 c2             	mov    rdx,rax
  40527d:	83 e2 0f             	and    edx,0xf
  405280:	c0 e8 04             	shr    al,0x4
  405283:	83 e0 0f             	and    eax,0xf
  405286:	48 c1 e0 04          	shl    rax,0x4
  40528a:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  405291:	00 
  405292:	88 46 08             	mov    BYTE PTR [rsi+0x8],al
  405295:	0f b6 46 09          	movzx  eax,BYTE PTR [rsi+0x9]
  405299:	48 89 c2             	mov    rdx,rax
  40529c:	c0 e8 04             	shr    al,0x4
  40529f:	83 e0 0f             	and    eax,0xf
  4052a2:	83 e2 0f             	and    edx,0xf
  4052a5:	48 c1 e0 04          	shl    rax,0x4
  4052a9:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  4052b0:	00 
  4052b1:	88 46 09             	mov    BYTE PTR [rsi+0x9],al
  4052b4:	0f b6 46 0a          	movzx  eax,BYTE PTR [rsi+0xa]
  4052b8:	48 89 c2             	mov    rdx,rax
  4052bb:	c0 e8 04             	shr    al,0x4
  4052be:	83 e0 0f             	and    eax,0xf
  4052c1:	83 e2 0f             	and    edx,0xf
  4052c4:	48 c1 e0 04          	shl    rax,0x4
  4052c8:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  4052cf:	00 
  4052d0:	88 46 0a             	mov    BYTE PTR [rsi+0xa],al
  4052d3:	0f b6 46 0b          	movzx  eax,BYTE PTR [rsi+0xb]
  4052d7:	48 89 c2             	mov    rdx,rax
  4052da:	c0 e8 04             	shr    al,0x4
  4052dd:	83 e0 0f             	and    eax,0xf
  4052e0:	83 e2 0f             	and    edx,0xf
  4052e3:	48 c1 e0 04          	shl    rax,0x4
  4052e7:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  4052ee:	00 
  4052ef:	88 46 0b             	mov    BYTE PTR [rsi+0xb],al
  4052f2:	0f b6 46 0c          	movzx  eax,BYTE PTR [rsi+0xc]
  4052f6:	48 89 c2             	mov    rdx,rax
  4052f9:	c0 e8 04             	shr    al,0x4
  4052fc:	83 e0 0f             	and    eax,0xf
  4052ff:	83 e2 0f             	and    edx,0xf
  405302:	48 c1 e0 04          	shl    rax,0x4
  405306:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  40530d:	00 
  40530e:	88 46 0c             	mov    BYTE PTR [rsi+0xc],al
  405311:	0f b6 46 0d          	movzx  eax,BYTE PTR [rsi+0xd]
  405315:	48 89 c2             	mov    rdx,rax
  405318:	c0 e8 04             	shr    al,0x4
  40531b:	83 e0 0f             	and    eax,0xf
  40531e:	83 e2 0f             	and    edx,0xf
  405321:	48 c1 e0 04          	shl    rax,0x4
  405325:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  40532c:	00 
  40532d:	88 46 0d             	mov    BYTE PTR [rsi+0xd],al
  405330:	0f b6 46 0e          	movzx  eax,BYTE PTR [rsi+0xe]
  405334:	48 89 c2             	mov    rdx,rax
  405337:	c0 e8 04             	shr    al,0x4
  40533a:	83 e0 0f             	and    eax,0xf
  40533d:	83 e2 0f             	and    edx,0xf
  405340:	48 c1 e0 04          	shl    rax,0x4
  405344:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  40534b:	00 
  40534c:	88 46 0e             	mov    BYTE PTR [rsi+0xe],al
  40534f:	0f b6 46 0f          	movzx  eax,BYTE PTR [rsi+0xf]
  405353:	48 89 c2             	mov    rdx,rax
  405356:	c0 e8 04             	shr    al,0x4
  405359:	83 e0 0f             	and    eax,0xf
  40535c:	83 e2 0f             	and    edx,0xf
  40535f:	48 c1 e0 04          	shl    rax,0x4
  405363:	0f b6 84 02 40 aa 40 	movzx  eax,BYTE PTR [rdx+rax*1+0x40aa40]
  40536a:	00 
  40536b:	88 46 0f             	mov    BYTE PTR [rsi+0xf],al
  40536e:	c3                   	ret    
  40536f:	90                   	nop

0000000000405370 <AES::InvMixColumns(unsigned char (*) [4])>:
  405370:	41 57                	push   r15
  405372:	41 56                	push   r14
  405374:	41 55                	push   r13
  405376:	41 54                	push   r12
  405378:	55                   	push   rbp
  405379:	53                   	push   rbx
  40537a:	48 83 ec 58          	sub    rsp,0x58
  40537e:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  405385:	00 00 
  405387:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
  40538c:	31 c0                	xor    eax,eax
  40538e:	48 8d 54 24 40       	lea    rdx,[rsp+0x40]
  405393:	48 8d 44 24 30       	lea    rax,[rsp+0x30]
  405398:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
  40539e:	48 83 c0 04          	add    rax,0x4
  4053a2:	48 39 d0             	cmp    rax,rdx
  4053a5:	75 f1                	jne    405398 <AES::InvMixColumns(unsigned char (*) [4])+0x28>
  4053a7:	44 0f b6 76 01       	movzx  r14d,BYTE PTR [rsi+0x1]
  4053ac:	44 0f b6 6e 05       	movzx  r13d,BYTE PTR [rsi+0x5]
  4053b1:	0f b6 56 09          	movzx  edx,BYTE PTR [rsi+0x9]
  4053b5:	0f b6 46 02          	movzx  eax,BYTE PTR [rsi+0x2]
  4053b9:	0f b6 5e 06          	movzx  ebx,BYTE PTR [rsi+0x6]
  4053bd:	0f b6 7e 03          	movzx  edi,BYTE PTR [rsi+0x3]
  4053c1:	44 0f b6 56 0b       	movzx  r10d,BYTE PTR [rsi+0xb]
  4053c6:	44 0f b6 7e 0d       	movzx  r15d,BYTE PTR [rsi+0xd]
  4053cb:	41 0f b6 8e 40 a9 40 	movzx  ecx,BYTE PTR [r14+0x40a940]
  4053d2:	00 
  4053d3:	44 0f b6 4e 0e       	movzx  r9d,BYTE PTR [rsi+0xe]
  4053d8:	32 4c 24 31          	xor    cl,BYTE PTR [rsp+0x31]
  4053dc:	48 89 14 24          	mov    QWORD PTR [rsp],rdx
  4053e0:	41 32 8d 40 a6 40 00 	xor    cl,BYTE PTR [r13+0x40a640]
  4053e7:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  4053ec:	32 8a 40 a8 40 00    	xor    cl,BYTE PTR [rdx+0x40a840]
  4053f2:	0f b6 90 40 a9 40 00 	movzx  edx,BYTE PTR [rax+0x40a940]
  4053f9:	0f b6 46 0a          	movzx  eax,BYTE PTR [rsi+0xa]
  4053fd:	32 54 24 32          	xor    dl,BYTE PTR [rsp+0x32]
  405401:	32 93 40 a6 40 00    	xor    dl,BYTE PTR [rbx+0x40a640]
  405407:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
  40540c:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
  405411:	44 0f b6 46 0f       	movzx  r8d,BYTE PTR [rsi+0xf]
  405416:	32 90 40 a8 40 00    	xor    dl,BYTE PTR [rax+0x40a840]
  40541c:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  405421:	0f b6 87 40 a9 40 00 	movzx  eax,BYTE PTR [rdi+0x40a940]
  405428:	0f b6 7e 07          	movzx  edi,BYTE PTR [rsi+0x7]
  40542c:	32 44 24 33          	xor    al,BYTE PTR [rsp+0x33]
  405430:	32 87 40 a6 40 00    	xor    al,BYTE PTR [rdi+0x40a640]
  405436:	48 89 7c 24 20       	mov    QWORD PTR [rsp+0x20],rdi
  40543b:	41 32 82 40 a8 40 00 	xor    al,BYTE PTR [r10+0x40a840]
  405442:	44 0f b6 16          	movzx  r10d,BYTE PTR [rsi]
  405446:	41 0f b6 ba 40 a9 40 	movzx  edi,BYTE PTR [r10+0x40a940]
  40544d:	00 
  40544e:	40 32 7c 24 30       	xor    dil,BYTE PTR [rsp+0x30]
  405453:	0f b6 6e 04          	movzx  ebp,BYTE PTR [rsi+0x4]
  405457:	44 0f b6 66 08       	movzx  r12d,BYTE PTR [rsi+0x8]
  40545c:	44 0f b6 5e 0c       	movzx  r11d,BYTE PTR [rsi+0xc]
  405461:	41 32 8f 40 a4 40 00 	xor    cl,BYTE PTR [r15+0x40a440]
  405468:	41 32 91 40 a4 40 00 	xor    dl,BYTE PTR [r9+0x40a440]
  40546f:	41 32 80 40 a4 40 00 	xor    al,BYTE PTR [r8+0x40a440]
  405476:	40 32 bd 40 a6 40 00 	xor    dil,BYTE PTR [rbp+0x40a640]
  40547d:	41 32 bc 24 40 a8 40 	xor    dil,BYTE PTR [r12+0x40a840]
  405484:	00 
  405485:	41 32 bb 40 a4 40 00 	xor    dil,BYTE PTR [r11+0x40a440]
  40548c:	88 4c 24 31          	mov    BYTE PTR [rsp+0x31],cl
  405490:	88 54 24 32          	mov    BYTE PTR [rsp+0x32],dl
  405494:	88 44 24 33          	mov    BYTE PTR [rsp+0x33],al
  405498:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  40549c:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  4054a1:	41 0f b6 8e 40 a4 40 	movzx  ecx,BYTE PTR [r14+0x40a440]
  4054a8:	00 
  4054a9:	32 4c 24 35          	xor    cl,BYTE PTR [rsp+0x35]
  4054ad:	40 88 7c 24 30       	mov    BYTE PTR [rsp+0x30],dil
  4054b2:	41 32 8d 40 a9 40 00 	xor    cl,BYTE PTR [r13+0x40a940]
  4054b9:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
  4054be:	32 8a 40 a6 40 00    	xor    cl,BYTE PTR [rdx+0x40a640]
  4054c4:	0f b6 90 40 a4 40 00 	movzx  edx,BYTE PTR [rax+0x40a440]
  4054cb:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  4054d0:	32 54 24 36          	xor    dl,BYTE PTR [rsp+0x36]
  4054d4:	32 93 40 a9 40 00    	xor    dl,BYTE PTR [rbx+0x40a940]
  4054da:	32 90 40 a6 40 00    	xor    dl,BYTE PTR [rax+0x40a640]
  4054e0:	0f b6 87 40 a4 40 00 	movzx  eax,BYTE PTR [rdi+0x40a440]
  4054e7:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
  4054ec:	32 44 24 37          	xor    al,BYTE PTR [rsp+0x37]
  4054f0:	32 87 40 a9 40 00    	xor    al,BYTE PTR [rdi+0x40a940]
  4054f6:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
  4054fb:	32 87 40 a6 40 00    	xor    al,BYTE PTR [rdi+0x40a640]
  405501:	41 0f b6 ba 40 a4 40 	movzx  edi,BYTE PTR [r10+0x40a440]
  405508:	00 
  405509:	41 32 8f 40 a8 40 00 	xor    cl,BYTE PTR [r15+0x40a840]
  405510:	41 32 91 40 a8 40 00 	xor    dl,BYTE PTR [r9+0x40a840]
  405517:	41 32 80 40 a8 40 00 	xor    al,BYTE PTR [r8+0x40a840]
  40551e:	40 32 7c 24 34       	xor    dil,BYTE PTR [rsp+0x34]
  405523:	40 32 bd 40 a9 40 00 	xor    dil,BYTE PTR [rbp+0x40a940]
  40552a:	41 32 bc 24 40 a6 40 	xor    dil,BYTE PTR [r12+0x40a640]
  405531:	00 
  405532:	88 4c 24 35          	mov    BYTE PTR [rsp+0x35],cl
  405536:	88 54 24 36          	mov    BYTE PTR [rsp+0x36],dl
  40553a:	0f b6 4c 24 39       	movzx  ecx,BYTE PTR [rsp+0x39]
  40553f:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  405543:	41 32 bb 40 a8 40 00 	xor    dil,BYTE PTR [r11+0x40a840]
  40554a:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
  40554e:	41 32 8e 40 a8 40 00 	xor    cl,BYTE PTR [r14+0x40a840]
  405555:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  40555a:	41 32 8d 40 a4 40 00 	xor    cl,BYTE PTR [r13+0x40a440]
  405561:	32 8a 40 a9 40 00    	xor    cl,BYTE PTR [rdx+0x40a940]
  405567:	0f b6 54 24 3a       	movzx  edx,BYTE PTR [rsp+0x3a]
  40556c:	32 90 40 a8 40 00    	xor    dl,BYTE PTR [rax+0x40a840]
  405572:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  405577:	40 88 7c 24 34       	mov    BYTE PTR [rsp+0x34],dil
  40557c:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
  405581:	32 93 40 a4 40 00    	xor    dl,BYTE PTR [rbx+0x40a440]
  405587:	32 90 40 a9 40 00    	xor    dl,BYTE PTR [rax+0x40a940]
  40558d:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [rsp+0x3b]
  405592:	32 87 40 a8 40 00    	xor    al,BYTE PTR [rdi+0x40a840]
  405598:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
  40559d:	32 87 40 a4 40 00    	xor    al,BYTE PTR [rdi+0x40a440]
  4055a3:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
  4055a8:	32 87 40 a9 40 00    	xor    al,BYTE PTR [rdi+0x40a940]
  4055ae:	0f b6 7c 24 38       	movzx  edi,BYTE PTR [rsp+0x38]
  4055b3:	41 32 ba 40 a8 40 00 	xor    dil,BYTE PTR [r10+0x40a840]
  4055ba:	40 32 bd 40 a4 40 00 	xor    dil,BYTE PTR [rbp+0x40a440]
  4055c1:	41 32 91 40 a6 40 00 	xor    dl,BYTE PTR [r9+0x40a640]
  4055c8:	41 32 80 40 a6 40 00 	xor    al,BYTE PTR [r8+0x40a640]
  4055cf:	41 32 8f 40 a6 40 00 	xor    cl,BYTE PTR [r15+0x40a640]
  4055d6:	41 32 bc 24 40 a9 40 	xor    dil,BYTE PTR [r12+0x40a940]
  4055dd:	00 
  4055de:	41 32 bb 40 a6 40 00 	xor    dil,BYTE PTR [r11+0x40a640]
  4055e5:	88 54 24 3a          	mov    BYTE PTR [rsp+0x3a],dl
  4055e9:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  4055ed:	88 44 24 3b          	mov    BYTE PTR [rsp+0x3b],al
  4055f1:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [rsp+0x3d]
  4055f6:	41 32 86 40 a6 40 00 	xor    al,BYTE PTR [r14+0x40a640]
  4055fd:	88 4c 24 39          	mov    BYTE PTR [rsp+0x39],cl
  405601:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
  405606:	41 32 85 40 a8 40 00 	xor    al,BYTE PTR [r13+0x40a840]
  40560d:	32 82 40 a4 40 00    	xor    al,BYTE PTR [rdx+0x40a440]
  405613:	0f b6 54 24 3e       	movzx  edx,BYTE PTR [rsp+0x3e]
  405618:	40 88 7c 24 38       	mov    BYTE PTR [rsp+0x38],dil
  40561d:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
  405622:	32 91 40 a6 40 00    	xor    dl,BYTE PTR [rcx+0x40a640]
  405628:	0f b6 4c 24 3f       	movzx  ecx,BYTE PTR [rsp+0x3f]
  40562d:	32 93 40 a8 40 00    	xor    dl,BYTE PTR [rbx+0x40a840]
  405633:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
  405638:	32 93 40 a4 40 00    	xor    dl,BYTE PTR [rbx+0x40a440]
  40563e:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
  405643:	32 8b 40 a6 40 00    	xor    cl,BYTE PTR [rbx+0x40a640]
  405649:	32 8f 40 a8 40 00    	xor    cl,BYTE PTR [rdi+0x40a840]
  40564f:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
  405654:	32 8f 40 a4 40 00    	xor    cl,BYTE PTR [rdi+0x40a440]
  40565a:	41 0f b6 ba 40 a6 40 	movzx  edi,BYTE PTR [r10+0x40a640]
  405661:	00 
  405662:	40 32 7c 24 3c       	xor    dil,BYTE PTR [rsp+0x3c]
  405667:	40 32 bd 40 a8 40 00 	xor    dil,BYTE PTR [rbp+0x40a840]
  40566e:	41 32 bc 24 40 a4 40 	xor    dil,BYTE PTR [r12+0x40a440]
  405675:	00 
  405676:	41 32 bb 40 a9 40 00 	xor    dil,BYTE PTR [r11+0x40a940]
  40567d:	41 32 87 40 a9 40 00 	xor    al,BYTE PTR [r15+0x40a940]
  405684:	41 32 91 40 a9 40 00 	xor    dl,BYTE PTR [r9+0x40a940]
  40568b:	41 32 88 40 a9 40 00 	xor    cl,BYTE PTR [r8+0x40a940]
  405692:	88 44 24 3d          	mov    BYTE PTR [rsp+0x3d],al
  405696:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
  40569b:	40 88 7c 24 3c       	mov    BYTE PTR [rsp+0x3c],dil
  4056a0:	88 54 24 3e          	mov    BYTE PTR [rsp+0x3e],dl
  4056a4:	88 4c 24 3f          	mov    BYTE PTR [rsp+0x3f],cl
  4056a8:	48 8b 54 24 38       	mov    rdx,QWORD PTR [rsp+0x38]
  4056ad:	48 89 06             	mov    QWORD PTR [rsi],rax
  4056b0:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
  4056b5:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  4056bc:	00 00 
  4056be:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
  4056c2:	75 0f                	jne    4056d3 <AES::InvMixColumns(unsigned char (*) [4])+0x363>
  4056c4:	48 83 c4 58          	add    rsp,0x58
  4056c8:	5b                   	pop    rbx
  4056c9:	5d                   	pop    rbp
  4056ca:	41 5c                	pop    r12
  4056cc:	41 5d                	pop    r13
  4056ce:	41 5e                	pop    r14
  4056d0:	41 5f                	pop    r15
  4056d2:	c3                   	ret    
  4056d3:	e8 e8 c2 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  4056d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4056df:	00 

00000000004056e0 <AES::InvShiftRows(unsigned char (*) [4])>:
  4056e0:	48 83 ec 18          	sub    rsp,0x18
  4056e4:	31 d2                	xor    edx,edx
  4056e6:	8a 56 07             	mov    dl,BYTE PTR [rsi+0x7]
  4056e9:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  4056f0:	00 00 
  4056f2:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  4056f7:	31 c0                	xor    eax,eax
  4056f9:	0f b6 46 04          	movzx  eax,BYTE PTR [rsi+0x4]
  4056fd:	88 c6                	mov    dh,al
  4056ff:	0f b6 46 05          	movzx  eax,BYTE PTR [rsi+0x5]
  405703:	c1 e0 10             	shl    eax,0x10
  405706:	89 c1                	mov    ecx,eax
  405708:	0f b7 c2             	movzx  eax,dx
  40570b:	0f b6 56 06          	movzx  edx,BYTE PTR [rsi+0x6]
  40570f:	09 c8                	or     eax,ecx
  405711:	c1 e2 18             	shl    edx,0x18
  405714:	09 d0                	or     eax,edx
  405716:	31 d2                	xor    edx,edx
  405718:	8a 56 0a             	mov    dl,BYTE PTR [rsi+0xa]
  40571b:	89 46 04             	mov    DWORD PTR [rsi+0x4],eax
  40571e:	0f b6 46 0b          	movzx  eax,BYTE PTR [rsi+0xb]
  405722:	88 c6                	mov    dh,al
  405724:	0f b6 46 08          	movzx  eax,BYTE PTR [rsi+0x8]
  405728:	c1 e0 10             	shl    eax,0x10
  40572b:	89 c1                	mov    ecx,eax
  40572d:	0f b7 c2             	movzx  eax,dx
  405730:	0f b6 56 09          	movzx  edx,BYTE PTR [rsi+0x9]
  405734:	09 c8                	or     eax,ecx
  405736:	c1 e2 18             	shl    edx,0x18
  405739:	09 d0                	or     eax,edx
  40573b:	31 d2                	xor    edx,edx
  40573d:	8a 56 0d             	mov    dl,BYTE PTR [rsi+0xd]
  405740:	89 46 08             	mov    DWORD PTR [rsi+0x8],eax
  405743:	0f b6 46 0e          	movzx  eax,BYTE PTR [rsi+0xe]
  405747:	88 c6                	mov    dh,al
  405749:	0f b6 46 0f          	movzx  eax,BYTE PTR [rsi+0xf]
  40574d:	c1 e0 10             	shl    eax,0x10
  405750:	89 c1                	mov    ecx,eax
  405752:	0f b7 c2             	movzx  eax,dx
  405755:	0f b6 56 0c          	movzx  edx,BYTE PTR [rsi+0xc]
  405759:	09 c8                	or     eax,ecx
  40575b:	c1 e2 18             	shl    edx,0x18
  40575e:	09 d0                	or     eax,edx
  405760:	89 46 0c             	mov    DWORD PTR [rsi+0xc],eax
  405763:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  405768:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  40576f:	00 00 
  405771:	75 05                	jne    405778 <AES::InvShiftRows(unsigned char (*) [4])+0x98>
  405773:	48 83 c4 18          	add    rsp,0x18
  405777:	c3                   	ret    
  405778:	e8 43 c2 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  40577d:	90                   	nop
  40577e:	66 90                	xchg   ax,ax

0000000000405780 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)>:
  405780:	45 85 c0             	test   r8d,r8d
  405783:	0f 84 4c 03 00 00    	je     405ad5 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x355>
  405789:	48 8d 46 10          	lea    rax,[rsi+0x10]
  40578d:	4c 8d 49 10          	lea    r9,[rcx+0x10]
  405791:	48 39 c1             	cmp    rcx,rax
  405794:	40 0f 93 c7          	setae  dil
  405798:	4c 39 ce             	cmp    rsi,r9
  40579b:	0f 93 c0             	setae  al
  40579e:	09 c7                	or     edi,eax
  4057a0:	48 8d 42 10          	lea    rax,[rdx+0x10]
  4057a4:	48 39 c1             	cmp    rcx,rax
  4057a7:	41 0f 93 c2          	setae  r10b
  4057ab:	4c 39 ca             	cmp    rdx,r9
  4057ae:	0f 93 c0             	setae  al
  4057b1:	44 09 d0             	or     eax,r10d
  4057b4:	40 84 c7             	test   dil,al
  4057b7:	0f 84 23 03 00 00    	je     405ae0 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x360>
  4057bd:	41 83 f8 13          	cmp    r8d,0x13
  4057c1:	0f 86 19 03 00 00    	jbe    405ae0 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x360>
  4057c7:	48 89 f0             	mov    rax,rsi
  4057ca:	41 55                	push   r13
  4057cc:	41 54                	push   r12
  4057ce:	48 f7 d8             	neg    rax
  4057d1:	55                   	push   rbp
  4057d2:	53                   	push   rbx
  4057d3:	83 e0 0f             	and    eax,0xf
  4057d6:	44 39 c0             	cmp    eax,r8d
  4057d9:	41 0f 47 c0          	cmova  eax,r8d
  4057dd:	31 ff                	xor    edi,edi
  4057df:	85 c0                	test   eax,eax
  4057e1:	0f 84 34 01 00 00    	je     40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  4057e7:	0f b6 3e             	movzx  edi,BYTE PTR [rsi]
  4057ea:	40 32 3a             	xor    dil,BYTE PTR [rdx]
  4057ed:	83 f8 01             	cmp    eax,0x1
  4057f0:	40 88 39             	mov    BYTE PTR [rcx],dil
  4057f3:	0f 84 17 03 00 00    	je     405b10 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x390>
  4057f9:	0f b6 7e 01          	movzx  edi,BYTE PTR [rsi+0x1]
  4057fd:	40 32 7a 01          	xor    dil,BYTE PTR [rdx+0x1]
  405801:	83 f8 02             	cmp    eax,0x2
  405804:	40 88 79 01          	mov    BYTE PTR [rcx+0x1],dil
  405808:	0f 84 12 03 00 00    	je     405b20 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x3a0>
  40580e:	0f b6 7e 02          	movzx  edi,BYTE PTR [rsi+0x2]
  405812:	40 32 7a 02          	xor    dil,BYTE PTR [rdx+0x2]
  405816:	83 f8 03             	cmp    eax,0x3
  405819:	40 88 79 02          	mov    BYTE PTR [rcx+0x2],dil
  40581d:	0f 84 0d 03 00 00    	je     405b30 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x3b0>
  405823:	0f b6 7e 03          	movzx  edi,BYTE PTR [rsi+0x3]
  405827:	40 32 7a 03          	xor    dil,BYTE PTR [rdx+0x3]
  40582b:	83 f8 04             	cmp    eax,0x4
  40582e:	40 88 79 03          	mov    BYTE PTR [rcx+0x3],dil
  405832:	0f 84 08 03 00 00    	je     405b40 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x3c0>
  405838:	0f b6 7e 04          	movzx  edi,BYTE PTR [rsi+0x4]
  40583c:	40 32 7a 04          	xor    dil,BYTE PTR [rdx+0x4]
  405840:	83 f8 05             	cmp    eax,0x5
  405843:	40 88 79 04          	mov    BYTE PTR [rcx+0x4],dil
  405847:	0f 84 03 03 00 00    	je     405b50 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x3d0>
  40584d:	0f b6 7e 05          	movzx  edi,BYTE PTR [rsi+0x5]
  405851:	40 32 7a 05          	xor    dil,BYTE PTR [rdx+0x5]
  405855:	83 f8 06             	cmp    eax,0x6
  405858:	40 88 79 05          	mov    BYTE PTR [rcx+0x5],dil
  40585c:	0f 84 fe 02 00 00    	je     405b60 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x3e0>
  405862:	0f b6 7e 06          	movzx  edi,BYTE PTR [rsi+0x6]
  405866:	40 32 7a 06          	xor    dil,BYTE PTR [rdx+0x6]
  40586a:	83 f8 07             	cmp    eax,0x7
  40586d:	40 88 79 06          	mov    BYTE PTR [rcx+0x6],dil
  405871:	0f 84 f9 02 00 00    	je     405b70 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x3f0>
  405877:	0f b6 7e 07          	movzx  edi,BYTE PTR [rsi+0x7]
  40587b:	40 32 7a 07          	xor    dil,BYTE PTR [rdx+0x7]
  40587f:	83 f8 08             	cmp    eax,0x8
  405882:	40 88 79 07          	mov    BYTE PTR [rcx+0x7],dil
  405886:	0f 84 f4 02 00 00    	je     405b80 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x400>
  40588c:	0f b6 7e 08          	movzx  edi,BYTE PTR [rsi+0x8]
  405890:	40 32 7a 08          	xor    dil,BYTE PTR [rdx+0x8]
  405894:	83 f8 09             	cmp    eax,0x9
  405897:	40 88 79 08          	mov    BYTE PTR [rcx+0x8],dil
  40589b:	0f 84 ef 02 00 00    	je     405b90 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x410>
  4058a1:	0f b6 7e 09          	movzx  edi,BYTE PTR [rsi+0x9]
  4058a5:	40 32 7a 09          	xor    dil,BYTE PTR [rdx+0x9]
  4058a9:	83 f8 0a             	cmp    eax,0xa
  4058ac:	40 88 79 09          	mov    BYTE PTR [rcx+0x9],dil
  4058b0:	0f 84 ea 02 00 00    	je     405ba0 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x420>
  4058b6:	0f b6 7e 0a          	movzx  edi,BYTE PTR [rsi+0xa]
  4058ba:	40 32 7a 0a          	xor    dil,BYTE PTR [rdx+0xa]
  4058be:	83 f8 0b             	cmp    eax,0xb
  4058c1:	40 88 79 0a          	mov    BYTE PTR [rcx+0xa],dil
  4058c5:	0f 84 e5 02 00 00    	je     405bb0 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x430>
  4058cb:	0f b6 7e 0b          	movzx  edi,BYTE PTR [rsi+0xb]
  4058cf:	40 32 7a 0b          	xor    dil,BYTE PTR [rdx+0xb]
  4058d3:	83 f8 0c             	cmp    eax,0xc
  4058d6:	40 88 79 0b          	mov    BYTE PTR [rcx+0xb],dil
  4058da:	0f 84 e0 02 00 00    	je     405bc0 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x440>
  4058e0:	0f b6 7e 0c          	movzx  edi,BYTE PTR [rsi+0xc]
  4058e4:	40 32 7a 0c          	xor    dil,BYTE PTR [rdx+0xc]
  4058e8:	83 f8 0d             	cmp    eax,0xd
  4058eb:	40 88 79 0c          	mov    BYTE PTR [rcx+0xc],dil
  4058ef:	0f 84 db 02 00 00    	je     405bd0 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x450>
  4058f5:	0f b6 7e 0d          	movzx  edi,BYTE PTR [rsi+0xd]
  4058f9:	40 32 7a 0d          	xor    dil,BYTE PTR [rdx+0xd]
  4058fd:	83 f8 0e             	cmp    eax,0xe
  405900:	40 88 79 0d          	mov    BYTE PTR [rcx+0xd],dil
  405904:	0f 84 f6 01 00 00    	je     405b00 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x380>
  40590a:	0f b6 7e 0e          	movzx  edi,BYTE PTR [rsi+0xe]
  40590e:	40 32 7a 0e          	xor    dil,BYTE PTR [rdx+0xe]
  405912:	40 88 79 0e          	mov    BYTE PTR [rcx+0xe],dil
  405916:	bf 0f 00 00 00       	mov    edi,0xf
  40591b:	44 89 c3             	mov    ebx,r8d
  40591e:	45 8d 58 ff          	lea    r11d,[r8-0x1]
  405922:	41 89 c2             	mov    r10d,eax
  405925:	29 c3                	sub    ebx,eax
  405927:	44 8d 4b f0          	lea    r9d,[rbx-0x10]
  40592b:	41 29 c3             	sub    r11d,eax
  40592e:	41 c1 e9 04          	shr    r9d,0x4
  405932:	41 83 c1 01          	add    r9d,0x1
  405936:	44 89 cd             	mov    ebp,r9d
  405939:	c1 e5 04             	shl    ebp,0x4
  40593c:	41 83 fb 0e          	cmp    r11d,0xe
  405940:	76 39                	jbe    40597b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x1fb>
  405942:	4e 8d 2c 16          	lea    r13,[rsi+r10*1]
  405946:	4e 8d 24 12          	lea    r12,[rdx+r10*1]
  40594a:	31 c0                	xor    eax,eax
  40594c:	49 01 ca             	add    r10,rcx
  40594f:	45 31 db             	xor    r11d,r11d
  405952:	f3 41 0f 6f 04 04    	movdqu xmm0,XMMWORD PTR [r12+rax*1]
  405958:	41 83 c3 01          	add    r11d,0x1
  40595c:	66 41 0f ef 44 05 00 	pxor   xmm0,XMMWORD PTR [r13+rax*1+0x0]
  405963:	41 0f 11 04 02       	movups XMMWORD PTR [r10+rax*1],xmm0
  405968:	48 83 c0 10          	add    rax,0x10
  40596c:	45 39 cb             	cmp    r11d,r9d
  40596f:	72 e1                	jb     405952 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x1d2>
  405971:	01 ef                	add    edi,ebp
  405973:	39 eb                	cmp    ebx,ebp
  405975:	0f 84 54 01 00 00    	je     405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  40597b:	89 f8                	mov    eax,edi
  40597d:	44 0f b6 0c 02       	movzx  r9d,BYTE PTR [rdx+rax*1]
  405982:	44 32 0c 06          	xor    r9b,BYTE PTR [rsi+rax*1]
  405986:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  40598a:	8d 47 01             	lea    eax,[rdi+0x1]
  40598d:	41 39 c0             	cmp    r8d,eax
  405990:	0f 86 39 01 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405996:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  40599b:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  40599f:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  4059a3:	8d 47 02             	lea    eax,[rdi+0x2]
  4059a6:	41 39 c0             	cmp    r8d,eax
  4059a9:	0f 86 20 01 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  4059af:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  4059b4:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  4059b8:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  4059bc:	8d 47 03             	lea    eax,[rdi+0x3]
  4059bf:	41 39 c0             	cmp    r8d,eax
  4059c2:	0f 86 07 01 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  4059c8:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  4059cd:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  4059d1:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  4059d5:	8d 47 04             	lea    eax,[rdi+0x4]
  4059d8:	41 39 c0             	cmp    r8d,eax
  4059db:	0f 86 ee 00 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  4059e1:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  4059e6:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  4059ea:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  4059ee:	8d 47 05             	lea    eax,[rdi+0x5]
  4059f1:	41 39 c0             	cmp    r8d,eax
  4059f4:	0f 86 d5 00 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  4059fa:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  4059ff:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405a03:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405a07:	8d 47 06             	lea    eax,[rdi+0x6]
  405a0a:	41 39 c0             	cmp    r8d,eax
  405a0d:	0f 86 bc 00 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405a13:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405a18:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405a1c:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405a20:	8d 47 07             	lea    eax,[rdi+0x7]
  405a23:	41 39 c0             	cmp    r8d,eax
  405a26:	0f 86 a3 00 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405a2c:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405a31:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405a35:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405a39:	8d 47 08             	lea    eax,[rdi+0x8]
  405a3c:	41 39 c0             	cmp    r8d,eax
  405a3f:	0f 86 8a 00 00 00    	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405a45:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405a4a:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405a4e:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405a52:	8d 47 09             	lea    eax,[rdi+0x9]
  405a55:	41 39 c0             	cmp    r8d,eax
  405a58:	76 75                	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405a5a:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405a5f:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405a63:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405a67:	8d 47 0a             	lea    eax,[rdi+0xa]
  405a6a:	41 39 c0             	cmp    r8d,eax
  405a6d:	76 60                	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405a6f:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405a74:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405a78:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405a7c:	8d 47 0b             	lea    eax,[rdi+0xb]
  405a7f:	41 39 c0             	cmp    r8d,eax
  405a82:	76 4b                	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405a84:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405a89:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405a8d:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405a91:	8d 47 0c             	lea    eax,[rdi+0xc]
  405a94:	41 39 c0             	cmp    r8d,eax
  405a97:	76 36                	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405a99:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405a9e:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405aa2:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405aa6:	8d 47 0d             	lea    eax,[rdi+0xd]
  405aa9:	41 39 c0             	cmp    r8d,eax
  405aac:	76 21                	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405aae:	44 0f b6 0c 06       	movzx  r9d,BYTE PTR [rsi+rax*1]
  405ab3:	44 32 0c 02          	xor    r9b,BYTE PTR [rdx+rax*1]
  405ab7:	44 88 0c 01          	mov    BYTE PTR [rcx+rax*1],r9b
  405abb:	8d 47 0e             	lea    eax,[rdi+0xe]
  405abe:	41 39 c0             	cmp    r8d,eax
  405ac1:	76 0c                	jbe    405acf <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x34f>
  405ac3:	0f b6 34 06          	movzx  esi,BYTE PTR [rsi+rax*1]
  405ac7:	40 32 34 02          	xor    sil,BYTE PTR [rdx+rax*1]
  405acb:	40 88 34 01          	mov    BYTE PTR [rcx+rax*1],sil
  405acf:	5b                   	pop    rbx
  405ad0:	5d                   	pop    rbp
  405ad1:	41 5c                	pop    r12
  405ad3:	41 5d                	pop    r13
  405ad5:	f3 c3                	repz ret 
  405ad7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  405ade:	00 00 
  405ae0:	31 c0                	xor    eax,eax
  405ae2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405ae8:	0f b6 3c 06          	movzx  edi,BYTE PTR [rsi+rax*1]
  405aec:	40 32 3c 02          	xor    dil,BYTE PTR [rdx+rax*1]
  405af0:	40 88 3c 01          	mov    BYTE PTR [rcx+rax*1],dil
  405af4:	48 83 c0 01          	add    rax,0x1
  405af8:	41 39 c0             	cmp    r8d,eax
  405afb:	77 eb                	ja     405ae8 <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x368>
  405afd:	f3 c3                	repz ret 
  405aff:	90                   	nop
  405b00:	bf 0e 00 00 00       	mov    edi,0xe
  405b05:	e9 11 fe ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b0a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b10:	bf 01 00 00 00       	mov    edi,0x1
  405b15:	e9 01 fe ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b1a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b20:	bf 02 00 00 00       	mov    edi,0x2
  405b25:	e9 f1 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b30:	bf 03 00 00 00       	mov    edi,0x3
  405b35:	e9 e1 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b3a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b40:	bf 04 00 00 00       	mov    edi,0x4
  405b45:	e9 d1 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b4a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b50:	bf 05 00 00 00       	mov    edi,0x5
  405b55:	e9 c1 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b60:	bf 06 00 00 00       	mov    edi,0x6
  405b65:	e9 b1 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b70:	bf 07 00 00 00       	mov    edi,0x7
  405b75:	e9 a1 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b80:	bf 08 00 00 00       	mov    edi,0x8
  405b85:	e9 91 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405b90:	bf 09 00 00 00       	mov    edi,0x9
  405b95:	e9 81 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405b9a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405ba0:	bf 0a 00 00 00       	mov    edi,0xa
  405ba5:	e9 71 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405baa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405bb0:	bf 0b 00 00 00       	mov    edi,0xb
  405bb5:	e9 61 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405bba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405bc0:	bf 0c 00 00 00       	mov    edi,0xc
  405bc5:	e9 51 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405bca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  405bd0:	bf 0d 00 00 00       	mov    edi,0xd
  405bd5:	e9 41 fd ff ff       	jmp    40591b <AES::XorBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned int)+0x19b>
  405bda:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000405be0 <AES::printHexArray(unsigned char*, unsigned int)>:
  405be0:	85 d2                	test   edx,edx
  405be2:	74 37                	je     405c1b <AES::printHexArray(unsigned char*, unsigned int)+0x3b>
  405be4:	8d 42 ff             	lea    eax,[rdx-0x1]
  405be7:	55                   	push   rbp
  405be8:	53                   	push   rbx
  405be9:	48 89 f3             	mov    rbx,rsi
  405bec:	48 8d 6c 06 01       	lea    rbp,[rsi+rax*1+0x1]
  405bf1:	48 83 ec 08          	sub    rsp,0x8
  405bf5:	0f 1f 00             	nop    DWORD PTR [rax]
  405bf8:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
  405bfb:	31 c0                	xor    eax,eax
  405bfd:	be 88 99 40 00       	mov    esi,0x409988
  405c02:	bf 01 00 00 00       	mov    edi,0x1
  405c07:	48 83 c3 01          	add    rbx,0x1
  405c0b:	e8 90 bc ff ff       	call   4018a0 <__printf_chk@plt>
  405c10:	48 39 eb             	cmp    rbx,rbp
  405c13:	75 e3                	jne    405bf8 <AES::printHexArray(unsigned char*, unsigned int)+0x18>
  405c15:	48 83 c4 08          	add    rsp,0x8
  405c19:	5b                   	pop    rbx
  405c1a:	5d                   	pop    rbp
  405c1b:	f3 c3                	repz ret 
  405c1d:	90                   	nop
  405c1e:	66 90                	xchg   ax,ax

0000000000405c20 <AES::printHexVector(std::vector<unsigned char, std::allocator<unsigned char> >)>:
  405c20:	48 8b 16             	mov    rdx,QWORD PTR [rsi]
  405c23:	48 39 56 08          	cmp    QWORD PTR [rsi+0x8],rdx
  405c27:	74 48                	je     405c71 <AES::printHexVector(std::vector<unsigned char, std::allocator<unsigned char> >)+0x51>
  405c29:	55                   	push   rbp
  405c2a:	53                   	push   rbx
  405c2b:	48 89 f5             	mov    rbp,rsi
  405c2e:	31 c9                	xor    ecx,ecx
  405c30:	31 db                	xor    ebx,ebx
  405c32:	48 83 ec 08          	sub    rsp,0x8
  405c36:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c3d:	00 00 00 
  405c40:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
  405c44:	31 c0                	xor    eax,eax
  405c46:	be 88 99 40 00       	mov    esi,0x409988
  405c4b:	bf 01 00 00 00       	mov    edi,0x1
  405c50:	e8 4b bc ff ff       	call   4018a0 <__printf_chk@plt>
  405c55:	48 8b 55 00          	mov    rdx,QWORD PTR [rbp+0x0]
  405c59:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  405c5d:	8d 4b 01             	lea    ecx,[rbx+0x1]
  405c60:	48 89 cb             	mov    rbx,rcx
  405c63:	48 29 d0             	sub    rax,rdx
  405c66:	48 39 c1             	cmp    rcx,rax
  405c69:	72 d5                	jb     405c40 <AES::printHexVector(std::vector<unsigned char, std::allocator<unsigned char> >)+0x20>
  405c6b:	48 83 c4 08          	add    rsp,0x8
  405c6f:	5b                   	pop    rbx
  405c70:	5d                   	pop    rbp
  405c71:	f3 c3                	repz ret 
  405c73:	90                   	nop
  405c74:	66 90                	xchg   ax,ax
  405c76:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c7d:	00 00 00 

0000000000405c80 <AES::ArrayToVector(unsigned char*, unsigned int)>:
  405c80:	41 56                	push   r14
  405c82:	41 55                	push   r13
  405c84:	49 89 d6             	mov    r14,rdx
  405c87:	41 54                	push   r12
  405c89:	55                   	push   rbp
  405c8a:	89 cd                	mov    ebp,ecx
  405c8c:	53                   	push   rbx
  405c8d:	48 89 fb             	mov    rbx,rdi
  405c90:	48 c7 07 00 00 00 00 	mov    QWORD PTR [rdi],0x0
  405c97:	48 c7 47 08 00 00 00 	mov    QWORD PTR [rdi+0x8],0x0
  405c9e:	00 
  405c9f:	48 c7 47 10 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
  405ca6:	00 
  405ca7:	31 ff                	xor    edi,edi
  405ca9:	48 85 ed             	test   rbp,rbp
  405cac:	49 89 ed             	mov    r13,rbp
  405caf:	75 2f                	jne    405ce0 <AES::ArrayToVector(unsigned char*, unsigned int)+0x60>
  405cb1:	4c 8d 24 2f          	lea    r12,[rdi+rbp*1]
  405cb5:	45 85 ed             	test   r13d,r13d
  405cb8:	48 89 3b             	mov    QWORD PTR [rbx],rdi
  405cbb:	4c 89 63 10          	mov    QWORD PTR [rbx+0x10],r12
  405cbf:	74 0b                	je     405ccc <AES::ArrayToVector(unsigned char*, unsigned int)+0x4c>
  405cc1:	48 89 ea             	mov    rdx,rbp
  405cc4:	4c 89 f6             	mov    rsi,r14
  405cc7:	e8 24 be ff ff       	call   401af0 <memcpy@plt>
  405ccc:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
  405cd0:	48 89 d8             	mov    rax,rbx
  405cd3:	5b                   	pop    rbx
  405cd4:	5d                   	pop    rbp
  405cd5:	41 5c                	pop    r12
  405cd7:	41 5d                	pop    r13
  405cd9:	41 5e                	pop    r14
  405cdb:	c3                   	ret    
  405cdc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  405ce0:	48 89 ef             	mov    rdi,rbp
  405ce3:	e8 b8 bd ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  405ce8:	48 89 c7             	mov    rdi,rax
  405ceb:	eb c4                	jmp    405cb1 <AES::ArrayToVector(unsigned char*, unsigned int)+0x31>
  405ced:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
  405cf0:	48 89 c5             	mov    rbp,rax
  405cf3:	48 85 ff             	test   rdi,rdi
  405cf6:	74 05                	je     405cfd <AES::ArrayToVector(unsigned char*, unsigned int)+0x7d>
  405cf8:	e8 83 bb ff ff       	call   401880 <operator delete(void*)@plt>
  405cfd:	48 89 ef             	mov    rdi,rbp
  405d00:	e8 ab bd ff ff       	call   401ab0 <_Unwind_Resume@plt>
  405d05:	90                   	nop
  405d06:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d0d:	00 00 00 

0000000000405d10 <AES::VectorToArray(std::vector<unsigned char, std::allocator<unsigned char> >&)>:
  405d10:	48 8b 06             	mov    rax,QWORD PTR [rsi]
  405d13:	c3                   	ret    
  405d14:	66 90                	xchg   ax,ax
  405d16:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d1d:	00 00 00 

0000000000405d20 <SHA256::SHA256()>:
  405d20:	c7 47 40 00 00 00 00 	mov    DWORD PTR [rdi+0x40],0x0
  405d27:	48 c7 47 48 00 00 00 	mov    QWORD PTR [rdi+0x48],0x0
  405d2e:	00 
  405d2f:	c7 47 50 67 e6 09 6a 	mov    DWORD PTR [rdi+0x50],0x6a09e667
  405d36:	c7 47 54 85 ae 67 bb 	mov    DWORD PTR [rdi+0x54],0xbb67ae85
  405d3d:	c7 47 58 72 f3 6e 3c 	mov    DWORD PTR [rdi+0x58],0x3c6ef372
  405d44:	c7 47 5c 3a f5 4f a5 	mov    DWORD PTR [rdi+0x5c],0xa54ff53a
  405d4b:	c7 47 60 7f 52 0e 51 	mov    DWORD PTR [rdi+0x60],0x510e527f
  405d52:	c7 47 64 8c 68 05 9b 	mov    DWORD PTR [rdi+0x64],0x9b05688c
  405d59:	c7 47 68 ab d9 83 1f 	mov    DWORD PTR [rdi+0x68],0x1f83d9ab
  405d60:	c7 47 6c 19 cd e0 5b 	mov    DWORD PTR [rdi+0x6c],0x5be0cd19
  405d67:	c3                   	ret    
  405d68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  405d6f:	00 

0000000000405d70 <SHA256::rotr(unsigned int, unsigned int)>:
  405d70:	89 f8                	mov    eax,edi
  405d72:	89 f1                	mov    ecx,esi
  405d74:	d3 c8                	ror    eax,cl
  405d76:	c3                   	ret    
  405d77:	90                   	nop
  405d78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  405d7f:	00 

0000000000405d80 <SHA256::choose(unsigned int, unsigned int, unsigned int)>:
  405d80:	89 f8                	mov    eax,edi
  405d82:	21 fe                	and    esi,edi
  405d84:	f7 d0                	not    eax
  405d86:	21 c2                	and    edx,eax
  405d88:	89 d0                	mov    eax,edx
  405d8a:	31 f0                	xor    eax,esi
  405d8c:	c3                   	ret    
  405d8d:	90                   	nop
  405d8e:	66 90                	xchg   ax,ax

0000000000405d90 <SHA256::majority(unsigned int, unsigned int, unsigned int)>:
  405d90:	89 f0                	mov    eax,esi
  405d92:	09 d0                	or     eax,edx
  405d94:	21 f2                	and    edx,esi
  405d96:	21 c7                	and    edi,eax
  405d98:	89 f8                	mov    eax,edi
  405d9a:	09 d0                	or     eax,edx
  405d9c:	c3                   	ret    
  405d9d:	90                   	nop
  405d9e:	66 90                	xchg   ax,ax

0000000000405da0 <SHA256::sig0(unsigned int)>:
  405da0:	89 fa                	mov    edx,edi
  405da2:	89 f8                	mov    eax,edi
  405da4:	c1 ef 03             	shr    edi,0x3
  405da7:	c1 ca 07             	ror    edx,0x7
  405daa:	c1 c0 0e             	rol    eax,0xe
  405dad:	31 d0                	xor    eax,edx
  405daf:	31 f8                	xor    eax,edi
  405db1:	c3                   	ret    
  405db2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  405db6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  405dbd:	00 00 00 

0000000000405dc0 <SHA256::sig1(unsigned int)>:
  405dc0:	89 fa                	mov    edx,edi
  405dc2:	89 f8                	mov    eax,edi
  405dc4:	c1 ef 0a             	shr    edi,0xa
  405dc7:	c1 c2 0f             	rol    edx,0xf
  405dca:	c1 c0 0d             	rol    eax,0xd
  405dcd:	31 d0                	xor    eax,edx
  405dcf:	31 f8                	xor    eax,edi
  405dd1:	c3                   	ret    
  405dd2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  405dd6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  405ddd:	00 00 00 

0000000000405de0 <SHA256::transform()>:
  405de0:	41 56                	push   r14
  405de2:	41 55                	push   r13
  405de4:	be 10 00 00 00       	mov    esi,0x10
  405de9:	41 54                	push   r12
  405deb:	55                   	push   rbp
  405dec:	53                   	push   rbx
  405ded:	66 0f ef f6          	pxor   xmm6,xmm6
  405df1:	48 81 ec 40 01 00 00 	sub    rsp,0x140
  405df8:	66 0f 6f 0d b0 4e 00 	movdqa xmm1,XMMWORD PTR [rip+0x4eb0]        # 40acb0 <typeinfo for int (*)(int, int)+0x50>
  405dff:	00 
  405e00:	4c 8d 54 24 54       	lea    r10,[rsp+0x54]
  405e05:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  405e0c:	00 00 
  405e0e:	48 89 84 24 38 01 00 	mov    QWORD PTR [rsp+0x138],rax
  405e15:	00 
  405e16:	31 c0                	xor    eax,eax
  405e18:	f3 0f 6f 07          	movdqu xmm0,XMMWORD PTR [rdi]
  405e1c:	66 44 0f 6f c1       	movdqa xmm8,xmm1
  405e21:	66 0f 6f e9          	movdqa xmm5,xmm1
  405e25:	f3 0f 6f 5f 10       	movdqu xmm3,XMMWORD PTR [rdi+0x10]
  405e2a:	66 44 0f db c0       	pand   xmm8,xmm0
  405e2f:	66 0f 71 d0 08       	psrlw  xmm0,0x8
  405e34:	66 0f 6f f9          	movdqa xmm7,xmm1
  405e38:	66 0f db eb          	pand   xmm5,xmm3
  405e3c:	66 0f 71 d3 08       	psrlw  xmm3,0x8
  405e41:	f3 0f 6f 57 20       	movdqu xmm2,XMMWORD PTR [rdi+0x20]
  405e46:	66 0f 67 c3          	packuswb xmm0,xmm3
  405e4a:	66 0f 6f d9          	movdqa xmm3,xmm1
  405e4e:	66 44 0f 67 c5       	packuswb xmm8,xmm5
  405e53:	f3 0f 6f 67 30       	movdqu xmm4,XMMWORD PTR [rdi+0x30]
  405e58:	66 0f 6f e9          	movdqa xmm5,xmm1
  405e5c:	66 0f db da          	pand   xmm3,xmm2
  405e60:	66 0f 71 d2 08       	psrlw  xmm2,0x8
  405e65:	66 0f db ec          	pand   xmm5,xmm4
  405e69:	66 0f 71 d4 08       	psrlw  xmm4,0x8
  405e6e:	66 0f 67 d4          	packuswb xmm2,xmm4
  405e72:	66 0f 6f e1          	movdqa xmm4,xmm1
  405e76:	66 0f db f8          	pand   xmm7,xmm0
  405e7a:	66 0f 71 d0 08       	psrlw  xmm0,0x8
  405e7f:	66 0f 67 dd          	packuswb xmm3,xmm5
  405e83:	66 0f 6f e9          	movdqa xmm5,xmm1
  405e87:	66 41 0f db e0       	pand   xmm4,xmm8
  405e8c:	66 41 0f 71 d0 08    	psrlw  xmm8,0x8
  405e92:	66 0f db ca          	pand   xmm1,xmm2
  405e96:	66 0f 71 d2 08       	psrlw  xmm2,0x8
  405e9b:	66 0f db eb          	pand   xmm5,xmm3
  405e9f:	66 0f 71 d3 08       	psrlw  xmm3,0x8
  405ea4:	66 0f 67 c2          	packuswb xmm0,xmm2
  405ea8:	66 0f 67 f9          	packuswb xmm7,xmm1
  405eac:	66 0f 67 e5          	packuswb xmm4,xmm5
  405eb0:	66 44 0f 67 c3       	packuswb xmm8,xmm3
  405eb5:	66 0f 6f ec          	movdqa xmm5,xmm4
  405eb9:	66 0f 6f d4          	movdqa xmm2,xmm4
  405ebd:	66 0f 6f e7          	movdqa xmm4,xmm7
  405ec1:	66 41 0f 6f d8       	movdqa xmm3,xmm8
  405ec6:	66 0f 60 e6          	punpcklbw xmm4,xmm6
  405eca:	66 41 0f 6f c8       	movdqa xmm1,xmm8
  405ecf:	66 44 0f 6f c0       	movdqa xmm8,xmm0
  405ed4:	66 0f 60 ee          	punpcklbw xmm5,xmm6
  405ed8:	66 0f 68 d6          	punpckhbw xmm2,xmm6
  405edc:	66 44 0f 6f cc       	movdqa xmm9,xmm4
  405ee1:	66 0f 68 fe          	punpckhbw xmm7,xmm6
  405ee5:	66 0f 60 de          	punpcklbw xmm3,xmm6
  405ee9:	66 0f 68 ce          	punpckhbw xmm1,xmm6
  405eed:	66 44 0f 60 c6       	punpcklbw xmm8,xmm6
  405ef2:	66 0f 68 c6          	punpckhbw xmm0,xmm6
  405ef6:	66 0f ef f6          	pxor   xmm6,xmm6
  405efa:	66 44 0f 61 ce       	punpcklwd xmm9,xmm6
  405eff:	66 0f 69 e6          	punpckhwd xmm4,xmm6
  405f03:	66 45 0f 6f d1       	movdqa xmm10,xmm9
  405f08:	66 44 0f 6f cd       	movdqa xmm9,xmm5
  405f0d:	66 0f 69 ee          	punpckhwd xmm5,xmm6
  405f11:	66 0f 72 f4 10       	pslld  xmm4,0x10
  405f16:	66 41 0f 72 f2 10    	pslld  xmm10,0x10
  405f1c:	66 44 0f 61 ce       	punpcklwd xmm9,xmm6
  405f21:	66 0f 72 f5 18       	pslld  xmm5,0x18
  405f26:	66 0f eb e5          	por    xmm4,xmm5
  405f2a:	66 41 0f 72 f1 18    	pslld  xmm9,0x18
  405f30:	66 45 0f eb ca       	por    xmm9,xmm10
  405f35:	66 45 0f 6f d0       	movdqa xmm10,xmm8
  405f3a:	66 44 0f 69 c6       	punpckhwd xmm8,xmm6
  405f3f:	66 44 0f 61 d6       	punpcklwd xmm10,xmm6
  405f44:	66 41 0f eb e0       	por    xmm4,xmm8
  405f49:	66 45 0f eb d1       	por    xmm10,xmm9
  405f4e:	66 44 0f 6f cb       	movdqa xmm9,xmm3
  405f53:	66 0f 69 de          	punpckhwd xmm3,xmm6
  405f57:	66 44 0f 61 ce       	punpcklwd xmm9,xmm6
  405f5c:	66 0f 72 f3 08       	pslld  xmm3,0x8
  405f61:	66 0f eb dc          	por    xmm3,xmm4
  405f65:	66 41 0f 72 f1 08    	pslld  xmm9,0x8
  405f6b:	66 45 0f eb ca       	por    xmm9,xmm10
  405f70:	0f 29 5c 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm3
  405f75:	66 0f 6f df          	movdqa xmm3,xmm7
  405f79:	66 0f 69 fe          	punpckhwd xmm7,xmm6
  405f7d:	66 45 0f 7e cb       	movd   r11d,xmm9
  405f82:	66 0f 61 de          	punpcklwd xmm3,xmm6
  405f86:	44 0f 29 4c 24 30    	movaps XMMWORD PTR [rsp+0x30],xmm9
  405f8c:	66 0f 72 f7 10       	pslld  xmm7,0x10
  405f91:	66 0f 6f e3          	movdqa xmm4,xmm3
  405f95:	66 0f 6f da          	movdqa xmm3,xmm2
  405f99:	66 0f 69 d6          	punpckhwd xmm2,xmm6
  405f9d:	66 0f 72 f4 10       	pslld  xmm4,0x10
  405fa2:	66 0f 61 de          	punpcklwd xmm3,xmm6
  405fa6:	66 0f 72 f2 18       	pslld  xmm2,0x18
  405fab:	66 0f eb d7          	por    xmm2,xmm7
  405faf:	66 0f 72 f3 18       	pslld  xmm3,0x18
  405fb4:	66 0f eb dc          	por    xmm3,xmm4
  405fb8:	66 0f 6f e0          	movdqa xmm4,xmm0
  405fbc:	66 0f 69 c6          	punpckhwd xmm0,xmm6
  405fc0:	66 0f 61 e6          	punpcklwd xmm4,xmm6
  405fc4:	66 0f eb c2          	por    xmm0,xmm2
  405fc8:	66 0f eb e3          	por    xmm4,xmm3
  405fcc:	66 0f 6f d9          	movdqa xmm3,xmm1
  405fd0:	66 0f 69 ce          	punpckhwd xmm1,xmm6
  405fd4:	66 0f 61 de          	punpcklwd xmm3,xmm6
  405fd8:	66 0f 72 f1 08       	pslld  xmm1,0x8
  405fdd:	66 0f eb c1          	por    xmm0,xmm1
  405fe1:	66 0f 72 f3 08       	pslld  xmm3,0x8
  405fe6:	66 0f eb dc          	por    xmm3,xmm4
  405fea:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
  405fef:	8b 4c 24 68          	mov    ecx,DWORD PTR [rsp+0x68]
  405ff3:	8b 44 24 6c          	mov    eax,DWORD PTR [rsp+0x6c]
  405ff7:	0f 29 5c 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm3
  405ffc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  406000:	41 89 c8             	mov    r8d,ecx
  406003:	89 ca                	mov    edx,ecx
  406005:	c1 e9 0a             	shr    ecx,0xa
  406008:	41 c1 c0 0d          	rol    r8d,0xd
  40600c:	c1 c2 0f             	rol    edx,0xf
  40600f:	83 c6 02             	add    esi,0x2
  406012:	44 31 c2             	xor    edx,r8d
  406015:	49 83 c2 08          	add    r10,0x8
  406019:	45 8b 4a d8          	mov    r9d,DWORD PTR [r10-0x28]
  40601d:	31 ca                	xor    edx,ecx
  40601f:	44 01 da             	add    edx,r11d
  406022:	41 03 52 f8          	add    edx,DWORD PTR [r10-0x8]
  406026:	45 8b 5a dc          	mov    r11d,DWORD PTR [r10-0x24]
  40602a:	45 89 c8             	mov    r8d,r9d
  40602d:	44 89 c9             	mov    ecx,r9d
  406030:	41 c1 c0 0e          	rol    r8d,0xe
  406034:	c1 c9 07             	ror    ecx,0x7
  406037:	44 31 c1             	xor    ecx,r8d
  40603a:	45 89 c8             	mov    r8d,r9d
  40603d:	41 c1 e8 03          	shr    r8d,0x3
  406041:	44 31 c1             	xor    ecx,r8d
  406044:	41 89 c0             	mov    r8d,eax
  406047:	01 d1                	add    ecx,edx
  406049:	89 c2                	mov    edx,eax
  40604b:	41 c1 c0 0d          	rol    r8d,0xd
  40604f:	c1 c2 0f             	rol    edx,0xf
  406052:	c1 e8 0a             	shr    eax,0xa
  406055:	41 89 4a 14          	mov    DWORD PTR [r10+0x14],ecx
  406059:	41 31 d0             	xor    r8d,edx
  40605c:	44 89 da             	mov    edx,r11d
  40605f:	44 31 c0             	xor    eax,r8d
  406062:	41 03 42 fc          	add    eax,DWORD PTR [r10-0x4]
  406066:	c1 c2 0e             	rol    edx,0xe
  406069:	46 8d 04 08          	lea    r8d,[rax+r9*1]
  40606d:	44 89 d8             	mov    eax,r11d
  406070:	45 89 d9             	mov    r9d,r11d
  406073:	c1 c8 07             	ror    eax,0x7
  406076:	41 c1 e9 03          	shr    r9d,0x3
  40607a:	31 d0                	xor    eax,edx
  40607c:	44 31 c8             	xor    eax,r9d
  40607f:	44 01 c0             	add    eax,r8d
  406082:	41 89 42 18          	mov    DWORD PTR [r10+0x18],eax
  406086:	40 80 fe 3e          	cmp    sil,0x3e
  40608a:	0f 85 70 ff ff ff    	jne    406000 <SHA256::transform()+0x220>
  406090:	44 0f b6 c6          	movzx  r8d,sil
  406094:	83 c6 01             	add    esi,0x1
  406097:	41 8d 40 fe          	lea    eax,[r8-0x2]
  40609b:	4c 89 c2             	mov    rdx,r8
  40609e:	83 ea 10             	sub    edx,0x10
  4060a1:	48 98                	cdqe   
  4060a3:	48 63 d2             	movsxd rdx,edx
  4060a6:	8b 4c 84 30          	mov    ecx,DWORD PTR [rsp+rax*4+0x30]
  4060aa:	41 8d 40 f1          	lea    eax,[r8-0xf]
  4060ae:	8b 54 94 30          	mov    edx,DWORD PTR [rsp+rdx*4+0x30]
  4060b2:	48 98                	cdqe   
  4060b4:	41 89 ca             	mov    r10d,ecx
  4060b7:	41 89 c9             	mov    r9d,ecx
  4060ba:	c1 e9 0a             	shr    ecx,0xa
  4060bd:	41 c1 c2 0f          	rol    r10d,0xf
  4060c1:	41 c1 c1 0d          	rol    r9d,0xd
  4060c5:	8b 44 84 30          	mov    eax,DWORD PTR [rsp+rax*4+0x30]
  4060c9:	45 31 d1             	xor    r9d,r10d
  4060cc:	44 31 c9             	xor    ecx,r9d
  4060cf:	45 8d 48 f9          	lea    r9d,[r8-0x7]
  4060d3:	4d 63 c9             	movsxd r9,r9d
  4060d6:	42 03 54 8c 30       	add    edx,DWORD PTR [rsp+r9*4+0x30]
  4060db:	41 89 c1             	mov    r9d,eax
  4060de:	41 c1 c9 07          	ror    r9d,0x7
  4060e2:	01 d1                	add    ecx,edx
  4060e4:	89 c2                	mov    edx,eax
  4060e6:	c1 e8 03             	shr    eax,0x3
  4060e9:	c1 c2 0e             	rol    edx,0xe
  4060ec:	44 31 ca             	xor    edx,r9d
  4060ef:	31 d0                	xor    eax,edx
  4060f1:	01 c8                	add    eax,ecx
  4060f3:	40 80 fe 40          	cmp    sil,0x40
  4060f7:	42 89 44 84 30       	mov    DWORD PTR [rsp+r8*4+0x30],eax
  4060fc:	75 92                	jne    406090 <SHA256::transform()+0x2b0>
  4060fe:	4c 8b 4f 50          	mov    r9,QWORD PTR [rdi+0x50]
  406102:	4c 8b 47 60          	mov    r8,QWORD PTR [rdi+0x60]
  406106:	45 31 d2             	xor    r10d,r10d
  406109:	48 8b 47 68          	mov    rax,QWORD PTR [rdi+0x68]
  40610d:	4c 8b 6f 58          	mov    r13,QWORD PTR [rdi+0x58]
  406111:	4c 89 ce             	mov    rsi,r9
  406114:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
  406119:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
  40611e:	48 c1 ee 20          	shr    rsi,0x20
  406122:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  406127:	41 89 c4             	mov    r12d,eax
  40612a:	49 89 f3             	mov    r11,rsi
  40612d:	4c 89 c6             	mov    rsi,r8
  406130:	48 c1 e8 20          	shr    rax,0x20
  406134:	48 c1 ee 20          	shr    rsi,0x20
  406138:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
  40613d:	44 89 eb             	mov    ebx,r13d
  406140:	48 89 f5             	mov    rbp,rsi
  406143:	49 c1 ed 20          	shr    r13,0x20
  406147:	48 89 c6             	mov    rsi,rax
  40614a:	eb 16                	jmp    406162 <SHA256::transform()+0x382>
  40614c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  406150:	41 89 ec             	mov    r12d,ebp
  406153:	44 89 db             	mov    ebx,r11d
  406156:	44 89 c5             	mov    ebp,r8d
  406159:	45 89 cb             	mov    r11d,r9d
  40615c:	41 89 c0             	mov    r8d,eax
  40615f:	41 89 d1             	mov    r9d,edx
  406162:	44 89 c0             	mov    eax,r8d
  406165:	89 ea                	mov    edx,ebp
  406167:	45 89 ce             	mov    r14d,r9d
  40616a:	f7 d0                	not    eax
  40616c:	44 21 c2             	and    edx,r8d
  40616f:	41 c1 ce 0d          	ror    r14d,0xd
  406173:	44 21 e0             	and    eax,r12d
  406176:	31 d0                	xor    eax,edx
  406178:	41 8b 92 c0 d1 60 00 	mov    edx,DWORD PTR [r10+0x60d1c0]
  40617f:	42 03 54 14 30       	add    edx,DWORD PTR [rsp+r10*1+0x30]
  406184:	49 83 c2 04          	add    r10,0x4
  406188:	8d 0c 10             	lea    ecx,[rax+rdx*1]
  40618b:	44 89 c2             	mov    edx,r8d
  40618e:	44 89 c0             	mov    eax,r8d
  406191:	c1 ca 0b             	ror    edx,0xb
  406194:	c1 c8 06             	ror    eax,0x6
  406197:	31 d0                	xor    eax,edx
  406199:	44 89 c2             	mov    edx,r8d
  40619c:	c1 c2 07             	rol    edx,0x7
  40619f:	31 d0                	xor    eax,edx
  4061a1:	44 89 ca             	mov    edx,r9d
  4061a4:	01 c8                	add    eax,ecx
  4061a6:	c1 ca 02             	ror    edx,0x2
  4061a9:	44 89 c9             	mov    ecx,r9d
  4061ac:	44 31 f2             	xor    edx,r14d
  4061af:	c1 c1 0a             	rol    ecx,0xa
  4061b2:	01 f0                	add    eax,esi
  4061b4:	31 ca                	xor    edx,ecx
  4061b6:	89 de                	mov    esi,ebx
  4061b8:	41 89 d6             	mov    r14d,edx
  4061bb:	89 da                	mov    edx,ebx
  4061bd:	44 21 de             	and    esi,r11d
  4061c0:	44 09 da             	or     edx,r11d
  4061c3:	44 21 ca             	and    edx,r9d
  4061c6:	89 d1                	mov    ecx,edx
  4061c8:	09 f1                	or     ecx,esi
  4061ca:	44 89 e6             	mov    esi,r12d
  4061cd:	41 8d 14 0e          	lea    edx,[r14+rcx*1]
  4061d1:	01 c2                	add    edx,eax
  4061d3:	44 01 e8             	add    eax,r13d
  4061d6:	49 81 fa 00 01 00 00 	cmp    r10,0x100
  4061dd:	41 89 dd             	mov    r13d,ebx
  4061e0:	0f 85 6a ff ff ff    	jne    406150 <SHA256::transform()+0x370>
  4061e6:	44 89 5c 24 0c       	mov    DWORD PTR [rsp+0xc],r11d
  4061eb:	66 0f 6e 4c 24 0c    	movd   xmm1,DWORD PTR [rsp+0xc]
  4061f1:	89 5c 24 0c          	mov    DWORD PTR [rsp+0xc],ebx
  4061f5:	66 0f 6e 7c 24 0c    	movd   xmm7,DWORD PTR [rsp+0xc]
  4061fb:	89 54 24 0c          	mov    DWORD PTR [rsp+0xc],edx
  4061ff:	66 0f 6e 44 24 0c    	movd   xmm0,DWORD PTR [rsp+0xc]
  406205:	44 89 4c 24 0c       	mov    DWORD PTR [rsp+0xc],r9d
  40620a:	66 0f 62 cf          	punpckldq xmm1,xmm7
  40620e:	66 0f 6e 7c 24 0c    	movd   xmm7,DWORD PTR [rsp+0xc]
  406214:	89 6c 24 0c          	mov    DWORD PTR [rsp+0xc],ebp
  406218:	66 0f 6e 54 24 0c    	movd   xmm2,DWORD PTR [rsp+0xc]
  40621e:	44 89 64 24 0c       	mov    DWORD PTR [rsp+0xc],r12d
  406223:	66 0f 62 c7          	punpckldq xmm0,xmm7
  406227:	66 0f 6e 7c 24 0c    	movd   xmm7,DWORD PTR [rsp+0xc]
  40622d:	89 44 24 0c          	mov    DWORD PTR [rsp+0xc],eax
  406231:	48 8b 84 24 38 01 00 	mov    rax,QWORD PTR [rsp+0x138]
  406238:	00 
  406239:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  406240:	00 00 
  406242:	66 0f 62 d7          	punpckldq xmm2,xmm7
  406246:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
  40624a:	66 0f 6e 4c 24 0c    	movd   xmm1,DWORD PTR [rsp+0xc]
  406250:	44 89 44 24 0c       	mov    DWORD PTR [rsp+0xc],r8d
  406255:	66 0f 6e 7c 24 0c    	movd   xmm7,DWORD PTR [rsp+0xc]
  40625b:	66 0f 62 cf          	punpckldq xmm1,xmm7
  40625f:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
  406264:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
  406268:	f3 0f 6f 57 50       	movdqu xmm2,XMMWORD PTR [rdi+0x50]
  40626d:	66 0f fe c2          	paddd  xmm0,xmm2
  406271:	0f 11 47 50          	movups XMMWORD PTR [rdi+0x50],xmm0
  406275:	0f 29 4c 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm1
  40627a:	f3 0f 6f 47 60       	movdqu xmm0,XMMWORD PTR [rdi+0x60]
  40627f:	66 0f fe c8          	paddd  xmm1,xmm0
  406283:	0f 11 4f 60          	movups XMMWORD PTR [rdi+0x60],xmm1
  406287:	75 10                	jne    406299 <SHA256::transform()+0x4b9>
  406289:	48 81 c4 40 01 00 00 	add    rsp,0x140
  406290:	5b                   	pop    rbx
  406291:	5d                   	pop    rbp
  406292:	41 5c                	pop    r12
  406294:	41 5d                	pop    r13
  406296:	41 5e                	pop    r14
  406298:	c3                   	ret    
  406299:	e8 22 b7 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  40629e:	66 90                	xchg   ax,ax

00000000004062a0 <SHA256::update(unsigned char const*, unsigned long)>:
  4062a0:	48 85 d2             	test   rdx,rdx
  4062a3:	74 5f                	je     406304 <SHA256::update(unsigned char const*, unsigned long)+0x64>
  4062a5:	41 54                	push   r12
  4062a7:	4c 8d 24 16          	lea    r12,[rsi+rdx*1]
  4062ab:	55                   	push   rbp
  4062ac:	48 89 fd             	mov    rbp,rdi
  4062af:	53                   	push   rbx
  4062b0:	48 89 f3             	mov    rbx,rsi
  4062b3:	8b 47 40             	mov    eax,DWORD PTR [rdi+0x40]
  4062b6:	eb 11                	jmp    4062c9 <SHA256::update(unsigned char const*, unsigned long)+0x29>
  4062b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4062bf:	00 
  4062c0:	48 83 c3 01          	add    rbx,0x1
  4062c4:	4c 39 e3             	cmp    rbx,r12
  4062c7:	74 37                	je     406300 <SHA256::update(unsigned char const*, unsigned long)+0x60>
  4062c9:	8d 48 01             	lea    ecx,[rax+0x1]
  4062cc:	89 4d 40             	mov    DWORD PTR [rbp+0x40],ecx
  4062cf:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
  4062d2:	40 88 74 05 00       	mov    BYTE PTR [rbp+rax*1+0x0],sil
  4062d7:	89 c8                	mov    eax,ecx
  4062d9:	83 f8 40             	cmp    eax,0x40
  4062dc:	75 e2                	jne    4062c0 <SHA256::update(unsigned char const*, unsigned long)+0x20>
  4062de:	48 89 ef             	mov    rdi,rbp
  4062e1:	48 83 c3 01          	add    rbx,0x1
  4062e5:	e8 f6 fa ff ff       	call   405de0 <SHA256::transform()>
  4062ea:	48 81 45 48 00 02 00 	add    QWORD PTR [rbp+0x48],0x200
  4062f1:	00 
  4062f2:	31 c0                	xor    eax,eax
  4062f4:	4c 39 e3             	cmp    rbx,r12
  4062f7:	c7 45 40 00 00 00 00 	mov    DWORD PTR [rbp+0x40],0x0
  4062fe:	75 c9                	jne    4062c9 <SHA256::update(unsigned char const*, unsigned long)+0x29>
  406300:	5b                   	pop    rbx
  406301:	5d                   	pop    rbp
  406302:	41 5c                	pop    r12
  406304:	f3 c3                	repz ret 
  406306:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40630d:	00 00 00 

0000000000406310 <SHA256::update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
  406310:	41 54                	push   r12
  406312:	4c 8b 66 08          	mov    r12,QWORD PTR [rsi+0x8]
  406316:	55                   	push   rbp
  406317:	53                   	push   rbx
  406318:	48 8b 1e             	mov    rbx,QWORD PTR [rsi]
  40631b:	4d 85 e4             	test   r12,r12
  40631e:	74 4f                	je     40636f <SHA256::update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f>
  406320:	48 89 fd             	mov    rbp,rdi
  406323:	8b 47 40             	mov    eax,DWORD PTR [rdi+0x40]
  406326:	49 01 dc             	add    r12,rbx
  406329:	eb 0e                	jmp    406339 <SHA256::update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x29>
  40632b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  406330:	48 83 c3 01          	add    rbx,0x1
  406334:	4c 39 e3             	cmp    rbx,r12
  406337:	74 36                	je     40636f <SHA256::update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f>
  406339:	8d 50 01             	lea    edx,[rax+0x1]
  40633c:	89 55 40             	mov    DWORD PTR [rbp+0x40],edx
  40633f:	0f b6 0b             	movzx  ecx,BYTE PTR [rbx]
  406342:	88 4c 05 00          	mov    BYTE PTR [rbp+rax*1+0x0],cl
  406346:	89 d0                	mov    eax,edx
  406348:	83 f8 40             	cmp    eax,0x40
  40634b:	75 e3                	jne    406330 <SHA256::update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x20>
  40634d:	48 89 ef             	mov    rdi,rbp
  406350:	48 83 c3 01          	add    rbx,0x1
  406354:	e8 87 fa ff ff       	call   405de0 <SHA256::transform()>
  406359:	48 81 45 48 00 02 00 	add    QWORD PTR [rbp+0x48],0x200
  406360:	00 
  406361:	31 c0                	xor    eax,eax
  406363:	4c 39 e3             	cmp    rbx,r12
  406366:	c7 45 40 00 00 00 00 	mov    DWORD PTR [rbp+0x40],0x0
  40636d:	75 ca                	jne    406339 <SHA256::update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x29>
  40636f:	5b                   	pop    rbx
  406370:	5d                   	pop    rbp
  406371:	41 5c                	pop    r12
  406373:	c3                   	ret    
  406374:	66 90                	xchg   ax,ax
  406376:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40637d:	00 00 00 

0000000000406380 <SHA256::digest()>:
  406380:	55                   	push   rbp
  406381:	53                   	push   rbx
  406382:	48 89 fd             	mov    rbp,rdi
  406385:	bf 20 00 00 00       	mov    edi,0x20
  40638a:	48 83 ec 08          	sub    rsp,0x8
  40638e:	e8 dd b4 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  406393:	8b 55 40             	mov    edx,DWORD PTR [rbp+0x40]
  406396:	48 89 c3             	mov    rbx,rax
  406399:	83 fa 37             	cmp    edx,0x37
  40639c:	0f 87 ee 01 00 00    	ja     406590 <SHA256::digest()+0x210>
  4063a2:	48 8d 72 01          	lea    rsi,[rdx+0x1]
  4063a6:	48 89 d0             	mov    rax,rdx
  4063a9:	c6 44 15 00 80       	mov    BYTE PTR [rbp+rdx*1+0x0],0x80
  4063ae:	48 83 fe 37          	cmp    rsi,0x37
  4063b2:	77 38                	ja     4063ec <SHA256::digest()+0x6c>
  4063b4:	48 83 c2 02          	add    rdx,0x2
  4063b8:	b9 38 00 00 00       	mov    ecx,0x38
  4063bd:	48 29 f1             	sub    rcx,rsi
  4063c0:	48 83 fa 38          	cmp    rdx,0x38
  4063c4:	ba 01 00 00 00       	mov    edx,0x1
  4063c9:	48 0f 47 ca          	cmova  rcx,rdx
  4063cd:	48 01 ee             	add    rsi,rbp
  4063d0:	83 f9 08             	cmp    ecx,0x8
  4063d3:	89 ca                	mov    edx,ecx
  4063d5:	0f 83 95 02 00 00    	jae    406670 <SHA256::digest()+0x2f0>
  4063db:	83 e1 04             	and    ecx,0x4
  4063de:	0f 85 fc 02 00 00    	jne    4066e0 <SHA256::digest()+0x360>
  4063e4:	85 d2                	test   edx,edx
  4063e6:	0f 85 d4 02 00 00    	jne    4066c0 <SHA256::digest()+0x340>
  4063ec:	c1 e0 03             	shl    eax,0x3
  4063ef:	48 03 45 48          	add    rax,QWORD PTR [rbp+0x48]
  4063f3:	48 89 ef             	mov    rdi,rbp
  4063f6:	48 89 c2             	mov    rdx,rax
  4063f9:	48 89 45 48          	mov    QWORD PTR [rbp+0x48],rax
  4063fd:	88 45 3f             	mov    BYTE PTR [rbp+0x3f],al
  406400:	48 c1 ea 08          	shr    rdx,0x8
  406404:	88 55 3e             	mov    BYTE PTR [rbp+0x3e],dl
  406407:	48 89 c2             	mov    rdx,rax
  40640a:	48 c1 ea 10          	shr    rdx,0x10
  40640e:	88 55 3d             	mov    BYTE PTR [rbp+0x3d],dl
  406411:	48 89 c2             	mov    rdx,rax
  406414:	48 c1 ea 18          	shr    rdx,0x18
  406418:	88 55 3c             	mov    BYTE PTR [rbp+0x3c],dl
  40641b:	48 89 c2             	mov    rdx,rax
  40641e:	48 c1 ea 20          	shr    rdx,0x20
  406422:	88 55 3b             	mov    BYTE PTR [rbp+0x3b],dl
  406425:	48 89 c2             	mov    rdx,rax
  406428:	48 c1 ea 28          	shr    rdx,0x28
  40642c:	88 55 3a             	mov    BYTE PTR [rbp+0x3a],dl
  40642f:	48 89 c2             	mov    rdx,rax
  406432:	48 c1 e8 38          	shr    rax,0x38
  406436:	48 c1 ea 30          	shr    rdx,0x30
  40643a:	88 45 38             	mov    BYTE PTR [rbp+0x38],al
  40643d:	88 55 39             	mov    BYTE PTR [rbp+0x39],dl
  406440:	e8 9b f9 ff ff       	call   405de0 <SHA256::transform()>
  406445:	44 8b 55 50          	mov    r10d,DWORD PTR [rbp+0x50]
  406449:	44 8b 4d 54          	mov    r9d,DWORD PTR [rbp+0x54]
  40644d:	44 8b 45 58          	mov    r8d,DWORD PTR [rbp+0x58]
  406451:	8b 7d 5c             	mov    edi,DWORD PTR [rbp+0x5c]
  406454:	8b 75 60             	mov    esi,DWORD PTR [rbp+0x60]
  406457:	8b 4d 64             	mov    ecx,DWORD PTR [rbp+0x64]
  40645a:	45 89 d3             	mov    r11d,r10d
  40645d:	8b 55 68             	mov    edx,DWORD PTR [rbp+0x68]
  406460:	8b 45 6c             	mov    eax,DWORD PTR [rbp+0x6c]
  406463:	41 c1 eb 18          	shr    r11d,0x18
  406467:	44 88 1b             	mov    BYTE PTR [rbx],r11b
  40646a:	45 89 cb             	mov    r11d,r9d
  40646d:	41 c1 eb 18          	shr    r11d,0x18
  406471:	44 88 5b 04          	mov    BYTE PTR [rbx+0x4],r11b
  406475:	45 89 c3             	mov    r11d,r8d
  406478:	41 c1 eb 18          	shr    r11d,0x18
  40647c:	44 88 5b 08          	mov    BYTE PTR [rbx+0x8],r11b
  406480:	41 89 fb             	mov    r11d,edi
  406483:	41 c1 eb 18          	shr    r11d,0x18
  406487:	44 88 5b 0c          	mov    BYTE PTR [rbx+0xc],r11b
  40648b:	41 89 f3             	mov    r11d,esi
  40648e:	41 c1 eb 18          	shr    r11d,0x18
  406492:	44 88 5b 10          	mov    BYTE PTR [rbx+0x10],r11b
  406496:	41 89 cb             	mov    r11d,ecx
  406499:	41 c1 eb 18          	shr    r11d,0x18
  40649d:	44 88 5b 14          	mov    BYTE PTR [rbx+0x14],r11b
  4064a1:	41 89 d3             	mov    r11d,edx
  4064a4:	41 c1 eb 18          	shr    r11d,0x18
  4064a8:	44 88 5b 18          	mov    BYTE PTR [rbx+0x18],r11b
  4064ac:	41 89 c3             	mov    r11d,eax
  4064af:	41 c1 eb 18          	shr    r11d,0x18
  4064b3:	44 88 5b 1c          	mov    BYTE PTR [rbx+0x1c],r11b
  4064b7:	45 89 d3             	mov    r11d,r10d
  4064ba:	41 c1 eb 10          	shr    r11d,0x10
  4064be:	44 88 5b 01          	mov    BYTE PTR [rbx+0x1],r11b
  4064c2:	45 89 cb             	mov    r11d,r9d
  4064c5:	41 c1 eb 10          	shr    r11d,0x10
  4064c9:	44 88 5b 05          	mov    BYTE PTR [rbx+0x5],r11b
  4064cd:	45 89 c3             	mov    r11d,r8d
  4064d0:	41 c1 eb 10          	shr    r11d,0x10
  4064d4:	44 88 5b 09          	mov    BYTE PTR [rbx+0x9],r11b
  4064d8:	41 89 fb             	mov    r11d,edi
  4064db:	41 c1 eb 10          	shr    r11d,0x10
  4064df:	44 88 5b 0d          	mov    BYTE PTR [rbx+0xd],r11b
  4064e3:	41 89 f3             	mov    r11d,esi
  4064e6:	41 c1 eb 10          	shr    r11d,0x10
  4064ea:	44 88 5b 11          	mov    BYTE PTR [rbx+0x11],r11b
  4064ee:	41 89 cb             	mov    r11d,ecx
  4064f1:	41 c1 eb 10          	shr    r11d,0x10
  4064f5:	44 88 5b 15          	mov    BYTE PTR [rbx+0x15],r11b
  4064f9:	41 89 d3             	mov    r11d,edx
  4064fc:	41 c1 eb 10          	shr    r11d,0x10
  406500:	44 88 5b 19          	mov    BYTE PTR [rbx+0x19],r11b
  406504:	41 89 c3             	mov    r11d,eax
  406507:	41 c1 eb 10          	shr    r11d,0x10
  40650b:	44 88 5b 1d          	mov    BYTE PTR [rbx+0x1d],r11b
  40650f:	45 89 d3             	mov    r11d,r10d
  406512:	41 c1 eb 08          	shr    r11d,0x8
  406516:	44 88 5b 02          	mov    BYTE PTR [rbx+0x2],r11b
  40651a:	45 89 cb             	mov    r11d,r9d
  40651d:	41 c1 eb 08          	shr    r11d,0x8
  406521:	44 88 5b 06          	mov    BYTE PTR [rbx+0x6],r11b
  406525:	45 89 c3             	mov    r11d,r8d
  406528:	41 c1 eb 08          	shr    r11d,0x8
  40652c:	44 88 5b 0a          	mov    BYTE PTR [rbx+0xa],r11b
  406530:	41 89 fb             	mov    r11d,edi
  406533:	41 c1 eb 08          	shr    r11d,0x8
  406537:	44 88 5b 0e          	mov    BYTE PTR [rbx+0xe],r11b
  40653b:	41 89 f3             	mov    r11d,esi
  40653e:	41 c1 eb 08          	shr    r11d,0x8
  406542:	44 88 5b 12          	mov    BYTE PTR [rbx+0x12],r11b
  406546:	41 89 cb             	mov    r11d,ecx
  406549:	41 c1 eb 08          	shr    r11d,0x8
  40654d:	44 88 5b 16          	mov    BYTE PTR [rbx+0x16],r11b
  406551:	41 89 d3             	mov    r11d,edx
  406554:	41 c1 eb 08          	shr    r11d,0x8
  406558:	44 88 5b 1a          	mov    BYTE PTR [rbx+0x1a],r11b
  40655c:	41 89 c3             	mov    r11d,eax
  40655f:	41 c1 eb 08          	shr    r11d,0x8
  406563:	44 88 5b 1e          	mov    BYTE PTR [rbx+0x1e],r11b
  406567:	44 88 53 03          	mov    BYTE PTR [rbx+0x3],r10b
  40656b:	88 43 1f             	mov    BYTE PTR [rbx+0x1f],al
  40656e:	44 88 4b 07          	mov    BYTE PTR [rbx+0x7],r9b
  406572:	48 89 d8             	mov    rax,rbx
  406575:	44 88 43 0b          	mov    BYTE PTR [rbx+0xb],r8b
  406579:	40 88 7b 0f          	mov    BYTE PTR [rbx+0xf],dil
  40657d:	40 88 73 13          	mov    BYTE PTR [rbx+0x13],sil
  406581:	88 4b 17             	mov    BYTE PTR [rbx+0x17],cl
  406584:	88 53 1b             	mov    BYTE PTR [rbx+0x1b],dl
  406587:	48 83 c4 08          	add    rsp,0x8
  40658b:	5b                   	pop    rbx
  40658c:	5d                   	pop    rbp
  40658d:	c3                   	ret    
  40658e:	66 90                	xchg   ax,ax
  406590:	48 8d 4a 01          	lea    rcx,[rdx+0x1]
  406594:	c6 44 15 00 80       	mov    BYTE PTR [rbp+rdx*1+0x0],0x80
  406599:	48 83 f9 3f          	cmp    rcx,0x3f
  40659d:	77 71                	ja     406610 <SHA256::digest()+0x290>
  40659f:	48 83 c2 02          	add    rdx,0x2
  4065a3:	b8 40 00 00 00       	mov    eax,0x40
  4065a8:	48 29 c8             	sub    rax,rcx
  4065ab:	48 83 fa 40          	cmp    rdx,0x40
  4065af:	ba 01 00 00 00       	mov    edx,0x1
  4065b4:	48 0f 47 c2          	cmova  rax,rdx
  4065b8:	48 01 e9             	add    rcx,rbp
  4065bb:	83 f8 08             	cmp    eax,0x8
  4065be:	89 c2                	mov    edx,eax
  4065c0:	0f 82 8a 00 00 00    	jb     406650 <SHA256::digest()+0x2d0>
  4065c6:	48 8d 71 08          	lea    rsi,[rcx+0x8]
  4065ca:	89 c2                	mov    edx,eax
  4065cc:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
  4065d3:	48 c7 44 11 f8 00 00 	mov    QWORD PTR [rcx+rdx*1-0x8],0x0
  4065da:	00 00 
  4065dc:	48 83 e6 f8          	and    rsi,0xfffffffffffffff8
  4065e0:	48 29 f1             	sub    rcx,rsi
  4065e3:	8d 14 08             	lea    edx,[rax+rcx*1]
  4065e6:	83 e2 f8             	and    edx,0xfffffff8
  4065e9:	83 fa 08             	cmp    edx,0x8
  4065ec:	72 22                	jb     406610 <SHA256::digest()+0x290>
  4065ee:	89 d1                	mov    ecx,edx
  4065f0:	31 c0                	xor    eax,eax
  4065f2:	83 e1 f8             	and    ecx,0xfffffff8
  4065f5:	89 c2                	mov    edx,eax
  4065f7:	83 c0 08             	add    eax,0x8
  4065fa:	39 c8                	cmp    eax,ecx
  4065fc:	48 c7 04 16 00 00 00 	mov    QWORD PTR [rsi+rdx*1],0x0
  406603:	00 
  406604:	72 ef                	jb     4065f5 <SHA256::digest()+0x275>
  406606:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40660d:	00 00 00 
  406610:	48 89 ef             	mov    rdi,rbp
  406613:	e8 c8 f7 ff ff       	call   405de0 <SHA256::transform()>
  406618:	48 8d 7d 08          	lea    rdi,[rbp+0x8]
  40661c:	48 89 e9             	mov    rcx,rbp
  40661f:	31 c0                	xor    eax,eax
  406621:	48 c7 45 00 00 00 00 	mov    QWORD PTR [rbp+0x0],0x0
  406628:	00 
  406629:	48 c7 45 30 00 00 00 	mov    QWORD PTR [rbp+0x30],0x0
  406630:	00 
  406631:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
  406635:	48 29 f9             	sub    rcx,rdi
  406638:	83 c1 38             	add    ecx,0x38
  40663b:	c1 e9 03             	shr    ecx,0x3
  40663e:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
  406641:	8b 45 40             	mov    eax,DWORD PTR [rbp+0x40]
  406644:	e9 a3 fd ff ff       	jmp    4063ec <SHA256::digest()+0x6c>
  406649:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  406650:	a8 04                	test   al,0x4
  406652:	0f 85 a0 00 00 00    	jne    4066f8 <SHA256::digest()+0x378>
  406658:	85 d2                	test   edx,edx
  40665a:	74 b4                	je     406610 <SHA256::digest()+0x290>
  40665c:	f6 c2 02             	test   dl,0x2
  40665f:	c6 01 00             	mov    BYTE PTR [rcx],0x0
  406662:	74 ac                	je     406610 <SHA256::digest()+0x290>
  406664:	31 f6                	xor    esi,esi
  406666:	66 89 74 11 fe       	mov    WORD PTR [rcx+rdx*1-0x2],si
  40666b:	eb a3                	jmp    406610 <SHA256::digest()+0x290>
  40666d:	0f 1f 00             	nop    DWORD PTR [rax]
  406670:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
  406674:	89 ca                	mov    edx,ecx
  406676:	48 c7 06 00 00 00 00 	mov    QWORD PTR [rsi],0x0
  40667d:	48 c7 44 16 f8 00 00 	mov    QWORD PTR [rsi+rdx*1-0x8],0x0
  406684:	00 00 
  406686:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
  40668a:	48 29 fe             	sub    rsi,rdi
  40668d:	8d 14 31             	lea    edx,[rcx+rsi*1]
  406690:	83 e2 f8             	and    edx,0xfffffff8
  406693:	83 fa 08             	cmp    edx,0x8
  406696:	0f 82 50 fd ff ff    	jb     4063ec <SHA256::digest()+0x6c>
  40669c:	89 d6                	mov    esi,edx
  40669e:	31 d2                	xor    edx,edx
  4066a0:	83 e6 f8             	and    esi,0xfffffff8
  4066a3:	89 d1                	mov    ecx,edx
  4066a5:	83 c2 08             	add    edx,0x8
  4066a8:	39 f2                	cmp    edx,esi
  4066aa:	48 c7 04 0f 00 00 00 	mov    QWORD PTR [rdi+rcx*1],0x0
  4066b1:	00 
  4066b2:	72 ef                	jb     4066a3 <SHA256::digest()+0x323>
  4066b4:	e9 33 fd ff ff       	jmp    4063ec <SHA256::digest()+0x6c>
  4066b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  4066c0:	f6 c2 02             	test   dl,0x2
  4066c3:	c6 06 00             	mov    BYTE PTR [rsi],0x0
  4066c6:	0f 84 20 fd ff ff    	je     4063ec <SHA256::digest()+0x6c>
  4066cc:	31 c9                	xor    ecx,ecx
  4066ce:	66 89 4c 16 fe       	mov    WORD PTR [rsi+rdx*1-0x2],cx
  4066d3:	e9 14 fd ff ff       	jmp    4063ec <SHA256::digest()+0x6c>
  4066d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4066df:	00 
  4066e0:	c7 06 00 00 00 00    	mov    DWORD PTR [rsi],0x0
  4066e6:	c7 44 16 fc 00 00 00 	mov    DWORD PTR [rsi+rdx*1-0x4],0x0
  4066ed:	00 
  4066ee:	e9 f9 fc ff ff       	jmp    4063ec <SHA256::digest()+0x6c>
  4066f3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  4066f8:	c7 01 00 00 00 00    	mov    DWORD PTR [rcx],0x0
  4066fe:	c7 44 11 fc 00 00 00 	mov    DWORD PTR [rcx+rdx*1-0x4],0x0
  406705:	00 
  406706:	e9 05 ff ff ff       	jmp    406610 <SHA256::digest()+0x290>
  40670b:	90                   	nop
  40670c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000406710 <SHA256::pad()>:
  406710:	53                   	push   rbx
  406711:	8b 57 40             	mov    edx,DWORD PTR [rdi+0x40]
  406714:	48 89 fb             	mov    rbx,rdi
  406717:	83 fa 37             	cmp    edx,0x37
  40671a:	0f 87 a8 00 00 00    	ja     4067c8 <SHA256::pad()+0xb8>
  406720:	48 8d 72 01          	lea    rsi,[rdx+0x1]
  406724:	48 89 d0             	mov    rax,rdx
  406727:	c6 04 17 80          	mov    BYTE PTR [rdi+rdx*1],0x80
  40672b:	48 83 fe 37          	cmp    rsi,0x37
  40672f:	77 38                	ja     406769 <SHA256::pad()+0x59>
  406731:	48 83 c2 02          	add    rdx,0x2
  406735:	b9 38 00 00 00       	mov    ecx,0x38
  40673a:	48 29 f1             	sub    rcx,rsi
  40673d:	48 83 fa 38          	cmp    rdx,0x38
  406741:	ba 01 00 00 00       	mov    edx,0x1
  406746:	48 0f 47 ca          	cmova  rcx,rdx
  40674a:	48 01 fe             	add    rsi,rdi
  40674d:	83 f9 08             	cmp    ecx,0x8
  406750:	89 ca                	mov    edx,ecx
  406752:	0f 83 48 01 00 00    	jae    4068a0 <SHA256::pad()+0x190>
  406758:	83 e1 04             	and    ecx,0x4
  40675b:	0f 85 af 01 00 00    	jne    406910 <SHA256::pad()+0x200>
  406761:	85 d2                	test   edx,edx
  406763:	0f 85 87 01 00 00    	jne    4068f0 <SHA256::pad()+0x1e0>
  406769:	c1 e0 03             	shl    eax,0x3
  40676c:	48 03 43 48          	add    rax,QWORD PTR [rbx+0x48]
  406770:	48 89 df             	mov    rdi,rbx
  406773:	48 89 c2             	mov    rdx,rax
  406776:	48 89 43 48          	mov    QWORD PTR [rbx+0x48],rax
  40677a:	88 43 3f             	mov    BYTE PTR [rbx+0x3f],al
  40677d:	48 c1 ea 08          	shr    rdx,0x8
  406781:	88 53 3e             	mov    BYTE PTR [rbx+0x3e],dl
  406784:	48 89 c2             	mov    rdx,rax
  406787:	48 c1 ea 10          	shr    rdx,0x10
  40678b:	88 53 3d             	mov    BYTE PTR [rbx+0x3d],dl
  40678e:	48 89 c2             	mov    rdx,rax
  406791:	48 c1 ea 18          	shr    rdx,0x18
  406795:	88 53 3c             	mov    BYTE PTR [rbx+0x3c],dl
  406798:	48 89 c2             	mov    rdx,rax
  40679b:	48 c1 ea 20          	shr    rdx,0x20
  40679f:	88 53 3b             	mov    BYTE PTR [rbx+0x3b],dl
  4067a2:	48 89 c2             	mov    rdx,rax
  4067a5:	48 c1 ea 28          	shr    rdx,0x28
  4067a9:	88 53 3a             	mov    BYTE PTR [rbx+0x3a],dl
  4067ac:	48 89 c2             	mov    rdx,rax
  4067af:	48 c1 e8 38          	shr    rax,0x38
  4067b3:	48 c1 ea 30          	shr    rdx,0x30
  4067b7:	88 43 38             	mov    BYTE PTR [rbx+0x38],al
  4067ba:	88 53 39             	mov    BYTE PTR [rbx+0x39],dl
  4067bd:	5b                   	pop    rbx
  4067be:	e9 1d f6 ff ff       	jmp    405de0 <SHA256::transform()>
  4067c3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  4067c8:	48 8d 4a 01          	lea    rcx,[rdx+0x1]
  4067cc:	c6 04 17 80          	mov    BYTE PTR [rdi+rdx*1],0x80
  4067d0:	48 83 f9 3f          	cmp    rcx,0x3f
  4067d4:	77 6a                	ja     406840 <SHA256::pad()+0x130>
  4067d6:	48 83 c2 02          	add    rdx,0x2
  4067da:	b8 40 00 00 00       	mov    eax,0x40
  4067df:	48 29 c8             	sub    rax,rcx
  4067e2:	48 83 fa 40          	cmp    rdx,0x40
  4067e6:	ba 01 00 00 00       	mov    edx,0x1
  4067eb:	48 0f 47 c2          	cmova  rax,rdx
  4067ef:	48 01 f9             	add    rcx,rdi
  4067f2:	83 f8 08             	cmp    eax,0x8
  4067f5:	89 c2                	mov    edx,eax
  4067f7:	0f 82 83 00 00 00    	jb     406880 <SHA256::pad()+0x170>
  4067fd:	48 8d 71 08          	lea    rsi,[rcx+0x8]
  406801:	89 c2                	mov    edx,eax
  406803:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
  40680a:	48 c7 44 11 f8 00 00 	mov    QWORD PTR [rcx+rdx*1-0x8],0x0
  406811:	00 00 
  406813:	48 83 e6 f8          	and    rsi,0xfffffffffffffff8
  406817:	48 29 f1             	sub    rcx,rsi
  40681a:	8d 14 08             	lea    edx,[rax+rcx*1]
  40681d:	83 e2 f8             	and    edx,0xfffffff8
  406820:	83 fa 08             	cmp    edx,0x8
  406823:	72 1b                	jb     406840 <SHA256::pad()+0x130>
  406825:	89 d1                	mov    ecx,edx
  406827:	31 c0                	xor    eax,eax
  406829:	83 e1 f8             	and    ecx,0xfffffff8
  40682c:	89 c2                	mov    edx,eax
  40682e:	83 c0 08             	add    eax,0x8
  406831:	39 c8                	cmp    eax,ecx
  406833:	48 c7 04 16 00 00 00 	mov    QWORD PTR [rsi+rdx*1],0x0
  40683a:	00 
  40683b:	72 ef                	jb     40682c <SHA256::pad()+0x11c>
  40683d:	0f 1f 00             	nop    DWORD PTR [rax]
  406840:	48 89 df             	mov    rdi,rbx
  406843:	e8 98 f5 ff ff       	call   405de0 <SHA256::transform()>
  406848:	48 8d 7b 08          	lea    rdi,[rbx+0x8]
  40684c:	48 89 d9             	mov    rcx,rbx
  40684f:	31 c0                	xor    eax,eax
  406851:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
  406858:	48 c7 43 30 00 00 00 	mov    QWORD PTR [rbx+0x30],0x0
  40685f:	00 
  406860:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
  406864:	48 29 f9             	sub    rcx,rdi
  406867:	83 c1 38             	add    ecx,0x38
  40686a:	c1 e9 03             	shr    ecx,0x3
  40686d:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
  406870:	8b 43 40             	mov    eax,DWORD PTR [rbx+0x40]
  406873:	e9 f1 fe ff ff       	jmp    406769 <SHA256::pad()+0x59>
  406878:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40687f:	00 
  406880:	a8 04                	test   al,0x4
  406882:	0f 85 a0 00 00 00    	jne    406928 <SHA256::pad()+0x218>
  406888:	85 d2                	test   edx,edx
  40688a:	74 b4                	je     406840 <SHA256::pad()+0x130>
  40688c:	f6 c2 02             	test   dl,0x2
  40688f:	c6 01 00             	mov    BYTE PTR [rcx],0x0
  406892:	74 ac                	je     406840 <SHA256::pad()+0x130>
  406894:	31 f6                	xor    esi,esi
  406896:	66 89 74 11 fe       	mov    WORD PTR [rcx+rdx*1-0x2],si
  40689b:	eb a3                	jmp    406840 <SHA256::pad()+0x130>
  40689d:	0f 1f 00             	nop    DWORD PTR [rax]
  4068a0:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
  4068a4:	89 ca                	mov    edx,ecx
  4068a6:	48 c7 06 00 00 00 00 	mov    QWORD PTR [rsi],0x0
  4068ad:	48 c7 44 16 f8 00 00 	mov    QWORD PTR [rsi+rdx*1-0x8],0x0
  4068b4:	00 00 
  4068b6:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
  4068ba:	48 29 fe             	sub    rsi,rdi
  4068bd:	8d 14 31             	lea    edx,[rcx+rsi*1]
  4068c0:	83 e2 f8             	and    edx,0xfffffff8
  4068c3:	83 fa 08             	cmp    edx,0x8
  4068c6:	0f 82 9d fe ff ff    	jb     406769 <SHA256::pad()+0x59>
  4068cc:	89 d6                	mov    esi,edx
  4068ce:	31 d2                	xor    edx,edx
  4068d0:	83 e6 f8             	and    esi,0xfffffff8
  4068d3:	89 d1                	mov    ecx,edx
  4068d5:	83 c2 08             	add    edx,0x8
  4068d8:	39 f2                	cmp    edx,esi
  4068da:	48 c7 04 0f 00 00 00 	mov    QWORD PTR [rdi+rcx*1],0x0
  4068e1:	00 
  4068e2:	72 ef                	jb     4068d3 <SHA256::pad()+0x1c3>
  4068e4:	e9 80 fe ff ff       	jmp    406769 <SHA256::pad()+0x59>
  4068e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  4068f0:	f6 c2 02             	test   dl,0x2
  4068f3:	c6 06 00             	mov    BYTE PTR [rsi],0x0
  4068f6:	0f 84 6d fe ff ff    	je     406769 <SHA256::pad()+0x59>
  4068fc:	31 c9                	xor    ecx,ecx
  4068fe:	66 89 4c 16 fe       	mov    WORD PTR [rsi+rdx*1-0x2],cx
  406903:	e9 61 fe ff ff       	jmp    406769 <SHA256::pad()+0x59>
  406908:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40690f:	00 
  406910:	c7 06 00 00 00 00    	mov    DWORD PTR [rsi],0x0
  406916:	c7 44 16 fc 00 00 00 	mov    DWORD PTR [rsi+rdx*1-0x4],0x0
  40691d:	00 
  40691e:	e9 46 fe ff ff       	jmp    406769 <SHA256::pad()+0x59>
  406923:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  406928:	c7 01 00 00 00 00    	mov    DWORD PTR [rcx],0x0
  40692e:	c7 44 11 fc 00 00 00 	mov    DWORD PTR [rcx+rdx*1-0x4],0x0
  406935:	00 
  406936:	e9 05 ff ff ff       	jmp    406840 <SHA256::pad()+0x130>
  40693b:	90                   	nop
  40693c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000406940 <SHA256::revert(unsigned char*)>:
  406940:	0f b6 47 53          	movzx  eax,BYTE PTR [rdi+0x53]
  406944:	88 06                	mov    BYTE PTR [rsi],al
  406946:	0f b6 47 57          	movzx  eax,BYTE PTR [rdi+0x57]
  40694a:	88 46 04             	mov    BYTE PTR [rsi+0x4],al
  40694d:	0f b6 47 5b          	movzx  eax,BYTE PTR [rdi+0x5b]
  406951:	88 46 08             	mov    BYTE PTR [rsi+0x8],al
  406954:	0f b6 47 5f          	movzx  eax,BYTE PTR [rdi+0x5f]
  406958:	88 46 0c             	mov    BYTE PTR [rsi+0xc],al
  40695b:	0f b6 47 63          	movzx  eax,BYTE PTR [rdi+0x63]
  40695f:	88 46 10             	mov    BYTE PTR [rsi+0x10],al
  406962:	0f b6 47 67          	movzx  eax,BYTE PTR [rdi+0x67]
  406966:	88 46 14             	mov    BYTE PTR [rsi+0x14],al
  406969:	0f b6 47 6b          	movzx  eax,BYTE PTR [rdi+0x6b]
  40696d:	88 46 18             	mov    BYTE PTR [rsi+0x18],al
  406970:	0f b6 47 6f          	movzx  eax,BYTE PTR [rdi+0x6f]
  406974:	88 46 1c             	mov    BYTE PTR [rsi+0x1c],al
  406977:	0f b7 47 52          	movzx  eax,WORD PTR [rdi+0x52]
  40697b:	88 46 01             	mov    BYTE PTR [rsi+0x1],al
  40697e:	0f b7 47 56          	movzx  eax,WORD PTR [rdi+0x56]
  406982:	88 46 05             	mov    BYTE PTR [rsi+0x5],al
  406985:	0f b7 47 5a          	movzx  eax,WORD PTR [rdi+0x5a]
  406989:	88 46 09             	mov    BYTE PTR [rsi+0x9],al
  40698c:	0f b7 47 5e          	movzx  eax,WORD PTR [rdi+0x5e]
  406990:	88 46 0d             	mov    BYTE PTR [rsi+0xd],al
  406993:	0f b7 47 62          	movzx  eax,WORD PTR [rdi+0x62]
  406997:	88 46 11             	mov    BYTE PTR [rsi+0x11],al
  40699a:	0f b7 47 66          	movzx  eax,WORD PTR [rdi+0x66]
  40699e:	88 46 15             	mov    BYTE PTR [rsi+0x15],al
  4069a1:	0f b7 47 6a          	movzx  eax,WORD PTR [rdi+0x6a]
  4069a5:	88 46 19             	mov    BYTE PTR [rsi+0x19],al
  4069a8:	0f b7 47 6e          	movzx  eax,WORD PTR [rdi+0x6e]
  4069ac:	88 46 1d             	mov    BYTE PTR [rsi+0x1d],al
  4069af:	8b 47 50             	mov    eax,DWORD PTR [rdi+0x50]
  4069b2:	c1 e8 08             	shr    eax,0x8
  4069b5:	88 46 02             	mov    BYTE PTR [rsi+0x2],al
  4069b8:	8b 47 54             	mov    eax,DWORD PTR [rdi+0x54]
  4069bb:	c1 e8 08             	shr    eax,0x8
  4069be:	88 46 06             	mov    BYTE PTR [rsi+0x6],al
  4069c1:	8b 47 58             	mov    eax,DWORD PTR [rdi+0x58]
  4069c4:	c1 e8 08             	shr    eax,0x8
  4069c7:	88 46 0a             	mov    BYTE PTR [rsi+0xa],al
  4069ca:	8b 47 5c             	mov    eax,DWORD PTR [rdi+0x5c]
  4069cd:	c1 e8 08             	shr    eax,0x8
  4069d0:	88 46 0e             	mov    BYTE PTR [rsi+0xe],al
  4069d3:	8b 47 60             	mov    eax,DWORD PTR [rdi+0x60]
  4069d6:	c1 e8 08             	shr    eax,0x8
  4069d9:	88 46 12             	mov    BYTE PTR [rsi+0x12],al
  4069dc:	8b 47 64             	mov    eax,DWORD PTR [rdi+0x64]
  4069df:	c1 e8 08             	shr    eax,0x8
  4069e2:	88 46 16             	mov    BYTE PTR [rsi+0x16],al
  4069e5:	8b 47 68             	mov    eax,DWORD PTR [rdi+0x68]
  4069e8:	c1 e8 08             	shr    eax,0x8
  4069eb:	88 46 1a             	mov    BYTE PTR [rsi+0x1a],al
  4069ee:	8b 47 6c             	mov    eax,DWORD PTR [rdi+0x6c]
  4069f1:	c1 e8 08             	shr    eax,0x8
  4069f4:	88 46 1e             	mov    BYTE PTR [rsi+0x1e],al
  4069f7:	8b 47 50             	mov    eax,DWORD PTR [rdi+0x50]
  4069fa:	88 46 03             	mov    BYTE PTR [rsi+0x3],al
  4069fd:	8b 47 54             	mov    eax,DWORD PTR [rdi+0x54]
  406a00:	88 46 07             	mov    BYTE PTR [rsi+0x7],al
  406a03:	8b 47 58             	mov    eax,DWORD PTR [rdi+0x58]
  406a06:	88 46 0b             	mov    BYTE PTR [rsi+0xb],al
  406a09:	8b 47 5c             	mov    eax,DWORD PTR [rdi+0x5c]
  406a0c:	88 46 0f             	mov    BYTE PTR [rsi+0xf],al
  406a0f:	8b 47 60             	mov    eax,DWORD PTR [rdi+0x60]
  406a12:	88 46 13             	mov    BYTE PTR [rsi+0x13],al
  406a15:	8b 47 64             	mov    eax,DWORD PTR [rdi+0x64]
  406a18:	88 46 17             	mov    BYTE PTR [rsi+0x17],al
  406a1b:	8b 47 68             	mov    eax,DWORD PTR [rdi+0x68]
  406a1e:	88 46 1b             	mov    BYTE PTR [rsi+0x1b],al
  406a21:	8b 47 6c             	mov    eax,DWORD PTR [rdi+0x6c]
  406a24:	88 46 1f             	mov    BYTE PTR [rsi+0x1f],al
  406a27:	c3                   	ret    
  406a28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  406a2f:	00 

0000000000406a30 <SHA256::toString[abi:cxx11](unsigned char const*)>:
  406a30:	41 57                	push   r15
  406a32:	41 56                	push   r14
  406a34:	41 55                	push   r13
  406a36:	41 54                	push   r12
  406a38:	49 89 fd             	mov    r13,rdi
  406a3b:	55                   	push   rbp
  406a3c:	53                   	push   rbx
  406a3d:	48 89 f3             	mov    rbx,rsi
  406a40:	48 81 ec e8 01 00 00 	sub    rsp,0x1e8
  406a47:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
  406a4e:	00 
  406a4f:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  406a56:	00 00 
  406a58:	48 89 84 24 d8 01 00 	mov    QWORD PTR [rsp+0x1d8],rax
  406a5f:	00 
  406a60:	31 c0                	xor    eax,eax
  406a62:	e8 f9 ad ff ff       	call   401860 <std::ios_base::ios_base()@plt>
  406a67:	4c 8b 35 ea 6c 20 00 	mov    r14,QWORD PTR [rip+0x206cea]        # 60d758 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
  406a6e:	c6 84 24 b0 01 00 00 	mov    BYTE PTR [rsp+0x1b0],0x0
  406a75:	00 
  406a76:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
  406a7b:	48 8b 0d de 6c 20 00 	mov    rcx,QWORD PTR [rip+0x206cde]        # 60d760 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
  406a82:	48 c7 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],0x60d490
  406a89:	00 90 d4 60 00 
  406a8e:	31 f6                	xor    esi,esi
  406a90:	48 c7 84 24 a8 01 00 	mov    QWORD PTR [rsp+0x1a8],0x0
  406a97:	00 00 00 00 00 
  406a9c:	c6 84 24 b1 01 00 00 	mov    BYTE PTR [rsp+0x1b1],0x0
  406aa3:	00 
  406aa4:	49 8b 46 e8          	mov    rax,QWORD PTR [r14-0x18]
  406aa8:	48 c7 84 24 b8 01 00 	mov    QWORD PTR [rsp+0x1b8],0x0
  406aaf:	00 00 00 00 00 
  406ab4:	48 c7 84 24 c0 01 00 	mov    QWORD PTR [rsp+0x1c0],0x0
  406abb:	00 00 00 00 00 
  406ac0:	48 c7 84 24 c8 01 00 	mov    QWORD PTR [rsp+0x1c8],0x0
  406ac7:	00 00 00 00 00 
  406acc:	48 c7 84 24 d0 01 00 	mov    QWORD PTR [rsp+0x1d0],0x0
  406ad3:	00 00 00 00 00 
  406ad8:	4c 89 74 24 50       	mov    QWORD PTR [rsp+0x50],r14
  406add:	48 89 4c 04 50       	mov    QWORD PTR [rsp+rax*1+0x50],rcx
  406ae2:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
  406ae9:	00 00 
  406aeb:	49 03 7e e8          	add    rdi,QWORD PTR [r14-0x18]
  406aef:	e8 9c ae ff ff       	call   401990 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
  406af4:	4c 8b 3d 6d 6c 20 00 	mov    r15,QWORD PTR [rip+0x206c6d]        # 60d768 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x20>
  406afb:	31 f6                	xor    esi,esi
  406afd:	49 8b 47 e8          	mov    rax,QWORD PTR [r15-0x18]
  406b01:	4c 89 7c 24 60       	mov    QWORD PTR [rsp+0x60],r15
  406b06:	48 8d 7c 04 60       	lea    rdi,[rsp+rax*1+0x60]
  406b0b:	48 8b 05 5e 6c 20 00 	mov    rax,QWORD PTR [rip+0x206c5e]        # 60d770 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
  406b12:	48 89 07             	mov    QWORD PTR [rdi],rax
  406b15:	e8 76 ae ff ff       	call   401990 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
  406b1a:	48 8b 05 2f 6c 20 00 	mov    rax,QWORD PTR [rip+0x206c2f]        # 60d750 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
  406b21:	48 8b 0d 50 6c 20 00 	mov    rcx,QWORD PTR [rip+0x206c50]        # 60d778 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
  406b28:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
  406b2f:	00 
  406b30:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
  406b34:	48 89 4c 04 50       	mov    QWORD PTR [rsp+rax*1+0x50],rcx
  406b39:	48 c7 44 24 50 f0 d3 	mov    QWORD PTR [rsp+0x50],0x60d3f0
  406b40:	60 00 
  406b42:	48 c7 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],0x60d440
  406b49:	00 40 d4 60 00 
  406b4e:	48 c7 44 24 60 18 d4 	mov    QWORD PTR [rsp+0x60],0x60d418
  406b55:	60 00 
  406b57:	48 c7 44 24 68 90 d6 	mov    QWORD PTR [rsp+0x68],0x60d690
  406b5e:	60 00 
  406b60:	48 c7 44 24 70 00 00 	mov    QWORD PTR [rsp+0x70],0x0
  406b67:	00 00 
  406b69:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
  406b70:	00 00 
  406b72:	48 c7 84 24 80 00 00 	mov    QWORD PTR [rsp+0x80],0x0
  406b79:	00 00 00 00 00 
  406b7e:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
  406b85:	00 00 00 00 00 
  406b8a:	48 c7 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],0x0
  406b91:	00 00 00 00 00 
  406b96:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
  406b9d:	00 00 00 00 00 
  406ba2:	e8 99 ad ff ff       	call   401940 <std::locale::locale()@plt>
  406ba7:	48 8d 84 24 c0 00 00 	lea    rax,[rsp+0xc0]
  406bae:	00 
  406baf:	48 8d 74 24 68       	lea    rsi,[rsp+0x68]
  406bb4:	48 c7 44 24 68 b0 d4 	mov    QWORD PTR [rsp+0x68],0x60d4b0
  406bbb:	60 00 
  406bbd:	c7 84 24 a8 00 00 00 	mov    DWORD PTR [rsp+0xa8],0x18
  406bc4:	18 00 00 00 
  406bc8:	48 c7 84 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],0x0
  406bcf:	00 00 00 00 00 
  406bd4:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
  406bdb:	00 
  406bdc:	48 8d 44 24 50       	lea    rax,[rsp+0x50]
  406be1:	c6 84 24 c0 00 00 00 	mov    BYTE PTR [rsp+0xc0],0x0
  406be8:	00 
  406be9:	48 8d b8 80 00 00 00 	lea    rdi,[rax+0x80]
  406bf0:	e8 9b ad ff ff       	call   401990 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
  406bf5:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
  406bfa:	48 8b 50 e8          	mov    rdx,QWORD PTR [rax-0x18]
  406bfe:	48 8d 6c 14 60       	lea    rbp,[rsp+rdx*1+0x60]
  406c03:	80 bd e1 00 00 00 00 	cmp    BYTE PTR [rbp+0xe1],0x0
  406c0a:	0f 84 50 02 00 00    	je     406e60 <SHA256::toString[abi:cxx11](unsigned char const*)+0x430>
  406c10:	c6 85 e0 00 00 00 30 	mov    BYTE PTR [rbp+0xe0],0x30
  406c17:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
  406c1b:	48 8d 6c 24 60       	lea    rbp,[rsp+0x60]
  406c20:	4c 8d 63 20          	lea    r12,[rbx+0x20]
  406c24:	48 8d 4c 05 00       	lea    rcx,[rbp+rax*1+0x0]
  406c29:	8b 51 18             	mov    edx,DWORD PTR [rcx+0x18]
  406c2c:	83 e2 b5             	and    edx,0xffffffb5
  406c2f:	83 ca 08             	or     edx,0x8
  406c32:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
  406c35:	eb 12                	jmp    406c49 <SHA256::toString[abi:cxx11](unsigned char const*)+0x219>
  406c37:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  406c3e:	00 00 
  406c40:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
  406c45:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
  406c49:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
  406c4c:	48 89 ef             	mov    rdi,rbp
  406c4f:	48 c7 44 04 70 02 00 	mov    QWORD PTR [rsp+rax*1+0x70],0x2
  406c56:	00 00 
  406c58:	e8 f3 ad ff ff       	call   401a50 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
  406c5d:	48 83 c3 01          	add    rbx,0x1
  406c61:	49 39 dc             	cmp    r12,rbx
  406c64:	75 da                	jne    406c40 <SHA256::toString[abi:cxx11](unsigned char const*)+0x210>
  406c66:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
  406c6d:	00 
  406c6e:	49 8d 6d 10          	lea    rbp,[r13+0x10]
  406c72:	49 c7 45 08 00 00 00 	mov    QWORD PTR [r13+0x8],0x0
  406c79:	00 
  406c7a:	41 c6 45 10 00       	mov    BYTE PTR [r13+0x10],0x0
  406c7f:	49 89 6d 00          	mov    QWORD PTR [r13+0x0],rbp
  406c83:	48 85 c0             	test   rax,rax
  406c86:	0f 84 b5 02 00 00    	je     406f41 <SHA256::toString[abi:cxx11](unsigned char const*)+0x511>
  406c8c:	48 8b 9c 24 80 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
  406c93:	00 
  406c94:	4c 8b a4 24 88 00 00 	mov    r12,QWORD PTR [rsp+0x88]
  406c9b:	00 
  406c9c:	48 39 d8             	cmp    rax,rbx
  406c9f:	77 1f                	ja     406cc0 <SHA256::toString[abi:cxx11](unsigned char const*)+0x290>
  406ca1:	48 8d 44 24 20       	lea    rax,[rsp+0x20]
  406ca6:	4d 85 e4             	test   r12,r12
  406ca9:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  406cae:	75 2d                	jne    406cdd <SHA256::toString[abi:cxx11](unsigned char const*)+0x2ad>
  406cb0:	48 85 db             	test   rbx,rbx
  406cb3:	74 28                	je     406cdd <SHA256::toString[abi:cxx11](unsigned char const*)+0x2ad>
  406cb5:	bf 68 98 40 00       	mov    edi,0x409868
  406cba:	e8 51 ad ff ff       	call   401a10 <std::__throw_logic_error(char const*)@plt>
  406cbf:	90                   	nop
  406cc0:	48 8d 54 24 40       	lea    rdx,[rsp+0x40]
  406cc5:	4d 85 e4             	test   r12,r12
  406cc8:	48 89 54 24 30       	mov    QWORD PTR [rsp+0x30],rdx
  406ccd:	0f 85 31 01 00 00    	jne    406e04 <SHA256::toString[abi:cxx11](unsigned char const*)+0x3d4>
  406cd3:	bf 68 98 40 00       	mov    edi,0x409868
  406cd8:	e8 33 ad ff ff       	call   401a10 <std::__throw_logic_error(char const*)@plt>
  406cdd:	4c 29 e3             	sub    rbx,r12
  406ce0:	48 83 fb 0f          	cmp    rbx,0xf
  406ce4:	48 89 5c 24 08       	mov    QWORD PTR [rsp+0x8],rbx
  406ce9:	0f 87 f1 01 00 00    	ja     406ee0 <SHA256::toString[abi:cxx11](unsigned char const*)+0x4b0>
  406cef:	48 83 fb 01          	cmp    rbx,0x1
  406cf3:	0f 84 35 02 00 00    	je     406f2e <SHA256::toString[abi:cxx11](unsigned char const*)+0x4fe>
  406cf9:	48 85 db             	test   rbx,rbx
  406cfc:	48 8d 44 24 20       	lea    rax,[rsp+0x20]
  406d01:	0f 85 f9 01 00 00    	jne    406f00 <SHA256::toString[abi:cxx11](unsigned char const*)+0x4d0>
  406d07:	48 8d 74 24 10       	lea    rsi,[rsp+0x10]
  406d0c:	48 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],rbx
  406d11:	4c 89 ef             	mov    rdi,r13
  406d14:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
  406d18:	e8 33 ac ff ff       	call   401950 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
  406d1d:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
  406d22:	48 8d 44 24 20       	lea    rax,[rsp+0x20]
  406d27:	48 39 c7             	cmp    rdi,rax
  406d2a:	74 05                	je     406d31 <SHA256::toString[abi:cxx11](unsigned char const*)+0x301>
  406d2c:	e8 4f ab ff ff       	call   401880 <operator delete(void*)@plt>
  406d31:	48 8b bc 24 b0 00 00 	mov    rdi,QWORD PTR [rsp+0xb0]
  406d38:	00 
  406d39:	48 8d 84 24 c0 00 00 	lea    rax,[rsp+0xc0]
  406d40:	00 
  406d41:	48 c7 44 24 50 f0 d3 	mov    QWORD PTR [rsp+0x50],0x60d3f0
  406d48:	60 00 
  406d4a:	48 c7 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],0x60d440
  406d51:	00 40 d4 60 00 
  406d56:	48 c7 44 24 60 18 d4 	mov    QWORD PTR [rsp+0x60],0x60d418
  406d5d:	60 00 
  406d5f:	48 c7 44 24 68 b0 d4 	mov    QWORD PTR [rsp+0x68],0x60d4b0
  406d66:	60 00 
  406d68:	48 39 c7             	cmp    rdi,rax
  406d6b:	74 05                	je     406d72 <SHA256::toString[abi:cxx11](unsigned char const*)+0x342>
  406d6d:	e8 0e ab ff ff       	call   401880 <operator delete(void*)@plt>
  406d72:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
  406d79:	00 
  406d7a:	48 c7 44 24 68 90 d6 	mov    QWORD PTR [rsp+0x68],0x60d690
  406d81:	60 00 
  406d83:	e8 38 ad ff ff       	call   401ac0 <std::locale::~locale()@plt>
  406d88:	48 8b 05 c1 69 20 00 	mov    rax,QWORD PTR [rip+0x2069c1]        # 60d750 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
  406d8f:	48 8b 0d e2 69 20 00 	mov    rcx,QWORD PTR [rip+0x2069e2]        # 60d778 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
  406d96:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
  406d9d:	00 
  406d9e:	48 8b 15 bb 69 20 00 	mov    rdx,QWORD PTR [rip+0x2069bb]        # 60d760 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
  406da5:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
  406da9:	48 89 4c 04 50       	mov    QWORD PTR [rsp+rax*1+0x50],rcx
  406dae:	49 8b 47 e8          	mov    rax,QWORD PTR [r15-0x18]
  406db2:	48 8b 0d b7 69 20 00 	mov    rcx,QWORD PTR [rip+0x2069b7]        # 60d770 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
  406db9:	48 89 4c 04 60       	mov    QWORD PTR [rsp+rax*1+0x60],rcx
  406dbe:	49 8b 46 e8          	mov    rax,QWORD PTR [r14-0x18]
  406dc2:	48 89 54 04 50       	mov    QWORD PTR [rsp+rax*1+0x50],rdx
  406dc7:	48 c7 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],0x60d490
  406dce:	00 90 d4 60 00 
  406dd3:	e8 f8 ab ff ff       	call   4019d0 <std::ios_base::~ios_base()@plt>
  406dd8:	48 8b 8c 24 d8 01 00 	mov    rcx,QWORD PTR [rsp+0x1d8]
  406ddf:	00 
  406de0:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
  406de7:	00 00 
  406de9:	4c 89 e8             	mov    rax,r13
  406dec:	0f 85 4e 02 00 00    	jne    407040 <SHA256::toString[abi:cxx11](unsigned char const*)+0x610>
  406df2:	48 81 c4 e8 01 00 00 	add    rsp,0x1e8
  406df9:	5b                   	pop    rbx
  406dfa:	5d                   	pop    rbp
  406dfb:	41 5c                	pop    r12
  406dfd:	41 5d                	pop    r13
  406dff:	41 5e                	pop    r14
  406e01:	41 5f                	pop    r15
  406e03:	c3                   	ret    
  406e04:	4c 29 e0             	sub    rax,r12
  406e07:	48 83 f8 0f          	cmp    rax,0xf
  406e0b:	48 89 c3             	mov    rbx,rax
  406e0e:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  406e12:	0f 87 8f 00 00 00    	ja     406ea7 <SHA256::toString[abi:cxx11](unsigned char const*)+0x477>
  406e18:	48 83 fb 01          	cmp    rbx,0x1
  406e1c:	0f 84 fb 00 00 00    	je     406f1d <SHA256::toString[abi:cxx11](unsigned char const*)+0x4ed>
  406e22:	48 85 db             	test   rbx,rbx
  406e25:	48 89 d0             	mov    rax,rdx
  406e28:	0f 85 96 00 00 00    	jne    406ec4 <SHA256::toString[abi:cxx11](unsigned char const*)+0x494>
  406e2e:	48 8d 74 24 30       	lea    rsi,[rsp+0x30]
  406e33:	48 89 5c 24 38       	mov    QWORD PTR [rsp+0x38],rbx
  406e38:	4c 89 ef             	mov    rdi,r13
  406e3b:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
  406e3f:	e8 0c ab ff ff       	call   401950 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
  406e44:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
  406e49:	48 8d 44 24 40       	lea    rax,[rsp+0x40]
  406e4e:	48 39 c7             	cmp    rdi,rax
  406e51:	0f 85 d5 fe ff ff    	jne    406d2c <SHA256::toString[abi:cxx11](unsigned char const*)+0x2fc>
  406e57:	e9 d5 fe ff ff       	jmp    406d31 <SHA256::toString[abi:cxx11](unsigned char const*)+0x301>
  406e5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  406e60:	4c 8b a5 f0 00 00 00 	mov    r12,QWORD PTR [rbp+0xf0]
  406e67:	4d 85 e4             	test   r12,r12
  406e6a:	0f 84 dd 01 00 00    	je     40704d <SHA256::toString[abi:cxx11](unsigned char const*)+0x61d>
  406e70:	41 80 7c 24 38 00    	cmp    BYTE PTR [r12+0x38],0x0
  406e76:	74 0c                	je     406e84 <SHA256::toString[abi:cxx11](unsigned char const*)+0x454>
  406e78:	c6 85 e1 00 00 00 01 	mov    BYTE PTR [rbp+0xe1],0x1
  406e7f:	e9 8c fd ff ff       	jmp    406c10 <SHA256::toString[abi:cxx11](unsigned char const*)+0x1e0>
  406e84:	4c 89 e7             	mov    rdi,r12
  406e87:	e8 04 aa ff ff       	call   401890 <std::ctype<char>::_M_widen_init() const@plt>
  406e8c:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
  406e90:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  406e94:	48 3d 50 8b 40 00    	cmp    rax,0x408b50
  406e9a:	0f 85 e0 00 00 00    	jne    406f80 <SHA256::toString[abi:cxx11](unsigned char const*)+0x550>
  406ea0:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
  406ea5:	eb d1                	jmp    406e78 <SHA256::toString[abi:cxx11](unsigned char const*)+0x448>
  406ea7:	48 8d 7c 24 30       	lea    rdi,[rsp+0x30]
  406eac:	31 d2                	xor    edx,edx
  406eae:	48 89 e6             	mov    rsi,rsp
  406eb1:	e8 fa a9 ff ff       	call   4018b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
  406eb6:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  406eba:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  406ebf:	48 89 54 24 40       	mov    QWORD PTR [rsp+0x40],rdx
  406ec4:	48 89 da             	mov    rdx,rbx
  406ec7:	4c 89 e6             	mov    rsi,r12
  406eca:	48 89 c7             	mov    rdi,rax
  406ecd:	e8 1e ac ff ff       	call   401af0 <memcpy@plt>
  406ed2:	48 8b 1c 24          	mov    rbx,QWORD PTR [rsp]
  406ed6:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
  406edb:	e9 4e ff ff ff       	jmp    406e2e <SHA256::toString[abi:cxx11](unsigned char const*)+0x3fe>
  406ee0:	48 8d 74 24 08       	lea    rsi,[rsp+0x8]
  406ee5:	48 8d 7c 24 10       	lea    rdi,[rsp+0x10]
  406eea:	31 d2                	xor    edx,edx
  406eec:	e8 bf a9 ff ff       	call   4018b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
  406ef1:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  406ef6:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  406efb:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
  406f00:	48 89 da             	mov    rdx,rbx
  406f03:	4c 89 e6             	mov    rsi,r12
  406f06:	48 89 c7             	mov    rdi,rax
  406f09:	e8 e2 ab ff ff       	call   401af0 <memcpy@plt>
  406f0e:	48 8b 5c 24 08       	mov    rbx,QWORD PTR [rsp+0x8]
  406f13:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  406f18:	e9 ea fd ff ff       	jmp    406d07 <SHA256::toString[abi:cxx11](unsigned char const*)+0x2d7>
  406f1d:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
  406f22:	88 44 24 40          	mov    BYTE PTR [rsp+0x40],al
  406f26:	48 89 d0             	mov    rax,rdx
  406f29:	e9 00 ff ff ff       	jmp    406e2e <SHA256::toString[abi:cxx11](unsigned char const*)+0x3fe>
  406f2e:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
  406f33:	88 44 24 20          	mov    BYTE PTR [rsp+0x20],al
  406f37:	48 8d 44 24 20       	lea    rax,[rsp+0x20]
  406f3c:	e9 c6 fd ff ff       	jmp    406d07 <SHA256::toString[abi:cxx11](unsigned char const*)+0x2d7>
  406f41:	48 8d 44 24 50       	lea    rax,[rsp+0x50]
  406f46:	4c 89 ef             	mov    rdi,r13
  406f49:	48 8d 70 60          	lea    rsi,[rax+0x60]
  406f4d:	e8 de a9 ff ff       	call   401930 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
  406f52:	e9 da fd ff ff       	jmp    406d31 <SHA256::toString[abi:cxx11](unsigned char const*)+0x301>
  406f57:	49 8b 7d 00          	mov    rdi,QWORD PTR [r13+0x0]
  406f5b:	48 89 c3             	mov    rbx,rax
  406f5e:	48 39 fd             	cmp    rbp,rdi
  406f61:	74 05                	je     406f68 <SHA256::toString[abi:cxx11](unsigned char const*)+0x538>
  406f63:	e8 18 a9 ff ff       	call   401880 <operator delete(void*)@plt>
  406f68:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
  406f6d:	e8 8e ab ff ff       	call   401b00 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt>
  406f72:	48 89 df             	mov    rdi,rbx
  406f75:	e8 36 ab ff ff       	call   401ab0 <_Unwind_Resume@plt>
  406f7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  406f80:	be 20 00 00 00       	mov    esi,0x20
  406f85:	4c 89 e7             	mov    rdi,r12
  406f88:	ff d0                	call   rax
  406f8a:	e9 11 ff ff ff       	jmp    406ea0 <SHA256::toString[abi:cxx11](unsigned char const*)+0x470>
  406f8f:	48 89 c3             	mov    rbx,rax
  406f92:	eb d4                	jmp    406f68 <SHA256::toString[abi:cxx11](unsigned char const*)+0x538>
  406f94:	48 89 c3             	mov    rbx,rax
  406f97:	48 8b 0d c2 67 20 00 	mov    rcx,QWORD PTR [rip+0x2067c2]        # 60d760 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
  406f9e:	49 8b 46 e8          	mov    rax,QWORD PTR [r14-0x18]
  406fa2:	48 89 4c 04 50       	mov    QWORD PTR [rsp+rax*1+0x50],rcx
  406fa7:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
  406fae:	00 
  406faf:	48 c7 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],0x60d490
  406fb6:	00 90 d4 60 00 
  406fbb:	e8 10 aa ff ff       	call   4019d0 <std::ios_base::~ios_base()@plt>
  406fc0:	48 89 df             	mov    rdi,rbx
  406fc3:	e8 e8 aa ff ff       	call   401ab0 <_Unwind_Resume@plt>
  406fc8:	48 8b bc 24 b0 00 00 	mov    rdi,QWORD PTR [rsp+0xb0]
  406fcf:	00 
  406fd0:	48 89 c3             	mov    rbx,rax
  406fd3:	48 8d 84 24 c0 00 00 	lea    rax,[rsp+0xc0]
  406fda:	00 
  406fdb:	48 c7 44 24 68 b0 d4 	mov    QWORD PTR [rsp+0x68],0x60d4b0
  406fe2:	60 00 
  406fe4:	48 39 c7             	cmp    rdi,rax
  406fe7:	74 05                	je     406fee <SHA256::toString[abi:cxx11](unsigned char const*)+0x5be>
  406fe9:	e8 92 a8 ff ff       	call   401880 <operator delete(void*)@plt>
  406fee:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
  406ff5:	00 
  406ff6:	48 c7 44 24 68 90 d6 	mov    QWORD PTR [rsp+0x68],0x60d690
  406ffd:	60 00 
  406fff:	e8 bc aa ff ff       	call   401ac0 <std::locale::~locale()@plt>
  407004:	48 8b 05 45 67 20 00 	mov    rax,QWORD PTR [rip+0x206745]        # 60d750 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
  40700b:	48 8b 0d 66 67 20 00 	mov    rcx,QWORD PTR [rip+0x206766]        # 60d778 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
  407012:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
  407016:	48 89 4c 04 50       	mov    QWORD PTR [rsp+rax*1+0x50],rcx
  40701b:	49 8b 47 e8          	mov    rax,QWORD PTR [r15-0x18]
  40701f:	48 8b 0d 4a 67 20 00 	mov    rcx,QWORD PTR [rip+0x20674a]        # 60d770 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
  407026:	48 89 4c 04 60       	mov    QWORD PTR [rsp+rax*1+0x60],rcx
  40702b:	49 8b 46 e8          	mov    rax,QWORD PTR [r14-0x18]
  40702f:	48 8b 0d 2a 67 20 00 	mov    rcx,QWORD PTR [rip+0x20672a]        # 60d760 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
  407036:	48 89 4c 04 50       	mov    QWORD PTR [rsp+rax*1+0x50],rcx
  40703b:	e9 67 ff ff ff       	jmp    406fa7 <SHA256::toString[abi:cxx11](unsigned char const*)+0x577>
  407040:	e8 7b a9 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  407045:	48 89 c3             	mov    rbx,rax
  407048:	e9 5a ff ff ff       	jmp    406fa7 <SHA256::toString[abi:cxx11](unsigned char const*)+0x577>
  40704d:	e8 fe a7 ff ff       	call   401850 <std::__throw_bad_cast()@plt>
  407052:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  407056:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40705d:	00 00 00 

0000000000407060 <factorial(int)>:
  407060:	83 ff 01             	cmp    edi,0x1
  407063:	0f 8e 1f 01 00 00    	jle    407188 <factorial(int)+0x128>
  407069:	8d 47 fb             	lea    eax,[rdi-0x5]
  40706c:	8d 57 fe             	lea    edx,[rdi-0x2]
  40706f:	8d 4f ff             	lea    ecx,[rdi-0x1]
  407072:	c1 e8 02             	shr    eax,0x2
  407075:	83 c0 01             	add    eax,0x1
  407078:	83 fa 08             	cmp    edx,0x8
  40707b:	8d 34 85 00 00 00 00 	lea    esi,[rax*4+0x0]
  407082:	0f 86 08 01 00 00    	jbe    407190 <factorial(int)+0x130>
  407088:	89 7c 24 f4          	mov    DWORD PTR [rsp-0xc],edi
  40708c:	31 d2                	xor    edx,edx
  40708e:	66 0f 6e 6c 24 f4    	movd   xmm5,DWORD PTR [rsp-0xc]
  407094:	66 0f 6f 05 e4 3b 00 	movdqa xmm0,XMMWORD PTR [rip+0x3be4]        # 40ac80 <typeinfo for int (*)(int, int)+0x20>
  40709b:	00 
  40709c:	66 0f 70 d5 00       	pshufd xmm2,xmm5,0x0
  4070a1:	66 0f 6f 25 f7 3b 00 	movdqa xmm4,XMMWORD PTR [rip+0x3bf7]        # 40aca0 <typeinfo for int (*)(int, int)+0x40>
  4070a8:	00 
  4070a9:	66 0f fe 15 df 3b 00 	paddd  xmm2,XMMWORD PTR [rip+0x3bdf]        # 40ac90 <typeinfo for int (*)(int, int)+0x30>
  4070b0:	00 
  4070b1:	66 0f 6f da          	movdqa xmm3,xmm2
  4070b5:	83 c2 01             	add    edx,0x1
  4070b8:	66 0f 6f ca          	movdqa xmm1,xmm2
  4070bc:	39 d0                	cmp    eax,edx
  4070be:	66 0f fe d4          	paddd  xmm2,xmm4
  4070c2:	66 0f f4 d8          	pmuludq xmm3,xmm0
  4070c6:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  4070cb:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  4070d0:	66 0f f4 c8          	pmuludq xmm1,xmm0
  4070d4:	66 0f 70 c3 08       	pshufd xmm0,xmm3,0x8
  4070d9:	66 0f 70 c9 08       	pshufd xmm1,xmm1,0x8
  4070de:	66 0f 62 c1          	punpckldq xmm0,xmm1
  4070e2:	77 cd                	ja     4070b1 <factorial(int)+0x51>
  4070e4:	66 0f 6f c8          	movdqa xmm1,xmm0
  4070e8:	29 f7                	sub    edi,esi
  4070ea:	66 0f 6f d0          	movdqa xmm2,xmm0
  4070ee:	66 0f 73 d0 20       	psrlq  xmm0,0x20
  4070f3:	39 f1                	cmp    ecx,esi
  4070f5:	66 0f 73 d9 08       	psrldq xmm1,0x8
  4070fa:	66 0f f4 d1          	pmuludq xmm2,xmm1
  4070fe:	66 0f 73 d1 20       	psrlq  xmm1,0x20
  407103:	66 0f 70 d2 08       	pshufd xmm2,xmm2,0x8
  407108:	66 0f f4 c1          	pmuludq xmm0,xmm1
  40710c:	66 0f 70 c8 08       	pshufd xmm1,xmm0,0x8
  407111:	66 0f 62 d1          	punpckldq xmm2,xmm1
  407115:	66 0f 6f c2          	movdqa xmm0,xmm2
  407119:	66 0f 6f ca          	movdqa xmm1,xmm2
  40711d:	66 0f 73 d9 04       	psrldq xmm1,0x4
  407122:	66 0f f4 c1          	pmuludq xmm0,xmm1
  407126:	66 0f 7e c0          	movd   eax,xmm0
  40712a:	74 61                	je     40718d <factorial(int)+0x12d>
  40712c:	8d 4f ff             	lea    ecx,[rdi-0x1]
  40712f:	0f af c7             	imul   eax,edi
  407132:	83 f9 01             	cmp    ecx,0x1
  407135:	74 56                	je     40718d <factorial(int)+0x12d>
  407137:	8d 77 fe             	lea    esi,[rdi-0x2]
  40713a:	0f af c1             	imul   eax,ecx
  40713d:	83 fe 01             	cmp    esi,0x1
  407140:	74 4b                	je     40718d <factorial(int)+0x12d>
  407142:	8d 57 fd             	lea    edx,[rdi-0x3]
  407145:	0f af c6             	imul   eax,esi
  407148:	83 fa 01             	cmp    edx,0x1
  40714b:	74 40                	je     40718d <factorial(int)+0x12d>
  40714d:	8d 4f fc             	lea    ecx,[rdi-0x4]
  407150:	0f af c2             	imul   eax,edx
  407153:	83 f9 01             	cmp    ecx,0x1
  407156:	74 35                	je     40718d <factorial(int)+0x12d>
  407158:	8d 57 fb             	lea    edx,[rdi-0x5]
  40715b:	0f af c1             	imul   eax,ecx
  40715e:	83 fa 01             	cmp    edx,0x1
  407161:	74 2a                	je     40718d <factorial(int)+0x12d>
  407163:	8d 4f fa             	lea    ecx,[rdi-0x6]
  407166:	0f af c2             	imul   eax,edx
  407169:	83 f9 01             	cmp    ecx,0x1
  40716c:	74 1f                	je     40718d <factorial(int)+0x12d>
  40716e:	8d 57 f9             	lea    edx,[rdi-0x7]
  407171:	0f af c1             	imul   eax,ecx
  407174:	83 fa 01             	cmp    edx,0x1
  407177:	74 14                	je     40718d <factorial(int)+0x12d>
  407179:	0f af c2             	imul   eax,edx
  40717c:	83 ef 08             	sub    edi,0x8
  40717f:	0f af c7             	imul   eax,edi
  407182:	c3                   	ret    
  407183:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  407188:	b8 01 00 00 00       	mov    eax,0x1
  40718d:	f3 c3                	repz ret 
  40718f:	90                   	nop
  407190:	b8 01 00 00 00       	mov    eax,0x1
  407195:	eb 98                	jmp    40712f <factorial(int)+0xcf>
  407197:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40719e:	00 00 

00000000004071a0 <fib(int)>:
  4071a0:	85 ff                	test   edi,edi
  4071a2:	7e 1c                	jle    4071c0 <fib(int)+0x20>
  4071a4:	31 d2                	xor    edx,edx
  4071a6:	b8 01 00 00 00       	mov    eax,0x1
  4071ab:	31 c9                	xor    ecx,ecx
  4071ad:	eb 03                	jmp    4071b2 <fib(int)+0x12>
  4071af:	90                   	nop
  4071b0:	89 f0                	mov    eax,esi
  4071b2:	83 c2 01             	add    edx,0x1
  4071b5:	8d 34 01             	lea    esi,[rcx+rax*1]
  4071b8:	89 c1                	mov    ecx,eax
  4071ba:	39 d7                	cmp    edi,edx
  4071bc:	75 f2                	jne    4071b0 <fib(int)+0x10>
  4071be:	f3 c3                	repz ret 
  4071c0:	31 c0                	xor    eax,eax
  4071c2:	c3                   	ret    
  4071c3:	0f 1f 00             	nop    DWORD PTR [rax]
  4071c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4071cd:	00 00 00 

00000000004071d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)>:
  4071d0:	41 57                	push   r15
  4071d2:	41 56                	push   r14
  4071d4:	49 89 ff             	mov    r15,rdi
  4071d7:	41 55                	push   r13
  4071d9:	41 54                	push   r12
  4071db:	55                   	push   rbp
  4071dc:	53                   	push   rbx
  4071dd:	48 83 ec 48          	sub    rsp,0x48
  4071e1:	48 8b 16             	mov    rdx,QWORD PTR [rsi]
  4071e4:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  4071eb:	00 00 
  4071ed:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
  4071f2:	31 c0                	xor    eax,eax
  4071f4:	80 7a 10 56          	cmp    BYTE PTR [rdx+0x10],0x56
  4071f8:	0f 85 d2 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  4071fe:	80 7a 11 57          	cmp    BYTE PTR [rdx+0x11],0x57
  407202:	0f 85 c8 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407208:	80 7a 12 58          	cmp    BYTE PTR [rdx+0x12],0x58
  40720c:	0f 85 be 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407212:	80 7a 13 59          	cmp    BYTE PTR [rdx+0x13],0x59
  407216:	0f 85 b4 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  40721c:	80 7a 14 5a          	cmp    BYTE PTR [rdx+0x14],0x5a
  407220:	0f 85 aa 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407226:	80 7a 15 5b          	cmp    BYTE PTR [rdx+0x15],0x5b
  40722a:	0f 85 a0 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407230:	80 7a 16 5c          	cmp    BYTE PTR [rdx+0x16],0x5c
  407234:	0f 85 96 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  40723a:	80 7a 17 5d          	cmp    BYTE PTR [rdx+0x17],0x5d
  40723e:	0f 85 8c 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407244:	80 7a 18 5e          	cmp    BYTE PTR [rdx+0x18],0x5e
  407248:	0f 85 82 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  40724e:	80 7a 19 5f          	cmp    BYTE PTR [rdx+0x19],0x5f
  407252:	0f 85 78 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407258:	80 7a 1a 60          	cmp    BYTE PTR [rdx+0x1a],0x60
  40725c:	0f 85 6e 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407262:	80 7a 1b 61          	cmp    BYTE PTR [rdx+0x1b],0x61
  407266:	0f 85 64 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  40726c:	80 7a 1c 62          	cmp    BYTE PTR [rdx+0x1c],0x62
  407270:	0f 85 5a 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407276:	80 7a 1d 63          	cmp    BYTE PTR [rdx+0x1d],0x63
  40727a:	0f 85 50 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407280:	80 7a 1e 64          	cmp    BYTE PTR [rdx+0x1e],0x64
  407284:	0f 85 46 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  40728a:	80 7a 1f 65          	cmp    BYTE PTR [rdx+0x1f],0x65
  40728e:	0f 85 3c 01 00 00    	jne    4073d0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x200>
  407294:	48 8d 44 24 20       	lea    rax,[rsp+0x20]
  407299:	49 89 f6             	mov    r14,rsi
  40729c:	48 c7 44 24 18 00 00 	mov    QWORD PTR [rsp+0x18],0x0
  4072a3:	00 00 
  4072a5:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
  4072aa:	45 31 e4             	xor    r12d,r12d
  4072ad:	31 db                	xor    ebx,ebx
  4072af:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4072b4:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  4072b9:	eb 2f                	jmp    4072ea <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x11a>
  4072bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  4072c0:	40 88 2c 18          	mov    BYTE PTR [rax+rbx*1],bpl
  4072c4:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  4072c9:	49 83 c4 01          	add    r12,0x1
  4072cd:	49 83 fc 10          	cmp    r12,0x10
  4072d1:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
  4072d6:	42 c6 04 28 00       	mov    BYTE PTR [rax+r13*1],0x0
  4072db:	74 63                	je     407340 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x170>
  4072dd:	49 8b 16             	mov    rdx,QWORD PTR [r14]
  4072e0:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
  4072e5:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  4072ea:	42 0f b6 2c 22       	movzx  ebp,BYTE PTR [rdx+r12*1]
  4072ef:	40 80 fd 55          	cmp    bpl,0x55
  4072f3:	74 55                	je     40734a <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x17a>
  4072f5:	83 c5 61             	add    ebp,0x61
  4072f8:	48 3b 44 24 08       	cmp    rax,QWORD PTR [rsp+0x8]
  4072fd:	4c 8d 6b 01          	lea    r13,[rbx+0x1]
  407301:	74 2d                	je     407330 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x160>
  407303:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
  407308:	49 39 d5             	cmp    r13,rdx
  40730b:	76 b3                	jbe    4072c0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0xf0>
  40730d:	48 8d 7c 24 10       	lea    rdi,[rsp+0x10]
  407312:	41 b8 01 00 00 00    	mov    r8d,0x1
  407318:	31 c9                	xor    ecx,ecx
  40731a:	31 d2                	xor    edx,edx
  40731c:	48 89 de             	mov    rsi,rbx
  40731f:	e8 5c a7 ff ff       	call   401a80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
  407324:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  407329:	eb 95                	jmp    4072c0 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0xf0>
  40732b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  407330:	ba 0f 00 00 00       	mov    edx,0xf
  407335:	eb d1                	jmp    407308 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x138>
  407337:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40733e:	00 00 
  407340:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
  407345:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  40734a:	48 01 c3             	add    rbx,rax
  40734d:	48 39 c3             	cmp    rbx,rax
  407350:	74 2c                	je     40737e <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x1ae>
  407352:	48 83 eb 01          	sub    rbx,0x1
  407356:	48 39 c3             	cmp    rbx,rax
  407359:	0f 86 2a 01 00 00    	jbe    407489 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x2b9>
  40735f:	90                   	nop
  407360:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  407363:	0f b6 0b             	movzx  ecx,BYTE PTR [rbx]
  407366:	48 83 c0 01          	add    rax,0x1
  40736a:	48 83 eb 01          	sub    rbx,0x1
  40736e:	88 48 ff             	mov    BYTE PTR [rax-0x1],cl
  407371:	88 53 01             	mov    BYTE PTR [rbx+0x1],dl
  407374:	48 39 d8             	cmp    rax,rbx
  407377:	72 e7                	jb     407360 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x190>
  407379:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
  40737e:	49 8d 47 10          	lea    rax,[r15+0x10]
  407382:	49 89 07             	mov    QWORD PTR [r15],rax
  407385:	48 8d 44 24 20       	lea    rax,[rsp+0x20]
  40738a:	48 39 c3             	cmp    rbx,rax
  40738d:	0f 84 b5 00 00 00    	je     407448 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x278>
  407393:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
  407398:	49 89 1f             	mov    QWORD PTR [r15],rbx
  40739b:	49 89 47 10          	mov    QWORD PTR [r15+0x10],rax
  40739f:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
  4073a4:	49 89 47 08          	mov    QWORD PTR [r15+0x8],rax
  4073a8:	48 8b 74 24 38       	mov    rsi,QWORD PTR [rsp+0x38]
  4073ad:	64 48 33 34 25 28 00 	xor    rsi,QWORD PTR fs:0x28
  4073b4:	00 00 
  4073b6:	4c 89 f8             	mov    rax,r15
  4073b9:	0f 85 f6 00 00 00    	jne    4074b5 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x2e5>
  4073bf:	48 83 c4 48          	add    rsp,0x48
  4073c3:	5b                   	pop    rbx
  4073c4:	5d                   	pop    rbp
  4073c5:	41 5c                	pop    r12
  4073c7:	41 5d                	pop    r13
  4073c9:	41 5e                	pop    r14
  4073cb:	41 5f                	pop    r15
  4073cd:	c3                   	ret    
  4073ce:	66 90                	xchg   ax,ax
  4073d0:	ba 11 00 00 00       	mov    edx,0x11
  4073d5:	be 8e 99 40 00       	mov    esi,0x40998e
  4073da:	bf 60 d5 60 00       	mov    edi,0x60d560
  4073df:	e8 7c a5 ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4073e4:	48 8b 05 75 61 20 00 	mov    rax,QWORD PTR [rip+0x206175]        # 60d560 <std::cout@@GLIBCXX_3.4>
  4073eb:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
  4073ef:	48 8b 98 50 d6 60 00 	mov    rbx,QWORD PTR [rax+0x60d650]
  4073f6:	48 85 db             	test   rbx,rbx
  4073f9:	0f 84 92 00 00 00    	je     407491 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x2c1>
  4073ff:	80 7b 38 00          	cmp    BYTE PTR [rbx+0x38],0x0
  407403:	74 5b                	je     407460 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x290>
  407405:	0f be 73 43          	movsx  esi,BYTE PTR [rbx+0x43]
  407409:	bf 60 d5 60 00       	mov    edi,0x60d560
  40740e:	e8 cd a6 ff ff       	call   401ae0 <std::ostream::put(char)@plt>
  407413:	48 89 c7             	mov    rdi,rax
  407416:	e8 85 a5 ff ff       	call   4019a0 <std::ostream::flush()@plt>
  40741b:	49 8d 47 10          	lea    rax,[r15+0x10]
  40741f:	41 c7 47 10 77 72 6f 	mov    DWORD PTR [r15+0x10],0x6e6f7277
  407426:	6e 
  407427:	41 c6 47 14 67       	mov    BYTE PTR [r15+0x14],0x67
  40742c:	49 c7 47 08 05 00 00 	mov    QWORD PTR [r15+0x8],0x5
  407433:	00 
  407434:	41 c6 47 15 00       	mov    BYTE PTR [r15+0x15],0x0
  407439:	49 89 07             	mov    QWORD PTR [r15],rax
  40743c:	e9 67 ff ff ff       	jmp    4073a8 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x1d8>
  407441:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  407448:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
  40744d:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  407452:	49 89 47 10          	mov    QWORD PTR [r15+0x10],rax
  407456:	49 89 57 18          	mov    QWORD PTR [r15+0x18],rdx
  40745a:	e9 40 ff ff ff       	jmp    40739f <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x1cf>
  40745f:	90                   	nop
  407460:	48 89 df             	mov    rdi,rbx
  407463:	e8 28 a4 ff ff       	call   401890 <std::ctype<char>::_M_widen_init() const@plt>
  407468:	48 8b 03             	mov    rax,QWORD PTR [rbx]
  40746b:	be 0a 00 00 00       	mov    esi,0xa
  407470:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  407474:	48 3d 50 8b 40 00    	cmp    rax,0x408b50
  40747a:	74 8d                	je     407409 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x239>
  40747c:	48 89 df             	mov    rdi,rbx
  40747f:	ff d0                	call   rax
  407481:	0f be f0             	movsx  esi,al
  407484:	e9 80 ff ff ff       	jmp    407409 <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x239>
  407489:	48 89 c3             	mov    rbx,rax
  40748c:	e9 ed fe ff ff       	jmp    40737e <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x1ae>
  407491:	e8 ba a3 ff ff       	call   401850 <std::__throw_bad_cast()@plt>
  407496:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
  40749b:	48 8d 54 24 20       	lea    rdx,[rsp+0x20]
  4074a0:	48 89 c3             	mov    rbx,rax
  4074a3:	48 39 d7             	cmp    rdi,rdx
  4074a6:	74 05                	je     4074ad <bytesToString[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >&)+0x2dd>
  4074a8:	e8 d3 a3 ff ff       	call   401880 <operator delete(void*)@plt>
  4074ad:	48 89 df             	mov    rdi,rbx
  4074b0:	e8 fb a5 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  4074b5:	e8 06 a5 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  4074ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000004074c0 <printBytesArray(std::vector<unsigned char, std::allocator<unsigned char> >)>:
  4074c0:	55                   	push   rbp
  4074c1:	53                   	push   rbx
  4074c2:	48 89 fd             	mov    rbp,rdi
  4074c5:	ba 01 00 00 00       	mov    edx,0x1
  4074ca:	be a0 99 40 00       	mov    esi,0x4099a0
  4074cf:	bf 60 d5 60 00       	mov    edi,0x60d560
  4074d4:	48 83 ec 08          	sub    rsp,0x8
  4074d8:	31 db                	xor    ebx,ebx
  4074da:	e8 81 a4 ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4074df:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
  4074e3:	48 39 45 08          	cmp    QWORD PTR [rbp+0x8],rax
  4074e7:	0f 84 7c 00 00 00    	je     407569 <printBytesArray(std::vector<unsigned char, std::allocator<unsigned char> >)+0xa9>
  4074ed:	0f 1f 00             	nop    DWORD PTR [rax]
  4074f0:	ba 02 00 00 00       	mov    edx,0x2
  4074f5:	be a4 99 40 00       	mov    esi,0x4099a4
  4074fa:	bf 60 d5 60 00       	mov    edi,0x60d560
  4074ff:	e8 5c a4 ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  407504:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
  407508:	bf 60 d5 60 00       	mov    edi,0x60d560
  40750d:	0f b6 34 18          	movzx  esi,BYTE PTR [rax+rbx*1]
  407511:	48 8b 05 48 60 20 00 	mov    rax,QWORD PTR [rip+0x206048]        # 60d560 <std::cout@@GLIBCXX_3.4>
  407518:	48 8b 50 e8          	mov    rdx,QWORD PTR [rax-0x18]
  40751c:	8b 82 78 d5 60 00    	mov    eax,DWORD PTR [rdx+0x60d578]
  407522:	83 e0 b5             	and    eax,0xffffffb5
  407525:	83 c8 08             	or     eax,0x8
  407528:	89 82 78 d5 60 00    	mov    DWORD PTR [rdx+0x60d578],eax
  40752e:	e8 0d a3 ff ff       	call   401840 <std::ostream::operator<<(int)@plt>
  407533:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  407537:	48 2b 45 00          	sub    rax,QWORD PTR [rbp+0x0]
  40753b:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  40753f:	48 39 da             	cmp    rdx,rbx
  407542:	74 1c                	je     407560 <printBytesArray(std::vector<unsigned char, std::allocator<unsigned char> >)+0xa0>
  407544:	ba 01 00 00 00       	mov    edx,0x1
  407549:	be a7 99 40 00       	mov    esi,0x4099a7
  40754e:	bf 60 d5 60 00       	mov    edi,0x60d560
  407553:	e8 08 a4 ff ff       	call   401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  407558:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  40755c:	48 2b 45 00          	sub    rax,QWORD PTR [rbp+0x0]
  407560:	48 83 c3 01          	add    rbx,0x1
  407564:	48 39 c3             	cmp    rbx,rax
  407567:	72 87                	jb     4074f0 <printBytesArray(std::vector<unsigned char, std::allocator<unsigned char> >)+0x30>
  407569:	48 83 c4 08          	add    rsp,0x8
  40756d:	ba 01 00 00 00       	mov    edx,0x1
  407572:	be a2 99 40 00       	mov    esi,0x4099a2
  407577:	5b                   	pop    rbx
  407578:	5d                   	pop    rbp
  407579:	bf 60 d5 60 00       	mov    edi,0x60d560
  40757e:	e9 dd a3 ff ff       	jmp    401960 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  407583:	0f 1f 00             	nop    DWORD PTR [rax]
  407586:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40758d:	00 00 00 

0000000000407590 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
  407590:	41 57                	push   r15
  407592:	41 56                	push   r14
  407594:	41 55                	push   r13
  407596:	41 54                	push   r12
  407598:	55                   	push   rbp
  407599:	53                   	push   rbx
  40759a:	48 89 fd             	mov    rbp,rdi
  40759d:	48 81 ec 98 00 00 00 	sub    rsp,0x98
  4075a4:	4c 8b 2e             	mov    r13,QWORD PTR [rsi]
  4075a7:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  4075ae:	00 00 
  4075b0:	48 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rax
  4075b7:	00 
  4075b8:	31 c0                	xor    eax,eax
  4075ba:	48 8b 46 08          	mov    rax,QWORD PTR [rsi+0x8]
  4075be:	c7 44 24 50 00 00 00 	mov    DWORD PTR [rsp+0x50],0x0
  4075c5:	00 
  4075c6:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
  4075cd:	00 00 
  4075cf:	c7 44 24 60 67 e6 09 	mov    DWORD PTR [rsp+0x60],0x6a09e667
  4075d6:	6a 
  4075d7:	c7 44 24 64 85 ae 67 	mov    DWORD PTR [rsp+0x64],0xbb67ae85
  4075de:	bb 
  4075df:	c7 44 24 68 72 f3 6e 	mov    DWORD PTR [rsp+0x68],0x3c6ef372
  4075e6:	3c 
  4075e7:	48 85 c0             	test   rax,rax
  4075ea:	c7 44 24 6c 3a f5 4f 	mov    DWORD PTR [rsp+0x6c],0xa54ff53a
  4075f1:	a5 
  4075f2:	c7 44 24 70 7f 52 0e 	mov    DWORD PTR [rsp+0x70],0x510e527f
  4075f9:	51 
  4075fa:	c7 44 24 74 8c 68 05 	mov    DWORD PTR [rsp+0x74],0x9b05688c
  407601:	9b 
  407602:	c7 44 24 78 ab d9 83 	mov    DWORD PTR [rsp+0x78],0x1f83d9ab
  407609:	1f 
  40760a:	c7 44 24 7c 19 cd e0 	mov    DWORD PTR [rsp+0x7c],0x5be0cd19
  407611:	5b 
  407612:	74 5f                	je     407673 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe3>
  407614:	c7 44 24 50 01 00 00 	mov    DWORD PTR [rsp+0x50],0x1
  40761b:	00 
  40761c:	41 0f b6 55 00       	movzx  edx,BYTE PTR [r13+0x0]
  407621:	49 8d 5d 01          	lea    rbx,[r13+0x1]
  407625:	4c 8d 64 24 10       	lea    r12,[rsp+0x10]
  40762a:	49 01 c5             	add    r13,rax
  40762d:	88 54 24 10          	mov    BYTE PTR [rsp+0x10],dl
  407631:	eb 09                	jmp    40763c <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xac>
  407633:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  407638:	48 83 c3 01          	add    rbx,0x1
  40763c:	4c 39 eb             	cmp    rbx,r13
  40763f:	74 3f                	je     407680 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf0>
  407641:	8b 44 24 50          	mov    eax,DWORD PTR [rsp+0x50]
  407645:	8d 50 01             	lea    edx,[rax+0x1]
  407648:	89 54 24 50          	mov    DWORD PTR [rsp+0x50],edx
  40764c:	0f b6 0b             	movzx  ecx,BYTE PTR [rbx]
  40764f:	83 fa 40             	cmp    edx,0x40
  407652:	88 4c 04 10          	mov    BYTE PTR [rsp+rax*1+0x10],cl
  407656:	75 e0                	jne    407638 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa8>
  407658:	4c 89 e7             	mov    rdi,r12
  40765b:	e8 80 e7 ff ff       	call   405de0 <SHA256::transform()>
  407660:	48 81 44 24 58 00 02 	add    QWORD PTR [rsp+0x58],0x200
  407667:	00 00 
  407669:	c7 44 24 50 00 00 00 	mov    DWORD PTR [rsp+0x50],0x0
  407670:	00 
  407671:	eb c5                	jmp    407638 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa8>
  407673:	4c 8d 64 24 10       	lea    r12,[rsp+0x10]
  407678:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40767f:	00 
  407680:	bf 20 00 00 00       	mov    edi,0x20
  407685:	e8 e6 a1 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  40768a:	8b 54 24 50          	mov    edx,DWORD PTR [rsp+0x50]
  40768e:	48 89 c3             	mov    rbx,rax
  407691:	83 fa 37             	cmp    edx,0x37
  407694:	48 89 d0             	mov    rax,rdx
  407697:	0f 87 13 03 00 00    	ja     4079b0 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x420>
  40769d:	48 8d 72 01          	lea    rsi,[rdx+0x1]
  4076a1:	c6 44 14 10 80       	mov    BYTE PTR [rsp+rdx*1+0x10],0x80
  4076a6:	48 83 fe 37          	cmp    rsi,0x37
  4076aa:	77 3c                	ja     4076e8 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x158>
  4076ac:	48 83 c2 02          	add    rdx,0x2
  4076b0:	b9 38 00 00 00       	mov    ecx,0x38
  4076b5:	48 29 f1             	sub    rcx,rsi
  4076b8:	48 83 fa 38          	cmp    rdx,0x38
  4076bc:	ba 01 00 00 00       	mov    edx,0x1
  4076c1:	48 0f 47 ca          	cmova  rcx,rdx
  4076c5:	4c 01 e6             	add    rsi,r12
  4076c8:	83 f9 08             	cmp    ecx,0x8
  4076cb:	89 ca                	mov    edx,ecx
  4076cd:	0f 83 bd 03 00 00    	jae    407a90 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x500>
  4076d3:	83 e1 04             	and    ecx,0x4
  4076d6:	0f 85 15 04 00 00    	jne    407af1 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x561>
  4076dc:	85 d2                	test   edx,edx
  4076de:	0f 85 f5 03 00 00    	jne    407ad9 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x549>
  4076e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4076e8:	c1 e0 03             	shl    eax,0x3
  4076eb:	48 03 44 24 58       	add    rax,QWORD PTR [rsp+0x58]
  4076f0:	4c 89 e7             	mov    rdi,r12
  4076f3:	49 c7 c5 ff ff ff ff 	mov    r13,0xffffffffffffffff
  4076fa:	4c 8d 63 10          	lea    r12,[rbx+0x10]
  4076fe:	48 89 c2             	mov    rdx,rax
  407701:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
  407706:	88 44 24 4f          	mov    BYTE PTR [rsp+0x4f],al
  40770a:	48 c1 ea 08          	shr    rdx,0x8
  40770e:	88 54 24 4e          	mov    BYTE PTR [rsp+0x4e],dl
  407712:	48 89 c2             	mov    rdx,rax
  407715:	48 c1 ea 10          	shr    rdx,0x10
  407719:	88 54 24 4d          	mov    BYTE PTR [rsp+0x4d],dl
  40771d:	48 89 c2             	mov    rdx,rax
  407720:	48 c1 ea 18          	shr    rdx,0x18
  407724:	88 54 24 4c          	mov    BYTE PTR [rsp+0x4c],dl
  407728:	48 89 c2             	mov    rdx,rax
  40772b:	48 c1 ea 20          	shr    rdx,0x20
  40772f:	88 54 24 4b          	mov    BYTE PTR [rsp+0x4b],dl
  407733:	48 89 c2             	mov    rdx,rax
  407736:	48 c1 ea 28          	shr    rdx,0x28
  40773a:	88 54 24 4a          	mov    BYTE PTR [rsp+0x4a],dl
  40773e:	48 89 c2             	mov    rdx,rax
  407741:	48 c1 e8 38          	shr    rax,0x38
  407745:	48 c1 ea 30          	shr    rdx,0x30
  407749:	88 44 24 48          	mov    BYTE PTR [rsp+0x48],al
  40774d:	88 54 24 49          	mov    BYTE PTR [rsp+0x49],dl
  407751:	e8 8a e6 ff ff       	call   405de0 <SHA256::transform()>
  407756:	44 8b 54 24 60       	mov    r10d,DWORD PTR [rsp+0x60]
  40775b:	44 8b 4c 24 64       	mov    r9d,DWORD PTR [rsp+0x64]
  407760:	44 8b 44 24 68       	mov    r8d,DWORD PTR [rsp+0x68]
  407765:	8b 7c 24 6c          	mov    edi,DWORD PTR [rsp+0x6c]
  407769:	8b 74 24 70          	mov    esi,DWORD PTR [rsp+0x70]
  40776d:	8b 4c 24 74          	mov    ecx,DWORD PTR [rsp+0x74]
  407771:	45 89 d3             	mov    r11d,r10d
  407774:	8b 54 24 78          	mov    edx,DWORD PTR [rsp+0x78]
  407778:	8b 44 24 7c          	mov    eax,DWORD PTR [rsp+0x7c]
  40777c:	41 c1 eb 18          	shr    r11d,0x18
  407780:	44 88 1b             	mov    BYTE PTR [rbx],r11b
  407783:	45 89 cb             	mov    r11d,r9d
  407786:	41 c1 eb 18          	shr    r11d,0x18
  40778a:	44 88 5b 04          	mov    BYTE PTR [rbx+0x4],r11b
  40778e:	45 89 c3             	mov    r11d,r8d
  407791:	41 c1 eb 18          	shr    r11d,0x18
  407795:	44 88 5b 08          	mov    BYTE PTR [rbx+0x8],r11b
  407799:	41 89 fb             	mov    r11d,edi
  40779c:	41 c1 eb 18          	shr    r11d,0x18
  4077a0:	44 88 5b 0c          	mov    BYTE PTR [rbx+0xc],r11b
  4077a4:	41 89 f3             	mov    r11d,esi
  4077a7:	41 c1 eb 18          	shr    r11d,0x18
  4077ab:	44 88 5b 10          	mov    BYTE PTR [rbx+0x10],r11b
  4077af:	41 89 cb             	mov    r11d,ecx
  4077b2:	41 c1 eb 18          	shr    r11d,0x18
  4077b6:	44 88 5b 14          	mov    BYTE PTR [rbx+0x14],r11b
  4077ba:	41 89 d3             	mov    r11d,edx
  4077bd:	41 c1 eb 18          	shr    r11d,0x18
  4077c1:	44 88 5b 18          	mov    BYTE PTR [rbx+0x18],r11b
  4077c5:	41 89 c3             	mov    r11d,eax
  4077c8:	41 c1 eb 18          	shr    r11d,0x18
  4077cc:	44 88 5b 1c          	mov    BYTE PTR [rbx+0x1c],r11b
  4077d0:	45 89 d3             	mov    r11d,r10d
  4077d3:	41 c1 eb 10          	shr    r11d,0x10
  4077d7:	44 88 5b 01          	mov    BYTE PTR [rbx+0x1],r11b
  4077db:	45 89 cb             	mov    r11d,r9d
  4077de:	41 c1 eb 10          	shr    r11d,0x10
  4077e2:	44 88 5b 05          	mov    BYTE PTR [rbx+0x5],r11b
  4077e6:	45 89 c3             	mov    r11d,r8d
  4077e9:	41 c1 eb 10          	shr    r11d,0x10
  4077ed:	44 88 5b 09          	mov    BYTE PTR [rbx+0x9],r11b
  4077f1:	41 89 fb             	mov    r11d,edi
  4077f4:	41 c1 eb 10          	shr    r11d,0x10
  4077f8:	44 88 5b 0d          	mov    BYTE PTR [rbx+0xd],r11b
  4077fc:	41 89 f3             	mov    r11d,esi
  4077ff:	41 c1 eb 10          	shr    r11d,0x10
  407803:	44 88 5b 11          	mov    BYTE PTR [rbx+0x11],r11b
  407807:	41 89 cb             	mov    r11d,ecx
  40780a:	41 c1 eb 10          	shr    r11d,0x10
  40780e:	44 88 5b 15          	mov    BYTE PTR [rbx+0x15],r11b
  407812:	41 89 d3             	mov    r11d,edx
  407815:	41 c1 eb 10          	shr    r11d,0x10
  407819:	44 88 5b 19          	mov    BYTE PTR [rbx+0x19],r11b
  40781d:	41 89 c3             	mov    r11d,eax
  407820:	41 c1 eb 10          	shr    r11d,0x10
  407824:	44 88 5b 1d          	mov    BYTE PTR [rbx+0x1d],r11b
  407828:	45 89 d3             	mov    r11d,r10d
  40782b:	41 c1 eb 08          	shr    r11d,0x8
  40782f:	44 88 5b 02          	mov    BYTE PTR [rbx+0x2],r11b
  407833:	45 89 cb             	mov    r11d,r9d
  407836:	41 c1 eb 08          	shr    r11d,0x8
  40783a:	44 88 5b 06          	mov    BYTE PTR [rbx+0x6],r11b
  40783e:	45 89 c3             	mov    r11d,r8d
  407841:	41 c1 eb 08          	shr    r11d,0x8
  407845:	44 88 5b 0a          	mov    BYTE PTR [rbx+0xa],r11b
  407849:	41 89 fb             	mov    r11d,edi
  40784c:	41 c1 eb 08          	shr    r11d,0x8
  407850:	44 88 5b 0e          	mov    BYTE PTR [rbx+0xe],r11b
  407854:	41 89 f3             	mov    r11d,esi
  407857:	41 c1 eb 08          	shr    r11d,0x8
  40785b:	44 88 5b 12          	mov    BYTE PTR [rbx+0x12],r11b
  40785f:	41 89 cb             	mov    r11d,ecx
  407862:	41 c1 eb 08          	shr    r11d,0x8
  407866:	44 88 5b 16          	mov    BYTE PTR [rbx+0x16],r11b
  40786a:	41 89 d3             	mov    r11d,edx
  40786d:	41 c1 eb 08          	shr    r11d,0x8
  407871:	44 88 5b 1a          	mov    BYTE PTR [rbx+0x1a],r11b
  407875:	41 89 c3             	mov    r11d,eax
  407878:	41 c1 eb 08          	shr    r11d,0x8
  40787c:	44 88 5b 1e          	mov    BYTE PTR [rbx+0x1e],r11b
  407880:	44 88 53 03          	mov    BYTE PTR [rbx+0x3],r10b
  407884:	88 53 1b             	mov    BYTE PTR [rbx+0x1b],dl
  407887:	88 43 1f             	mov    BYTE PTR [rbx+0x1f],al
  40788a:	31 d2                	xor    edx,edx
  40788c:	44 88 4b 07          	mov    BYTE PTR [rbx+0x7],r9b
  407890:	44 88 43 0b          	mov    BYTE PTR [rbx+0xb],r8b
  407894:	31 c0                	xor    eax,eax
  407896:	40 88 7b 0f          	mov    BYTE PTR [rbx+0xf],dil
  40789a:	40 88 73 13          	mov    BYTE PTR [rbx+0x13],sil
  40789e:	88 4b 17             	mov    BYTE PTR [rbx+0x17],cl
  4078a1:	48 c7 45 00 00 00 00 	mov    QWORD PTR [rbp+0x0],0x0
  4078a8:	00 
  4078a9:	48 c7 45 08 00 00 00 	mov    QWORD PTR [rbp+0x8],0x0
  4078b0:	00 
  4078b1:	48 c7 45 10 00 00 00 	mov    QWORD PTR [rbp+0x10],0x0
  4078b8:	00 
  4078b9:	e9 29 00 00 00       	jmp    4078e7 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x357>
  4078be:	66 90                	xchg   ax,ax
  4078c0:	48 85 d2             	test   rdx,rdx
  4078c3:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
  4078c6:	74 06                	je     4078ce <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x33e>
  4078c8:	88 02                	mov    BYTE PTR [rdx],al
  4078ca:	48 8b 55 08          	mov    rdx,QWORD PTR [rbp+0x8]
  4078ce:	48 83 c3 01          	add    rbx,0x1
  4078d2:	48 83 c2 01          	add    rdx,0x1
  4078d6:	4c 39 e3             	cmp    rbx,r12
  4078d9:	48 89 55 08          	mov    QWORD PTR [rbp+0x8],rdx
  4078dd:	0f 84 9d 00 00 00    	je     407980 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3f0>
  4078e3:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  4078e7:	48 39 c2             	cmp    rdx,rax
  4078ea:	75 d4                	jne    4078c0 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x330>
  4078ec:	48 2b 55 00          	sub    rdx,QWORD PTR [rbp+0x0]
  4078f0:	48 83 fa ff          	cmp    rdx,0xffffffffffffffff
  4078f4:	0f 84 36 02 00 00    	je     407b30 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5a0>
  4078fa:	48 85 d2             	test   rdx,rdx
  4078fd:	41 be 01 00 00 00    	mov    r14d,0x1
  407903:	74 0b                	je     407910 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x380>
  407905:	4c 8d 34 12          	lea    r14,[rdx+rdx*1]
  407909:	4c 39 f2             	cmp    rdx,r14
  40790c:	4d 0f 47 f5          	cmova  r14,r13
  407910:	4c 89 f7             	mov    rdi,r14
  407913:	e8 88 a1 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  407918:	4c 8b 45 00          	mov    r8,QWORD PTR [rbp+0x0]
  40791c:	48 8b 55 08          	mov    rdx,QWORD PTR [rbp+0x8]
  407920:	49 89 c7             	mov    r15,rax
  407923:	4a 8d 04 30          	lea    rax,[rax+r14*1]
  407927:	4d 89 fe             	mov    r14,r15
  40792a:	4c 29 c2             	sub    rdx,r8
  40792d:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  407931:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
  407934:	49 01 d6             	add    r14,rdx
  407937:	74 03                	je     40793c <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3ac>
  407939:	41 88 06             	mov    BYTE PTR [r14],al
  40793c:	48 85 d2             	test   rdx,rdx
  40793f:	0f 85 2b 01 00 00    	jne    407a70 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e0>
  407945:	49 83 c6 01          	add    r14,0x1
  407949:	4d 85 c0             	test   r8,r8
  40794c:	74 08                	je     407956 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3c6>
  40794e:	4c 89 c7             	mov    rdi,r8
  407951:	e8 2a 9f ff ff       	call   401880 <operator delete(void*)@plt>
  407956:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40795a:	48 83 c3 01          	add    rbx,0x1
  40795e:	4c 89 7d 00          	mov    QWORD PTR [rbp+0x0],r15
  407962:	4c 39 e3             	cmp    rbx,r12
  407965:	4c 89 75 08          	mov    QWORD PTR [rbp+0x8],r14
  407969:	4c 89 f2             	mov    rdx,r14
  40796c:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
  407970:	0f 85 6d ff ff ff    	jne    4078e3 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x353>
  407976:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40797d:	00 00 00 
  407980:	48 8b bc 24 88 00 00 	mov    rdi,QWORD PTR [rsp+0x88]
  407987:	00 
  407988:	64 48 33 3c 25 28 00 	xor    rdi,QWORD PTR fs:0x28
  40798f:	00 00 
  407991:	48 89 e8             	mov    rax,rbp
  407994:	0f 85 a0 01 00 00    	jne    407b3a <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5aa>
  40799a:	48 81 c4 98 00 00 00 	add    rsp,0x98
  4079a1:	5b                   	pop    rbx
  4079a2:	5d                   	pop    rbp
  4079a3:	41 5c                	pop    r12
  4079a5:	41 5d                	pop    r13
  4079a7:	41 5e                	pop    r14
  4079a9:	41 5f                	pop    r15
  4079ab:	c3                   	ret    
  4079ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4079b0:	48 8d 4a 01          	lea    rcx,[rdx+0x1]
  4079b4:	c6 44 14 10 80       	mov    BYTE PTR [rsp+rdx*1+0x10],0x80
  4079b9:	48 83 f9 3f          	cmp    rcx,0x3f
  4079bd:	77 69                	ja     407a28 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x498>
  4079bf:	48 83 c2 02          	add    rdx,0x2
  4079c3:	b8 40 00 00 00       	mov    eax,0x40
  4079c8:	48 29 c8             	sub    rax,rcx
  4079cb:	48 83 fa 40          	cmp    rdx,0x40
  4079cf:	ba 01 00 00 00       	mov    edx,0x1
  4079d4:	48 0f 47 c2          	cmova  rax,rdx
  4079d8:	4c 01 e1             	add    rcx,r12
  4079db:	83 f8 08             	cmp    eax,0x8
  4079de:	89 c2                	mov    edx,eax
  4079e0:	72 6e                	jb     407a50 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4c0>
  4079e2:	48 8d 71 08          	lea    rsi,[rcx+0x8]
  4079e6:	89 c2                	mov    edx,eax
  4079e8:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
  4079ef:	48 c7 44 11 f8 00 00 	mov    QWORD PTR [rcx+rdx*1-0x8],0x0
  4079f6:	00 00 
  4079f8:	48 83 e6 f8          	and    rsi,0xfffffffffffffff8
  4079fc:	48 29 f1             	sub    rcx,rsi
  4079ff:	8d 14 08             	lea    edx,[rax+rcx*1]
  407a02:	83 e2 f8             	and    edx,0xfffffff8
  407a05:	83 fa 08             	cmp    edx,0x8
  407a08:	72 1e                	jb     407a28 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x498>
  407a0a:	89 d1                	mov    ecx,edx
  407a0c:	31 c0                	xor    eax,eax
  407a0e:	83 e1 f8             	and    ecx,0xfffffff8
  407a11:	89 c2                	mov    edx,eax
  407a13:	83 c0 08             	add    eax,0x8
  407a16:	39 c8                	cmp    eax,ecx
  407a18:	48 c7 04 16 00 00 00 	mov    QWORD PTR [rsi+rdx*1],0x0
  407a1f:	00 
  407a20:	72 ef                	jb     407a11 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x481>
  407a22:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  407a28:	4c 89 e7             	mov    rdi,r12
  407a2b:	e8 b0 e3 ff ff       	call   405de0 <SHA256::transform()>
  407a30:	31 c0                	xor    eax,eax
  407a32:	b9 07 00 00 00       	mov    ecx,0x7
  407a37:	4c 89 e7             	mov    rdi,r12
  407a3a:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
  407a3d:	8b 44 24 50          	mov    eax,DWORD PTR [rsp+0x50]
  407a41:	e9 a2 fc ff ff       	jmp    4076e8 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x158>
  407a46:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  407a4d:	00 00 00 
  407a50:	a8 04                	test   al,0x4
  407a52:	0f 85 ac 00 00 00    	jne    407b04 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x574>
  407a58:	85 d2                	test   edx,edx
  407a5a:	74 cc                	je     407a28 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x498>
  407a5c:	f6 c2 02             	test   dl,0x2
  407a5f:	c6 01 00             	mov    BYTE PTR [rcx],0x0
  407a62:	74 c4                	je     407a28 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x498>
  407a64:	31 f6                	xor    esi,esi
  407a66:	66 89 74 11 fe       	mov    WORD PTR [rcx+rdx*1-0x2],si
  407a6b:	eb bb                	jmp    407a28 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x498>
  407a6d:	0f 1f 00             	nop    DWORD PTR [rax]
  407a70:	4c 89 c6             	mov    rsi,r8
  407a73:	4c 89 ff             	mov    rdi,r15
  407a76:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
  407a7b:	49 83 c6 01          	add    r14,0x1
  407a7f:	e8 ec 9e ff ff       	call   401970 <memmove@plt>
  407a84:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
  407a89:	e9 c0 fe ff ff       	jmp    40794e <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3be>
  407a8e:	66 90                	xchg   ax,ax
  407a90:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
  407a94:	89 ca                	mov    edx,ecx
  407a96:	48 c7 06 00 00 00 00 	mov    QWORD PTR [rsi],0x0
  407a9d:	48 c7 44 16 f8 00 00 	mov    QWORD PTR [rsi+rdx*1-0x8],0x0
  407aa4:	00 00 
  407aa6:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
  407aaa:	48 29 fe             	sub    rsi,rdi
  407aad:	8d 14 31             	lea    edx,[rcx+rsi*1]
  407ab0:	83 e2 f8             	and    edx,0xfffffff8
  407ab3:	83 fa 08             	cmp    edx,0x8
  407ab6:	0f 82 2c fc ff ff    	jb     4076e8 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x158>
  407abc:	89 d6                	mov    esi,edx
  407abe:	31 d2                	xor    edx,edx
  407ac0:	83 e6 f8             	and    esi,0xfffffff8
  407ac3:	89 d1                	mov    ecx,edx
  407ac5:	83 c2 08             	add    edx,0x8
  407ac8:	39 f2                	cmp    edx,esi
  407aca:	48 c7 04 0f 00 00 00 	mov    QWORD PTR [rdi+rcx*1],0x0
  407ad1:	00 
  407ad2:	72 ef                	jb     407ac3 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x533>
  407ad4:	e9 0f fc ff ff       	jmp    4076e8 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x158>
  407ad9:	f6 c2 02             	test   dl,0x2
  407adc:	c6 06 00             	mov    BYTE PTR [rsi],0x0
  407adf:	0f 84 03 fc ff ff    	je     4076e8 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x158>
  407ae5:	31 c9                	xor    ecx,ecx
  407ae7:	66 89 4c 16 fe       	mov    WORD PTR [rsi+rdx*1-0x2],cx
  407aec:	e9 f7 fb ff ff       	jmp    4076e8 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x158>
  407af1:	c7 06 00 00 00 00    	mov    DWORD PTR [rsi],0x0
  407af7:	c7 44 16 fc 00 00 00 	mov    DWORD PTR [rsi+rdx*1-0x4],0x0
  407afe:	00 
  407aff:	e9 e4 fb ff ff       	jmp    4076e8 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x158>
  407b04:	c7 01 00 00 00 00    	mov    DWORD PTR [rcx],0x0
  407b0a:	c7 44 11 fc 00 00 00 	mov    DWORD PTR [rcx+rdx*1-0x4],0x0
  407b11:	00 
  407b12:	e9 11 ff ff ff       	jmp    407a28 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x498>
  407b17:	48 8b 7d 00          	mov    rdi,QWORD PTR [rbp+0x0]
  407b1b:	48 89 c3             	mov    rbx,rax
  407b1e:	48 85 ff             	test   rdi,rdi
  407b21:	74 05                	je     407b28 <passwordToKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x598>
  407b23:	e8 58 9d ff ff       	call   401880 <operator delete(void*)@plt>
  407b28:	48 89 df             	mov    rdi,rbx
  407b2b:	e8 80 9f ff ff       	call   401ab0 <_Unwind_Resume@plt>
  407b30:	bf a9 99 40 00       	mov    edi,0x4099a9
  407b35:	e8 f6 9c ff ff       	call   401830 <std::__throw_length_error(char const*)@plt>
  407b3a:	e8 81 9e ff ff       	call   4019c0 <__stack_chk_fail@plt>
  407b3f:	90                   	nop

0000000000407b40 <AES::CheckLength(unsigned int)>:
  407b40:	55                   	push   rbp
  407b41:	53                   	push   rbx
  407b42:	48 83 ec 58          	sub    rsp,0x58
  407b46:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  407b4d:	00 00 
  407b4f:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
  407b54:	31 c0                	xor    eax,eax
  407b56:	83 e6 0f             	and    esi,0xf
  407b59:	75 1b                	jne    407b76 <AES::CheckLength(unsigned int)+0x36>
  407b5b:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
  407b60:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  407b67:	00 00 
  407b69:	0f 85 d0 00 00 00    	jne    407c3f <AES::CheckLength(unsigned int)+0xff>
  407b6f:	48 83 c4 58          	add    rsp,0x58
  407b73:	5b                   	pop    rbx
  407b74:	5d                   	pop    rbp
  407b75:	c3                   	ret    
  407b76:	bf 10 00 00 00       	mov    edi,0x10
  407b7b:	e8 60 9e ff ff       	call   4019e0 <__cxa_allocate_exception@plt>
  407b80:	41 b8 10 00 00 00    	mov    r8d,0x10
  407b86:	48 89 c3             	mov    rbx,rax
  407b89:	b9 c5 99 40 00       	mov    ecx,0x4099c5
  407b8e:	ba 10 00 00 00       	mov    edx,0x10
  407b93:	be 80 19 40 00       	mov    esi,0x401980
  407b98:	48 89 e7             	mov    rdi,rsp
  407b9b:	31 c0                	xor    eax,eax
  407b9d:	e8 0e 10 00 00       	call   408bb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>
  407ba2:	41 b8 26 00 00 00    	mov    r8d,0x26
  407ba8:	b9 98 98 40 00       	mov    ecx,0x409898
  407bad:	31 d2                	xor    edx,edx
  407baf:	31 f6                	xor    esi,esi
  407bb1:	48 89 e7             	mov    rdi,rsp
  407bb4:	e8 57 9d ff ff       	call   401910 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
  407bb9:	48 8d 54 24 30       	lea    rdx,[rsp+0x30]
  407bbe:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
  407bc3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  407bc6:	48 8d 50 10          	lea    rdx,[rax+0x10]
  407bca:	48 39 d1             	cmp    rcx,rdx
  407bcd:	0f 84 b0 00 00 00    	je     407c83 <AES::CheckLength(unsigned int)+0x143>
  407bd3:	48 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],rcx
  407bd8:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  407bdc:	48 89 4c 24 30       	mov    QWORD PTR [rsp+0x30],rcx
  407be1:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  407be5:	48 8d 74 24 20       	lea    rsi,[rsp+0x20]
  407bea:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
  407bee:	48 89 df             	mov    rdi,rbx
  407bf1:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
  407bf6:	48 89 10             	mov    QWORD PTR [rax],rdx
  407bf9:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  407c00:	00 
  407c01:	e8 ca 9c ff ff       	call   4018d0 <std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
  407c06:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
  407c0b:	48 8d 44 24 30       	lea    rax,[rsp+0x30]
  407c10:	48 39 c7             	cmp    rdi,rax
  407c13:	74 05                	je     407c1a <AES::CheckLength(unsigned int)+0xda>
  407c15:	e8 66 9c ff ff       	call   401880 <operator delete(void*)@plt>
  407c1a:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
  407c1e:	48 8d 44 24 10       	lea    rax,[rsp+0x10]
  407c23:	48 39 c7             	cmp    rdi,rax
  407c26:	74 05                	je     407c2d <AES::CheckLength(unsigned int)+0xed>
  407c28:	e8 53 9c ff ff       	call   401880 <operator delete(void*)@plt>
  407c2d:	ba f0 18 40 00       	mov    edx,0x4018f0
  407c32:	be 60 d4 60 00       	mov    esi,0x60d460
  407c37:	48 89 df             	mov    rdi,rbx
  407c3a:	e8 01 9e ff ff       	call   401a40 <__cxa_throw@plt>
  407c3f:	e8 7c 9d ff ff       	call   4019c0 <__stack_chk_fail@plt>
  407c44:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
  407c49:	48 8d 54 24 30       	lea    rdx,[rsp+0x30]
  407c4e:	48 89 c5             	mov    rbp,rax
  407c51:	48 39 d7             	cmp    rdi,rdx
  407c54:	74 05                	je     407c5b <AES::CheckLength(unsigned int)+0x11b>
  407c56:	e8 25 9c ff ff       	call   401880 <operator delete(void*)@plt>
  407c5b:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
  407c5f:	48 8d 54 24 10       	lea    rdx,[rsp+0x10]
  407c64:	48 39 d7             	cmp    rdi,rdx
  407c67:	74 05                	je     407c6e <AES::CheckLength(unsigned int)+0x12e>
  407c69:	e8 12 9c ff ff       	call   401880 <operator delete(void*)@plt>
  407c6e:	48 89 df             	mov    rdi,rbx
  407c71:	e8 7a 9d ff ff       	call   4019f0 <__cxa_free_exception@plt>
  407c76:	48 89 ef             	mov    rdi,rbp
  407c79:	e8 32 9e ff ff       	call   401ab0 <_Unwind_Resume@plt>
  407c7e:	48 89 c5             	mov    rbp,rax
  407c81:	eb eb                	jmp    407c6e <AES::CheckLength(unsigned int)+0x12e>
  407c83:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
  407c87:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
  407c8b:	48 89 74 24 30       	mov    QWORD PTR [rsp+0x30],rsi
  407c90:	48 89 7c 24 38       	mov    QWORD PTR [rsp+0x38],rdi
  407c95:	e9 47 ff ff ff       	jmp    407be1 <AES::CheckLength(unsigned int)+0xa1>
  407c9a:	48 89 c5             	mov    rbp,rax
  407c9d:	eb bc                	jmp    407c5b <AES::CheckLength(unsigned int)+0x11b>
  407c9f:	90                   	nop

0000000000407ca0 <AES::EncryptECB(unsigned char const*, unsigned int, unsigned char const*)>:
  407ca0:	41 57                	push   r15
  407ca2:	41 56                	push   r14
  407ca4:	49 89 f6             	mov    r14,rsi
  407ca7:	41 55                	push   r13
  407ca9:	41 54                	push   r12
  407cab:	89 d6                	mov    esi,edx
  407cad:	55                   	push   rbp
  407cae:	53                   	push   rbx
  407caf:	89 d3                	mov    ebx,edx
  407cb1:	49 89 cf             	mov    r15,rcx
  407cb4:	48 89 fd             	mov    rbp,rdi
  407cb7:	48 83 ec 08          	sub    rsp,0x8
  407cbb:	e8 80 fe ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  407cc0:	89 df                	mov    edi,ebx
  407cc2:	e8 a9 9b ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407cc7:	49 89 c5             	mov    r13,rax
  407cca:	8b 45 04             	mov    eax,DWORD PTR [rbp+0x4]
  407ccd:	8d 78 01             	lea    edi,[rax+0x1]
  407cd0:	c1 e7 04             	shl    edi,0x4
  407cd3:	e8 98 9b ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407cd8:	4c 89 fe             	mov    rsi,r15
  407cdb:	48 89 c2             	mov    rdx,rax
  407cde:	48 89 ef             	mov    rdi,rbp
  407ce1:	49 89 c4             	mov    r12,rax
  407ce4:	e8 47 d2 ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  407ce9:	85 db                	test   ebx,ebx
  407ceb:	74 22                	je     407d0f <AES::EncryptECB(unsigned char const*, unsigned int, unsigned char const*)+0x6f>
  407ced:	45 31 ff             	xor    r15d,r15d
  407cf0:	44 89 fe             	mov    esi,r15d
  407cf3:	4c 89 e1             	mov    rcx,r12
  407cf6:	48 89 ef             	mov    rdi,rbp
  407cf9:	49 8d 54 35 00       	lea    rdx,[r13+rsi*1+0x0]
  407cfe:	41 83 c7 10          	add    r15d,0x10
  407d02:	4c 01 f6             	add    rsi,r14
  407d05:	e8 46 c6 ff ff       	call   404350 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  407d0a:	44 39 fb             	cmp    ebx,r15d
  407d0d:	77 e1                	ja     407cf0 <AES::EncryptECB(unsigned char const*, unsigned int, unsigned char const*)+0x50>
  407d0f:	4c 89 e7             	mov    rdi,r12
  407d12:	e8 19 9d ff ff       	call   401a30 <operator delete[](void*)@plt>
  407d17:	48 83 c4 08          	add    rsp,0x8
  407d1b:	4c 89 e8             	mov    rax,r13
  407d1e:	5b                   	pop    rbx
  407d1f:	5d                   	pop    rbp
  407d20:	41 5c                	pop    r12
  407d22:	41 5d                	pop    r13
  407d24:	41 5e                	pop    r14
  407d26:	41 5f                	pop    r15
  407d28:	c3                   	ret    
  407d29:	90                   	nop
  407d2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000407d30 <AES::DecryptECB(unsigned char const*, unsigned int, unsigned char const*)>:
  407d30:	41 57                	push   r15
  407d32:	41 56                	push   r14
  407d34:	49 89 f6             	mov    r14,rsi
  407d37:	41 55                	push   r13
  407d39:	41 54                	push   r12
  407d3b:	89 d6                	mov    esi,edx
  407d3d:	55                   	push   rbp
  407d3e:	53                   	push   rbx
  407d3f:	89 d3                	mov    ebx,edx
  407d41:	49 89 cf             	mov    r15,rcx
  407d44:	48 89 fd             	mov    rbp,rdi
  407d47:	48 83 ec 08          	sub    rsp,0x8
  407d4b:	e8 f0 fd ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  407d50:	89 df                	mov    edi,ebx
  407d52:	e8 19 9b ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407d57:	49 89 c5             	mov    r13,rax
  407d5a:	8b 45 04             	mov    eax,DWORD PTR [rbp+0x4]
  407d5d:	8d 78 01             	lea    edi,[rax+0x1]
  407d60:	c1 e7 04             	shl    edi,0x4
  407d63:	e8 08 9b ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407d68:	4c 89 fe             	mov    rsi,r15
  407d6b:	48 89 c2             	mov    rdx,rax
  407d6e:	48 89 ef             	mov    rdi,rbp
  407d71:	49 89 c4             	mov    r12,rax
  407d74:	e8 b7 d1 ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  407d79:	85 db                	test   ebx,ebx
  407d7b:	74 22                	je     407d9f <AES::DecryptECB(unsigned char const*, unsigned int, unsigned char const*)+0x6f>
  407d7d:	45 31 ff             	xor    r15d,r15d
  407d80:	44 89 fe             	mov    esi,r15d
  407d83:	4c 89 e1             	mov    rcx,r12
  407d86:	48 89 ef             	mov    rdi,rbp
  407d89:	49 8d 54 35 00       	lea    rdx,[r13+rsi*1+0x0]
  407d8e:	41 83 c7 10          	add    r15d,0x10
  407d92:	4c 01 f6             	add    rsi,r14
  407d95:	e8 46 b1 ff ff       	call   402ee0 <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  407d9a:	44 39 fb             	cmp    ebx,r15d
  407d9d:	77 e1                	ja     407d80 <AES::DecryptECB(unsigned char const*, unsigned int, unsigned char const*)+0x50>
  407d9f:	4c 89 e7             	mov    rdi,r12
  407da2:	e8 89 9c ff ff       	call   401a30 <operator delete[](void*)@plt>
  407da7:	48 83 c4 08          	add    rsp,0x8
  407dab:	4c 89 e8             	mov    rax,r13
  407dae:	5b                   	pop    rbx
  407daf:	5d                   	pop    rbp
  407db0:	41 5c                	pop    r12
  407db2:	41 5d                	pop    r13
  407db4:	41 5e                	pop    r14
  407db6:	41 5f                	pop    r15
  407db8:	c3                   	ret    
  407db9:	90                   	nop
  407dba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000407dc0 <AES::EncryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)>:
  407dc0:	41 57                	push   r15
  407dc2:	41 56                	push   r14
  407dc4:	49 89 f7             	mov    r15,rsi
  407dc7:	41 55                	push   r13
  407dc9:	41 54                	push   r12
  407dcb:	89 d6                	mov    esi,edx
  407dcd:	55                   	push   rbp
  407dce:	53                   	push   rbx
  407dcf:	89 d5                	mov    ebp,edx
  407dd1:	4d 89 c6             	mov    r14,r8
  407dd4:	48 89 cb             	mov    rbx,rcx
  407dd7:	49 89 fc             	mov    r12,rdi
  407dda:	48 83 ec 38          	sub    rsp,0x38
  407dde:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  407de5:	00 00 
  407de7:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  407dec:	31 c0                	xor    eax,eax
  407dee:	e8 4d fd ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  407df3:	89 ef                	mov    edi,ebp
  407df5:	e8 76 9a ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407dfa:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
  407dff:	41 8b 44 24 04       	mov    eax,DWORD PTR [r12+0x4]
  407e04:	8d 78 01             	lea    edi,[rax+0x1]
  407e07:	c1 e7 04             	shl    edi,0x4
  407e0a:	e8 61 9a ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407e0f:	48 89 de             	mov    rsi,rbx
  407e12:	48 89 c2             	mov    rdx,rax
  407e15:	4c 89 e7             	mov    rdi,r12
  407e18:	49 89 c5             	mov    r13,rax
  407e1b:	e8 10 d1 ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  407e20:	49 8b 06             	mov    rax,QWORD PTR [r14]
  407e23:	49 8b 56 08          	mov    rdx,QWORD PTR [r14+0x8]
  407e27:	45 31 f6             	xor    r14d,r14d
  407e2a:	85 ed                	test   ebp,ebp
  407e2c:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  407e31:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  407e36:	74 4e                	je     407e86 <AES::EncryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0xc6>
  407e38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  407e3f:	00 
  407e40:	44 89 f3             	mov    ebx,r14d
  407e43:	48 8d 74 24 10       	lea    rsi,[rsp+0x10]
  407e48:	4c 89 e9             	mov    rcx,r13
  407e4b:	f3 41 0f 6f 04 1f    	movdqu xmm0,XMMWORD PTR [r15+rbx*1]
  407e51:	4c 89 e7             	mov    rdi,r12
  407e54:	48 03 5c 24 08       	add    rbx,QWORD PTR [rsp+0x8]
  407e59:	41 83 c6 10          	add    r14d,0x10
  407e5d:	66 0f ef 44 24 10    	pxor   xmm0,XMMWORD PTR [rsp+0x10]
  407e63:	48 89 da             	mov    rdx,rbx
  407e66:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
  407e6b:	e8 e0 c4 ff ff       	call   404350 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  407e70:	44 39 f5             	cmp    ebp,r14d
  407e73:	48 8b 0b             	mov    rcx,QWORD PTR [rbx]
  407e76:	48 8b 5b 08          	mov    rbx,QWORD PTR [rbx+0x8]
  407e7a:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
  407e7f:	48 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],rbx
  407e84:	77 ba                	ja     407e40 <AES::EncryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x80>
  407e86:	4c 89 ef             	mov    rdi,r13
  407e89:	e8 a2 9b ff ff       	call   401a30 <operator delete[](void*)@plt>
  407e8e:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  407e93:	64 48 33 14 25 28 00 	xor    rdx,QWORD PTR fs:0x28
  407e9a:	00 00 
  407e9c:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  407ea1:	75 0f                	jne    407eb2 <AES::EncryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0xf2>
  407ea3:	48 83 c4 38          	add    rsp,0x38
  407ea7:	5b                   	pop    rbx
  407ea8:	5d                   	pop    rbp
  407ea9:	41 5c                	pop    r12
  407eab:	41 5d                	pop    r13
  407ead:	41 5e                	pop    r14
  407eaf:	41 5f                	pop    r15
  407eb1:	c3                   	ret    
  407eb2:	e8 09 9b ff ff       	call   4019c0 <__stack_chk_fail@plt>
  407eb7:	90                   	nop
  407eb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  407ebf:	00 

0000000000407ec0 <AES::DecryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)>:
  407ec0:	41 57                	push   r15
  407ec2:	41 56                	push   r14
  407ec4:	49 89 fe             	mov    r14,rdi
  407ec7:	41 55                	push   r13
  407ec9:	41 54                	push   r12
  407ecb:	41 89 d5             	mov    r13d,edx
  407ece:	55                   	push   rbp
  407ecf:	53                   	push   rbx
  407ed0:	4d 89 c4             	mov    r12,r8
  407ed3:	48 89 cb             	mov    rbx,rcx
  407ed6:	48 83 ec 48          	sub    rsp,0x48
  407eda:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
  407edf:	89 d6                	mov    esi,edx
  407ee1:	89 54 24 2c          	mov    DWORD PTR [rsp+0x2c],edx
  407ee5:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  407eec:	00 00 
  407eee:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
  407ef3:	31 c0                	xor    eax,eax
  407ef5:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
  407efa:	e8 41 fc ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  407eff:	44 89 ef             	mov    edi,r13d
  407f02:	e8 69 99 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407f07:	48 89 c5             	mov    rbp,rax
  407f0a:	41 8b 46 04          	mov    eax,DWORD PTR [r14+0x4]
  407f0e:	8d 78 01             	lea    edi,[rax+0x1]
  407f11:	89 44 24 08          	mov    DWORD PTR [rsp+0x8],eax
  407f15:	c1 e7 04             	shl    edi,0x4
  407f18:	e8 53 99 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  407f1d:	4c 89 f7             	mov    rdi,r14
  407f20:	48 89 c2             	mov    rdx,rax
  407f23:	48 89 de             	mov    rsi,rbx
  407f26:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  407f2b:	45 31 f6             	xor    r14d,r14d
  407f2e:	e8 fd cf ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  407f33:	45 85 ed             	test   r13d,r13d
  407f36:	4d 8b 3c 24          	mov    r15,QWORD PTR [r12]
  407f3a:	4d 8b 64 24 08       	mov    r12,QWORD PTR [r12+0x8]
  407f3f:	0f 84 ed 00 00 00    	je     408032 <AES::DecryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x172>
  407f45:	0f 1f 00             	nop    DWORD PTR [rax]
  407f48:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
  407f4d:	44 89 f3             	mov    ebx,r14d
  407f50:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
  407f55:	4c 8d 5c 1d 00       	lea    r11,[rbp+rbx*1+0x0]
  407f5a:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
  407f5f:	41 83 c6 10          	add    r14d,0x10
  407f63:	4c 8d 2c 18          	lea    r13,[rax+rbx*1]
  407f67:	4c 89 da             	mov    rdx,r11
  407f6a:	4c 89 5c 24 08       	mov    QWORD PTR [rsp+0x8],r11
  407f6f:	4c 89 ee             	mov    rsi,r13
  407f72:	e8 69 af ff ff       	call   402ee0 <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  407f77:	4c 8b 5c 24 08       	mov    r11,QWORD PTR [rsp+0x8]
  407f7c:	4c 89 fa             	mov    rdx,r15
  407f7f:	4d 89 f9             	mov    r9,r15
  407f82:	48 c1 ea 08          	shr    rdx,0x8
  407f86:	4c 89 e0             	mov    rax,r12
  407f89:	49 c1 e9 38          	shr    r9,0x38
  407f8d:	48 c1 e8 38          	shr    rax,0x38
  407f91:	45 30 3b             	xor    BYTE PTR [r11],r15b
  407f94:	30 54 1d 01          	xor    BYTE PTR [rbp+rbx*1+0x1],dl
  407f98:	4c 89 fa             	mov    rdx,r15
  407f9b:	48 c1 ea 10          	shr    rdx,0x10
  407f9f:	30 54 1d 02          	xor    BYTE PTR [rbp+rbx*1+0x2],dl
  407fa3:	4c 89 fa             	mov    rdx,r15
  407fa6:	48 c1 ea 18          	shr    rdx,0x18
  407faa:	30 54 1d 03          	xor    BYTE PTR [rbp+rbx*1+0x3],dl
  407fae:	4c 89 fa             	mov    rdx,r15
  407fb1:	48 c1 ea 20          	shr    rdx,0x20
  407fb5:	30 54 1d 04          	xor    BYTE PTR [rbp+rbx*1+0x4],dl
  407fb9:	4c 89 fa             	mov    rdx,r15
  407fbc:	48 c1 ea 28          	shr    rdx,0x28
  407fc0:	30 54 1d 05          	xor    BYTE PTR [rbp+rbx*1+0x5],dl
  407fc4:	4c 89 fa             	mov    rdx,r15
  407fc7:	48 c1 ea 30          	shr    rdx,0x30
  407fcb:	30 54 1d 06          	xor    BYTE PTR [rbp+rbx*1+0x6],dl
  407fcf:	4c 89 e2             	mov    rdx,r12
  407fd2:	48 c1 ea 08          	shr    rdx,0x8
  407fd6:	30 54 1d 09          	xor    BYTE PTR [rbp+rbx*1+0x9],dl
  407fda:	4c 89 e2             	mov    rdx,r12
  407fdd:	48 c1 ea 10          	shr    rdx,0x10
  407fe1:	30 54 1d 0a          	xor    BYTE PTR [rbp+rbx*1+0xa],dl
  407fe5:	4c 89 e2             	mov    rdx,r12
  407fe8:	48 c1 ea 18          	shr    rdx,0x18
  407fec:	30 54 1d 0b          	xor    BYTE PTR [rbp+rbx*1+0xb],dl
  407ff0:	4c 89 e2             	mov    rdx,r12
  407ff3:	48 c1 ea 20          	shr    rdx,0x20
  407ff7:	30 54 1d 0c          	xor    BYTE PTR [rbp+rbx*1+0xc],dl
  407ffb:	4c 89 e2             	mov    rdx,r12
  407ffe:	48 c1 ea 28          	shr    rdx,0x28
  408002:	30 54 1d 0d          	xor    BYTE PTR [rbp+rbx*1+0xd],dl
  408006:	4c 89 e2             	mov    rdx,r12
  408009:	48 c1 ea 30          	shr    rdx,0x30
  40800d:	44 30 64 1d 08       	xor    BYTE PTR [rbp+rbx*1+0x8],r12b
  408012:	44 30 4c 1d 07       	xor    BYTE PTR [rbp+rbx*1+0x7],r9b
  408017:	30 54 1d 0e          	xor    BYTE PTR [rbp+rbx*1+0xe],dl
  40801b:	30 44 1d 0f          	xor    BYTE PTR [rbp+rbx*1+0xf],al
  40801f:	44 39 74 24 2c       	cmp    DWORD PTR [rsp+0x2c],r14d
  408024:	4d 8b 7d 00          	mov    r15,QWORD PTR [r13+0x0]
  408028:	4d 8b 65 08          	mov    r12,QWORD PTR [r13+0x8]
  40802c:	0f 87 16 ff ff ff    	ja     407f48 <AES::DecryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x88>
  408032:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
  408037:	e8 f4 99 ff ff       	call   401a30 <operator delete[](void*)@plt>
  40803c:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
  408041:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
  408048:	00 00 
  40804a:	48 89 e8             	mov    rax,rbp
  40804d:	75 0f                	jne    40805e <AES::DecryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x19e>
  40804f:	48 83 c4 48          	add    rsp,0x48
  408053:	5b                   	pop    rbx
  408054:	5d                   	pop    rbp
  408055:	41 5c                	pop    r12
  408057:	41 5d                	pop    r13
  408059:	41 5e                	pop    r14
  40805b:	41 5f                	pop    r15
  40805d:	c3                   	ret    
  40805e:	e8 5d 99 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  408063:	90                   	nop
  408064:	66 90                	xchg   ax,ax
  408066:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40806d:	00 00 00 

0000000000408070 <AES::DecryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>:
  408070:	41 55                	push   r13
  408072:	41 54                	push   r12
  408074:	55                   	push   rbp
  408075:	53                   	push   rbx
  408076:	48 89 d5             	mov    rbp,rdx
  408079:	48 89 fb             	mov    rbx,rdi
  40807c:	48 89 f7             	mov    rdi,rsi
  40807f:	48 83 ec 08          	sub    rsp,0x8
  408083:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  408086:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  40808a:	4d 8b 00             	mov    r8,QWORD PTR [r8]
  40808d:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  408090:	48 29 f2             	sub    rdx,rsi
  408093:	e8 28 fe ff ff       	call   407ec0 <AES::DecryptCBC(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)>
  408098:	49 89 c4             	mov    r12,rax
  40809b:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  40809f:	2b 45 00             	sub    eax,DWORD PTR [rbp+0x0]
  4080a2:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
  4080a9:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
  4080b0:	00 
  4080b1:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
  4080b8:	00 
  4080b9:	48 85 c0             	test   rax,rax
  4080bc:	75 32                	jne    4080f0 <AES::DecryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x80>
  4080be:	4d 85 e4             	test   r12,r12
  4080c1:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
  4080c8:	00 
  4080c9:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
  4080d0:	00 
  4080d1:	74 08                	je     4080db <AES::DecryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x6b>
  4080d3:	4c 89 e7             	mov    rdi,r12
  4080d6:	e8 55 99 ff ff       	call   401a30 <operator delete[](void*)@plt>
  4080db:	48 83 c4 08          	add    rsp,0x8
  4080df:	48 89 d8             	mov    rax,rbx
  4080e2:	5b                   	pop    rbx
  4080e3:	5d                   	pop    rbp
  4080e4:	41 5c                	pop    r12
  4080e6:	41 5d                	pop    r13
  4080e8:	c3                   	ret    
  4080e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  4080f0:	48 89 c7             	mov    rdi,rax
  4080f3:	48 89 c5             	mov    rbp,rax
  4080f6:	e8 a5 99 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  4080fb:	4c 8d 2c 28          	lea    r13,[rax+rbp*1]
  4080ff:	48 89 03             	mov    QWORD PTR [rbx],rax
  408102:	48 89 ea             	mov    rdx,rbp
  408105:	4c 89 e6             	mov    rsi,r12
  408108:	48 89 c7             	mov    rdi,rax
  40810b:	4c 89 6b 10          	mov    QWORD PTR [rbx+0x10],r13
  40810f:	e8 5c 98 ff ff       	call   401970 <memmove@plt>
  408114:	4c 89 6b 08          	mov    QWORD PTR [rbx+0x8],r13
  408118:	eb b9                	jmp    4080d3 <AES::DecryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x63>
  40811a:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
  40811d:	48 89 c5             	mov    rbp,rax
  408120:	48 85 ff             	test   rdi,rdi
  408123:	74 05                	je     40812a <AES::DecryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0xba>
  408125:	e8 56 97 ff ff       	call   401880 <operator delete(void*)@plt>
  40812a:	48 89 ef             	mov    rdi,rbp
  40812d:	e8 7e 99 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  408132:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  408136:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40813d:	00 00 00 

0000000000408140 <AES::EncryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)>:
  408140:	41 57                	push   r15
  408142:	41 56                	push   r14
  408144:	49 89 cf             	mov    r15,rcx
  408147:	41 55                	push   r13
  408149:	41 54                	push   r12
  40814b:	41 89 d5             	mov    r13d,edx
  40814e:	55                   	push   rbp
  40814f:	53                   	push   rbx
  408150:	48 89 f5             	mov    rbp,rsi
  408153:	89 d6                	mov    esi,edx
  408155:	49 89 fc             	mov    r12,rdi
  408158:	48 83 ec 48          	sub    rsp,0x48
  40815c:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
  408161:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  408168:	00 00 
  40816a:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
  40816f:	31 c0                	xor    eax,eax
  408171:	e8 ca f9 ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  408176:	44 89 ef             	mov    edi,r13d
  408179:	e8 f2 96 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  40817e:	48 89 c3             	mov    rbx,rax
  408181:	41 8b 44 24 04       	mov    eax,DWORD PTR [r12+0x4]
  408186:	8d 78 01             	lea    edi,[rax+0x1]
  408189:	c1 e7 04             	shl    edi,0x4
  40818c:	e8 df 96 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  408191:	4c 89 fe             	mov    rsi,r15
  408194:	48 89 c2             	mov    rdx,rax
  408197:	4c 89 e7             	mov    rdi,r12
  40819a:	49 89 c6             	mov    r14,rax
  40819d:	45 31 ff             	xor    r15d,r15d
  4081a0:	e8 8b cd ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  4081a5:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
  4081aa:	45 85 ed             	test   r13d,r13d
  4081ad:	49 8b 00             	mov    rax,QWORD PTR [r8]
  4081b0:	49 8b 50 08          	mov    rdx,QWORD PTR [r8+0x8]
  4081b4:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4081b9:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4081be:	0f 84 0c 01 00 00    	je     4082d0 <AES::EncryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x190>
  4081c4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4081c8:	48 8d 54 24 20       	lea    rdx,[rsp+0x20]
  4081cd:	48 8d 74 24 10       	lea    rsi,[rsp+0x10]
  4081d2:	4c 89 f1             	mov    rcx,r14
  4081d5:	4c 89 e7             	mov    rdi,r12
  4081d8:	e8 73 c1 ff ff       	call   404350 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  4081dd:	44 89 f8             	mov    eax,r15d
  4081e0:	41 83 c7 10          	add    r15d,0x10
  4081e4:	0f b6 54 05 00       	movzx  edx,BYTE PTR [rbp+rax*1+0x0]
  4081e9:	48 8d 0c 03          	lea    rcx,[rbx+rax*1]
  4081ed:	32 54 24 20          	xor    dl,BYTE PTR [rsp+0x20]
  4081f1:	88 11                	mov    BYTE PTR [rcx],dl
  4081f3:	0f b6 54 05 01       	movzx  edx,BYTE PTR [rbp+rax*1+0x1]
  4081f8:	32 54 24 21          	xor    dl,BYTE PTR [rsp+0x21]
  4081fc:	88 54 03 01          	mov    BYTE PTR [rbx+rax*1+0x1],dl
  408200:	0f b6 54 05 02       	movzx  edx,BYTE PTR [rbp+rax*1+0x2]
  408205:	32 54 24 22          	xor    dl,BYTE PTR [rsp+0x22]
  408209:	88 54 03 02          	mov    BYTE PTR [rbx+rax*1+0x2],dl
  40820d:	0f b6 54 05 03       	movzx  edx,BYTE PTR [rbp+rax*1+0x3]
  408212:	32 54 24 23          	xor    dl,BYTE PTR [rsp+0x23]
  408216:	88 54 03 03          	mov    BYTE PTR [rbx+rax*1+0x3],dl
  40821a:	0f b6 54 05 04       	movzx  edx,BYTE PTR [rbp+rax*1+0x4]
  40821f:	32 54 24 24          	xor    dl,BYTE PTR [rsp+0x24]
  408223:	88 54 03 04          	mov    BYTE PTR [rbx+rax*1+0x4],dl
  408227:	0f b6 54 05 05       	movzx  edx,BYTE PTR [rbp+rax*1+0x5]
  40822c:	32 54 24 25          	xor    dl,BYTE PTR [rsp+0x25]
  408230:	88 54 03 05          	mov    BYTE PTR [rbx+rax*1+0x5],dl
  408234:	0f b6 54 05 06       	movzx  edx,BYTE PTR [rbp+rax*1+0x6]
  408239:	32 54 24 26          	xor    dl,BYTE PTR [rsp+0x26]
  40823d:	88 54 03 06          	mov    BYTE PTR [rbx+rax*1+0x6],dl
  408241:	0f b6 54 05 07       	movzx  edx,BYTE PTR [rbp+rax*1+0x7]
  408246:	32 54 24 27          	xor    dl,BYTE PTR [rsp+0x27]
  40824a:	88 54 03 07          	mov    BYTE PTR [rbx+rax*1+0x7],dl
  40824e:	0f b6 54 05 08       	movzx  edx,BYTE PTR [rbp+rax*1+0x8]
  408253:	32 54 24 28          	xor    dl,BYTE PTR [rsp+0x28]
  408257:	88 54 03 08          	mov    BYTE PTR [rbx+rax*1+0x8],dl
  40825b:	0f b6 54 05 09       	movzx  edx,BYTE PTR [rbp+rax*1+0x9]
  408260:	32 54 24 29          	xor    dl,BYTE PTR [rsp+0x29]
  408264:	88 54 03 09          	mov    BYTE PTR [rbx+rax*1+0x9],dl
  408268:	0f b6 54 05 0a       	movzx  edx,BYTE PTR [rbp+rax*1+0xa]
  40826d:	32 54 24 2a          	xor    dl,BYTE PTR [rsp+0x2a]
  408271:	88 54 03 0a          	mov    BYTE PTR [rbx+rax*1+0xa],dl
  408275:	0f b6 54 05 0b       	movzx  edx,BYTE PTR [rbp+rax*1+0xb]
  40827a:	32 54 24 2b          	xor    dl,BYTE PTR [rsp+0x2b]
  40827e:	88 54 03 0b          	mov    BYTE PTR [rbx+rax*1+0xb],dl
  408282:	0f b6 54 05 0c       	movzx  edx,BYTE PTR [rbp+rax*1+0xc]
  408287:	32 54 24 2c          	xor    dl,BYTE PTR [rsp+0x2c]
  40828b:	88 54 03 0c          	mov    BYTE PTR [rbx+rax*1+0xc],dl
  40828f:	0f b6 54 05 0d       	movzx  edx,BYTE PTR [rbp+rax*1+0xd]
  408294:	32 54 24 2d          	xor    dl,BYTE PTR [rsp+0x2d]
  408298:	88 54 03 0d          	mov    BYTE PTR [rbx+rax*1+0xd],dl
  40829c:	0f b6 54 05 0e       	movzx  edx,BYTE PTR [rbp+rax*1+0xe]
  4082a1:	32 54 24 2e          	xor    dl,BYTE PTR [rsp+0x2e]
  4082a5:	88 54 03 0e          	mov    BYTE PTR [rbx+rax*1+0xe],dl
  4082a9:	0f b6 54 05 0f       	movzx  edx,BYTE PTR [rbp+rax*1+0xf]
  4082ae:	32 54 24 2f          	xor    dl,BYTE PTR [rsp+0x2f]
  4082b2:	45 39 fd             	cmp    r13d,r15d
  4082b5:	88 54 03 0f          	mov    BYTE PTR [rbx+rax*1+0xf],dl
  4082b9:	48 8b 01             	mov    rax,QWORD PTR [rcx]
  4082bc:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  4082c0:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4082c5:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4082ca:	0f 87 f8 fe ff ff    	ja     4081c8 <AES::EncryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x88>
  4082d0:	4c 89 f7             	mov    rdi,r14
  4082d3:	e8 58 97 ff ff       	call   401a30 <operator delete[](void*)@plt>
  4082d8:	48 8b 74 24 38       	mov    rsi,QWORD PTR [rsp+0x38]
  4082dd:	64 48 33 34 25 28 00 	xor    rsi,QWORD PTR fs:0x28
  4082e4:	00 00 
  4082e6:	48 89 d8             	mov    rax,rbx
  4082e9:	75 0f                	jne    4082fa <AES::EncryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x1ba>
  4082eb:	48 83 c4 48          	add    rsp,0x48
  4082ef:	5b                   	pop    rbx
  4082f0:	5d                   	pop    rbp
  4082f1:	41 5c                	pop    r12
  4082f3:	41 5d                	pop    r13
  4082f5:	41 5e                	pop    r14
  4082f7:	41 5f                	pop    r15
  4082f9:	c3                   	ret    
  4082fa:	e8 c1 96 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  4082ff:	90                   	nop

0000000000408300 <AES::EncryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>:
  408300:	41 55                	push   r13
  408302:	41 54                	push   r12
  408304:	55                   	push   rbp
  408305:	53                   	push   rbx
  408306:	48 89 d5             	mov    rbp,rdx
  408309:	48 89 fb             	mov    rbx,rdi
  40830c:	48 89 f7             	mov    rdi,rsi
  40830f:	48 83 ec 08          	sub    rsp,0x8
  408313:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  408316:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  40831a:	4d 8b 00             	mov    r8,QWORD PTR [r8]
  40831d:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  408320:	48 29 f2             	sub    rdx,rsi
  408323:	e8 18 fe ff ff       	call   408140 <AES::EncryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)>
  408328:	49 89 c4             	mov    r12,rax
  40832b:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  40832f:	2b 45 00             	sub    eax,DWORD PTR [rbp+0x0]
  408332:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
  408339:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
  408340:	00 
  408341:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
  408348:	00 
  408349:	48 85 c0             	test   rax,rax
  40834c:	75 32                	jne    408380 <AES::EncryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x80>
  40834e:	4d 85 e4             	test   r12,r12
  408351:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
  408358:	00 
  408359:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
  408360:	00 
  408361:	74 08                	je     40836b <AES::EncryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x6b>
  408363:	4c 89 e7             	mov    rdi,r12
  408366:	e8 c5 96 ff ff       	call   401a30 <operator delete[](void*)@plt>
  40836b:	48 83 c4 08          	add    rsp,0x8
  40836f:	48 89 d8             	mov    rax,rbx
  408372:	5b                   	pop    rbx
  408373:	5d                   	pop    rbp
  408374:	41 5c                	pop    r12
  408376:	41 5d                	pop    r13
  408378:	c3                   	ret    
  408379:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  408380:	48 89 c7             	mov    rdi,rax
  408383:	48 89 c5             	mov    rbp,rax
  408386:	e8 15 97 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  40838b:	4c 8d 2c 28          	lea    r13,[rax+rbp*1]
  40838f:	48 89 03             	mov    QWORD PTR [rbx],rax
  408392:	48 89 ea             	mov    rdx,rbp
  408395:	4c 89 e6             	mov    rsi,r12
  408398:	48 89 c7             	mov    rdi,rax
  40839b:	4c 89 6b 10          	mov    QWORD PTR [rbx+0x10],r13
  40839f:	e8 cc 95 ff ff       	call   401970 <memmove@plt>
  4083a4:	4c 89 6b 08          	mov    QWORD PTR [rbx+0x8],r13
  4083a8:	eb b9                	jmp    408363 <AES::EncryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x63>
  4083aa:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
  4083ad:	48 89 c5             	mov    rbp,rax
  4083b0:	48 85 ff             	test   rdi,rdi
  4083b3:	74 05                	je     4083ba <AES::EncryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0xba>
  4083b5:	e8 c6 94 ff ff       	call   401880 <operator delete(void*)@plt>
  4083ba:	48 89 ef             	mov    rdi,rbp
  4083bd:	e8 ee 96 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  4083c2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4083c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4083cd:	00 00 00 

00000000004083d0 <AES::DecryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)>:
  4083d0:	41 57                	push   r15
  4083d2:	41 56                	push   r14
  4083d4:	49 89 cf             	mov    r15,rcx
  4083d7:	41 55                	push   r13
  4083d9:	41 54                	push   r12
  4083db:	41 89 d5             	mov    r13d,edx
  4083de:	55                   	push   rbp
  4083df:	53                   	push   rbx
  4083e0:	48 89 f5             	mov    rbp,rsi
  4083e3:	89 d6                	mov    esi,edx
  4083e5:	49 89 fc             	mov    r12,rdi
  4083e8:	48 83 ec 48          	sub    rsp,0x48
  4083ec:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
  4083f1:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  4083f8:	00 00 
  4083fa:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
  4083ff:	31 c0                	xor    eax,eax
  408401:	e8 3a f7 ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  408406:	44 89 ef             	mov    edi,r13d
  408409:	e8 62 94 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  40840e:	48 89 c3             	mov    rbx,rax
  408411:	41 8b 44 24 04       	mov    eax,DWORD PTR [r12+0x4]
  408416:	8d 78 01             	lea    edi,[rax+0x1]
  408419:	c1 e7 04             	shl    edi,0x4
  40841c:	e8 4f 94 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  408421:	4c 89 fe             	mov    rsi,r15
  408424:	48 89 c2             	mov    rdx,rax
  408427:	4c 89 e7             	mov    rdi,r12
  40842a:	49 89 c6             	mov    r14,rax
  40842d:	45 31 ff             	xor    r15d,r15d
  408430:	e8 fb ca ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  408435:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
  40843a:	45 85 ed             	test   r13d,r13d
  40843d:	49 8b 00             	mov    rax,QWORD PTR [r8]
  408440:	49 8b 50 08          	mov    rdx,QWORD PTR [r8+0x8]
  408444:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  408449:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  40844e:	0f 84 0c 01 00 00    	je     408560 <AES::DecryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x190>
  408454:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  408458:	48 8d 54 24 20       	lea    rdx,[rsp+0x20]
  40845d:	48 8d 74 24 10       	lea    rsi,[rsp+0x10]
  408462:	4c 89 f1             	mov    rcx,r14
  408465:	4c 89 e7             	mov    rdi,r12
  408468:	e8 e3 be ff ff       	call   404350 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  40846d:	44 89 f8             	mov    eax,r15d
  408470:	41 83 c7 10          	add    r15d,0x10
  408474:	48 8d 4c 05 00       	lea    rcx,[rbp+rax*1+0x0]
  408479:	0f b6 11             	movzx  edx,BYTE PTR [rcx]
  40847c:	32 54 24 20          	xor    dl,BYTE PTR [rsp+0x20]
  408480:	88 14 03             	mov    BYTE PTR [rbx+rax*1],dl
  408483:	0f b6 54 05 01       	movzx  edx,BYTE PTR [rbp+rax*1+0x1]
  408488:	32 54 24 21          	xor    dl,BYTE PTR [rsp+0x21]
  40848c:	88 54 03 01          	mov    BYTE PTR [rbx+rax*1+0x1],dl
  408490:	0f b6 54 05 02       	movzx  edx,BYTE PTR [rbp+rax*1+0x2]
  408495:	32 54 24 22          	xor    dl,BYTE PTR [rsp+0x22]
  408499:	88 54 03 02          	mov    BYTE PTR [rbx+rax*1+0x2],dl
  40849d:	0f b6 54 05 03       	movzx  edx,BYTE PTR [rbp+rax*1+0x3]
  4084a2:	32 54 24 23          	xor    dl,BYTE PTR [rsp+0x23]
  4084a6:	88 54 03 03          	mov    BYTE PTR [rbx+rax*1+0x3],dl
  4084aa:	0f b6 54 05 04       	movzx  edx,BYTE PTR [rbp+rax*1+0x4]
  4084af:	32 54 24 24          	xor    dl,BYTE PTR [rsp+0x24]
  4084b3:	88 54 03 04          	mov    BYTE PTR [rbx+rax*1+0x4],dl
  4084b7:	0f b6 54 05 05       	movzx  edx,BYTE PTR [rbp+rax*1+0x5]
  4084bc:	32 54 24 25          	xor    dl,BYTE PTR [rsp+0x25]
  4084c0:	88 54 03 05          	mov    BYTE PTR [rbx+rax*1+0x5],dl
  4084c4:	0f b6 54 05 06       	movzx  edx,BYTE PTR [rbp+rax*1+0x6]
  4084c9:	32 54 24 26          	xor    dl,BYTE PTR [rsp+0x26]
  4084cd:	88 54 03 06          	mov    BYTE PTR [rbx+rax*1+0x6],dl
  4084d1:	0f b6 54 05 07       	movzx  edx,BYTE PTR [rbp+rax*1+0x7]
  4084d6:	32 54 24 27          	xor    dl,BYTE PTR [rsp+0x27]
  4084da:	88 54 03 07          	mov    BYTE PTR [rbx+rax*1+0x7],dl
  4084de:	0f b6 54 05 08       	movzx  edx,BYTE PTR [rbp+rax*1+0x8]
  4084e3:	32 54 24 28          	xor    dl,BYTE PTR [rsp+0x28]
  4084e7:	88 54 03 08          	mov    BYTE PTR [rbx+rax*1+0x8],dl
  4084eb:	0f b6 54 05 09       	movzx  edx,BYTE PTR [rbp+rax*1+0x9]
  4084f0:	32 54 24 29          	xor    dl,BYTE PTR [rsp+0x29]
  4084f4:	88 54 03 09          	mov    BYTE PTR [rbx+rax*1+0x9],dl
  4084f8:	0f b6 54 05 0a       	movzx  edx,BYTE PTR [rbp+rax*1+0xa]
  4084fd:	32 54 24 2a          	xor    dl,BYTE PTR [rsp+0x2a]
  408501:	88 54 03 0a          	mov    BYTE PTR [rbx+rax*1+0xa],dl
  408505:	0f b6 54 05 0b       	movzx  edx,BYTE PTR [rbp+rax*1+0xb]
  40850a:	32 54 24 2b          	xor    dl,BYTE PTR [rsp+0x2b]
  40850e:	88 54 03 0b          	mov    BYTE PTR [rbx+rax*1+0xb],dl
  408512:	0f b6 54 05 0c       	movzx  edx,BYTE PTR [rbp+rax*1+0xc]
  408517:	32 54 24 2c          	xor    dl,BYTE PTR [rsp+0x2c]
  40851b:	88 54 03 0c          	mov    BYTE PTR [rbx+rax*1+0xc],dl
  40851f:	0f b6 54 05 0d       	movzx  edx,BYTE PTR [rbp+rax*1+0xd]
  408524:	32 54 24 2d          	xor    dl,BYTE PTR [rsp+0x2d]
  408528:	88 54 03 0d          	mov    BYTE PTR [rbx+rax*1+0xd],dl
  40852c:	0f b6 54 05 0e       	movzx  edx,BYTE PTR [rbp+rax*1+0xe]
  408531:	32 54 24 2e          	xor    dl,BYTE PTR [rsp+0x2e]
  408535:	88 54 03 0e          	mov    BYTE PTR [rbx+rax*1+0xe],dl
  408539:	0f b6 54 05 0f       	movzx  edx,BYTE PTR [rbp+rax*1+0xf]
  40853e:	32 54 24 2f          	xor    dl,BYTE PTR [rsp+0x2f]
  408542:	45 39 fd             	cmp    r13d,r15d
  408545:	88 54 03 0f          	mov    BYTE PTR [rbx+rax*1+0xf],dl
  408549:	48 8b 01             	mov    rax,QWORD PTR [rcx]
  40854c:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
  408550:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  408555:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  40855a:	0f 87 f8 fe ff ff    	ja     408458 <AES::DecryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x88>
  408560:	4c 89 f7             	mov    rdi,r14
  408563:	e8 c8 94 ff ff       	call   401a30 <operator delete[](void*)@plt>
  408568:	48 8b 74 24 38       	mov    rsi,QWORD PTR [rsp+0x38]
  40856d:	64 48 33 34 25 28 00 	xor    rsi,QWORD PTR fs:0x28
  408574:	00 00 
  408576:	48 89 d8             	mov    rax,rbx
  408579:	75 0f                	jne    40858a <AES::DecryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)+0x1ba>
  40857b:	48 83 c4 48          	add    rsp,0x48
  40857f:	5b                   	pop    rbx
  408580:	5d                   	pop    rbp
  408581:	41 5c                	pop    r12
  408583:	41 5d                	pop    r13
  408585:	41 5e                	pop    r14
  408587:	41 5f                	pop    r15
  408589:	c3                   	ret    
  40858a:	e8 31 94 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  40858f:	90                   	nop

0000000000408590 <AES::DecryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>:
  408590:	41 55                	push   r13
  408592:	41 54                	push   r12
  408594:	55                   	push   rbp
  408595:	53                   	push   rbx
  408596:	48 89 d5             	mov    rbp,rdx
  408599:	48 89 fb             	mov    rbx,rdi
  40859c:	48 89 f7             	mov    rdi,rsi
  40859f:	48 83 ec 08          	sub    rsp,0x8
  4085a3:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
  4085a6:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
  4085aa:	4d 8b 00             	mov    r8,QWORD PTR [r8]
  4085ad:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  4085b0:	48 29 f2             	sub    rdx,rsi
  4085b3:	e8 18 fe ff ff       	call   4083d0 <AES::DecryptCFB(unsigned char const*, unsigned int, unsigned char const*, unsigned char const*)>
  4085b8:	49 89 c4             	mov    r12,rax
  4085bb:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
  4085bf:	2b 45 00             	sub    eax,DWORD PTR [rbp+0x0]
  4085c2:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
  4085c9:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
  4085d0:	00 
  4085d1:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
  4085d8:	00 
  4085d9:	48 85 c0             	test   rax,rax
  4085dc:	75 32                	jne    408610 <AES::DecryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x80>
  4085de:	4d 85 e4             	test   r12,r12
  4085e1:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
  4085e8:	00 
  4085e9:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
  4085f0:	00 
  4085f1:	74 08                	je     4085fb <AES::DecryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x6b>
  4085f3:	4c 89 e7             	mov    rdi,r12
  4085f6:	e8 35 94 ff ff       	call   401a30 <operator delete[](void*)@plt>
  4085fb:	48 83 c4 08          	add    rsp,0x8
  4085ff:	48 89 d8             	mov    rax,rbx
  408602:	5b                   	pop    rbx
  408603:	5d                   	pop    rbp
  408604:	41 5c                	pop    r12
  408606:	41 5d                	pop    r13
  408608:	c3                   	ret    
  408609:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  408610:	48 89 c7             	mov    rdi,rax
  408613:	48 89 c5             	mov    rbp,rax
  408616:	e8 85 94 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  40861b:	4c 8d 2c 28          	lea    r13,[rax+rbp*1]
  40861f:	48 89 03             	mov    QWORD PTR [rbx],rax
  408622:	48 89 ea             	mov    rdx,rbp
  408625:	4c 89 e6             	mov    rsi,r12
  408628:	48 89 c7             	mov    rdi,rax
  40862b:	4c 89 6b 10          	mov    QWORD PTR [rbx+0x10],r13
  40862f:	e8 3c 93 ff ff       	call   401970 <memmove@plt>
  408634:	4c 89 6b 08          	mov    QWORD PTR [rbx+0x8],r13
  408638:	eb b9                	jmp    4085f3 <AES::DecryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x63>
  40863a:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
  40863d:	48 89 c5             	mov    rbp,rax
  408640:	48 85 ff             	test   rdi,rdi
  408643:	74 05                	je     40864a <AES::DecryptCFB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0xba>
  408645:	e8 36 92 ff ff       	call   401880 <operator delete(void*)@plt>
  40864a:	48 89 ef             	mov    rdi,rbp
  40864d:	e8 5e 94 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  408652:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  408656:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40865d:	00 00 00 

0000000000408660 <AES::EncryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>:
  408660:	41 57                	push   r15
  408662:	41 56                	push   r14
  408664:	41 55                	push   r13
  408666:	41 54                	push   r12
  408668:	55                   	push   rbp
  408669:	53                   	push   rbx
  40866a:	48 89 f3             	mov    rbx,rsi
  40866d:	48 83 ec 28          	sub    rsp,0x28
  408671:	48 8b 42 08          	mov    rax,QWORD PTR [rdx+0x8]
  408675:	4c 8b 2a             	mov    r13,QWORD PTR [rdx]
  408678:	4c 8b 39             	mov    r15,QWORD PTR [rcx]
  40867b:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  408680:	48 89 df             	mov    rdi,rbx
  408683:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
  408688:	48 89 c1             	mov    rcx,rax
  40868b:	4c 29 e9             	sub    rcx,r13
  40868e:	89 ce                	mov    esi,ecx
  408690:	41 89 ce             	mov    r14d,ecx
  408693:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  408698:	e8 a3 f4 ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  40869d:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  4086a2:	89 cf                	mov    edi,ecx
  4086a4:	e8 c7 91 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  4086a9:	49 89 c4             	mov    r12,rax
  4086ac:	8b 43 04             	mov    eax,DWORD PTR [rbx+0x4]
  4086af:	8d 78 01             	lea    edi,[rax+0x1]
  4086b2:	c1 e7 04             	shl    edi,0x4
  4086b5:	e8 b6 91 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  4086ba:	4c 89 fe             	mov    rsi,r15
  4086bd:	48 89 c2             	mov    rdx,rax
  4086c0:	48 89 df             	mov    rdi,rbx
  4086c3:	48 89 c5             	mov    rbp,rax
  4086c6:	45 31 ff             	xor    r15d,r15d
  4086c9:	e8 62 c8 ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  4086ce:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  4086d3:	85 c9                	test   ecx,ecx
  4086d5:	74 27                	je     4086fe <AES::EncryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x9e>
  4086d7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  4086de:	00 00 
  4086e0:	44 89 fe             	mov    esi,r15d
  4086e3:	48 89 e9             	mov    rcx,rbp
  4086e6:	48 89 df             	mov    rdi,rbx
  4086e9:	49 8d 14 34          	lea    rdx,[r12+rsi*1]
  4086ed:	41 83 c7 10          	add    r15d,0x10
  4086f1:	4c 01 ee             	add    rsi,r13
  4086f4:	e8 57 bc ff ff       	call   404350 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  4086f9:	45 39 fe             	cmp    r14d,r15d
  4086fc:	77 e2                	ja     4086e0 <AES::EncryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x80>
  4086fe:	48 89 ef             	mov    rdi,rbp
  408701:	e8 2a 93 ff ff       	call   401a30 <operator delete[](void*)@plt>
  408706:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  40870b:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
  40870f:	2b 18                	sub    ebx,DWORD PTR [rax]
  408711:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  408716:	48 85 db             	test   rbx,rbx
  408719:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
  408720:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  408727:	00 
  408728:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  40872f:	00 
  408730:	75 2e                	jne    408760 <AES::EncryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x100>
  408732:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  408739:	00 
  40873a:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  408741:	00 
  408742:	4c 89 e7             	mov    rdi,r12
  408745:	e8 e6 92 ff ff       	call   401a30 <operator delete[](void*)@plt>
  40874a:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  40874f:	48 83 c4 28          	add    rsp,0x28
  408753:	5b                   	pop    rbx
  408754:	5d                   	pop    rbp
  408755:	41 5c                	pop    r12
  408757:	41 5d                	pop    r13
  408759:	41 5e                	pop    r14
  40875b:	41 5f                	pop    r15
  40875d:	c3                   	ret    
  40875e:	66 90                	xchg   ax,ax
  408760:	48 89 df             	mov    rdi,rbx
  408763:	e8 38 93 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  408768:	4c 8b 74 24 08       	mov    r14,QWORD PTR [rsp+0x8]
  40876d:	48 8d 2c 18          	lea    rbp,[rax+rbx*1]
  408771:	48 89 da             	mov    rdx,rbx
  408774:	4c 89 e6             	mov    rsi,r12
  408777:	48 89 c7             	mov    rdi,rax
  40877a:	49 89 06             	mov    QWORD PTR [r14],rax
  40877d:	49 89 6e 10          	mov    QWORD PTR [r14+0x10],rbp
  408781:	e8 6a 93 ff ff       	call   401af0 <memcpy@plt>
  408786:	49 89 6e 08          	mov    QWORD PTR [r14+0x8],rbp
  40878a:	eb b6                	jmp    408742 <AES::EncryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0xe2>
  40878c:	48 89 c3             	mov    rbx,rax
  40878f:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  408794:	48 8b 38             	mov    rdi,QWORD PTR [rax]
  408797:	48 85 ff             	test   rdi,rdi
  40879a:	74 05                	je     4087a1 <AES::EncryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x141>
  40879c:	e8 df 90 ff ff       	call   401880 <operator delete(void*)@plt>
  4087a1:	48 89 df             	mov    rdi,rbx
  4087a4:	e8 07 93 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  4087a9:	90                   	nop
  4087aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000004087b0 <AES::DecryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>:
  4087b0:	41 57                	push   r15
  4087b2:	41 56                	push   r14
  4087b4:	41 55                	push   r13
  4087b6:	41 54                	push   r12
  4087b8:	55                   	push   rbp
  4087b9:	53                   	push   rbx
  4087ba:	48 89 f3             	mov    rbx,rsi
  4087bd:	48 83 ec 28          	sub    rsp,0x28
  4087c1:	48 8b 42 08          	mov    rax,QWORD PTR [rdx+0x8]
  4087c5:	4c 8b 2a             	mov    r13,QWORD PTR [rdx]
  4087c8:	4c 8b 39             	mov    r15,QWORD PTR [rcx]
  4087cb:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  4087d0:	48 89 df             	mov    rdi,rbx
  4087d3:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
  4087d8:	48 89 c1             	mov    rcx,rax
  4087db:	4c 29 e9             	sub    rcx,r13
  4087de:	89 ce                	mov    esi,ecx
  4087e0:	41 89 ce             	mov    r14d,ecx
  4087e3:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  4087e8:	e8 53 f3 ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  4087ed:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  4087f2:	89 cf                	mov    edi,ecx
  4087f4:	e8 77 90 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  4087f9:	49 89 c4             	mov    r12,rax
  4087fc:	8b 43 04             	mov    eax,DWORD PTR [rbx+0x4]
  4087ff:	8d 78 01             	lea    edi,[rax+0x1]
  408802:	c1 e7 04             	shl    edi,0x4
  408805:	e8 66 90 ff ff       	call   401870 <operator new[](unsigned long)@plt>
  40880a:	4c 89 fe             	mov    rsi,r15
  40880d:	48 89 c2             	mov    rdx,rax
  408810:	48 89 df             	mov    rdi,rbx
  408813:	48 89 c5             	mov    rbp,rax
  408816:	45 31 ff             	xor    r15d,r15d
  408819:	e8 12 c7 ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  40881e:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  408823:	85 c9                	test   ecx,ecx
  408825:	74 27                	je     40884e <AES::DecryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x9e>
  408827:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40882e:	00 00 
  408830:	44 89 fe             	mov    esi,r15d
  408833:	48 89 e9             	mov    rcx,rbp
  408836:	48 89 df             	mov    rdi,rbx
  408839:	49 8d 14 34          	lea    rdx,[r12+rsi*1]
  40883d:	41 83 c7 10          	add    r15d,0x10
  408841:	4c 01 ee             	add    rsi,r13
  408844:	e8 97 a6 ff ff       	call   402ee0 <AES::DecryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  408849:	45 39 fe             	cmp    r14d,r15d
  40884c:	77 e2                	ja     408830 <AES::DecryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x80>
  40884e:	48 89 ef             	mov    rdi,rbp
  408851:	e8 da 91 ff ff       	call   401a30 <operator delete[](void*)@plt>
  408856:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  40885b:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
  40885f:	2b 18                	sub    ebx,DWORD PTR [rax]
  408861:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  408866:	48 85 db             	test   rbx,rbx
  408869:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
  408870:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  408877:	00 
  408878:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  40887f:	00 
  408880:	75 2e                	jne    4088b0 <AES::DecryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x100>
  408882:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  408889:	00 
  40888a:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  408891:	00 
  408892:	4c 89 e7             	mov    rdi,r12
  408895:	e8 96 91 ff ff       	call   401a30 <operator delete[](void*)@plt>
  40889a:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  40889f:	48 83 c4 28          	add    rsp,0x28
  4088a3:	5b                   	pop    rbx
  4088a4:	5d                   	pop    rbp
  4088a5:	41 5c                	pop    r12
  4088a7:	41 5d                	pop    r13
  4088a9:	41 5e                	pop    r14
  4088ab:	41 5f                	pop    r15
  4088ad:	c3                   	ret    
  4088ae:	66 90                	xchg   ax,ax
  4088b0:	48 89 df             	mov    rdi,rbx
  4088b3:	e8 e8 91 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  4088b8:	4c 8b 74 24 08       	mov    r14,QWORD PTR [rsp+0x8]
  4088bd:	48 8d 2c 18          	lea    rbp,[rax+rbx*1]
  4088c1:	48 89 da             	mov    rdx,rbx
  4088c4:	4c 89 e6             	mov    rsi,r12
  4088c7:	48 89 c7             	mov    rdi,rax
  4088ca:	49 89 06             	mov    QWORD PTR [r14],rax
  4088cd:	49 89 6e 10          	mov    QWORD PTR [r14+0x10],rbp
  4088d1:	e8 1a 92 ff ff       	call   401af0 <memcpy@plt>
  4088d6:	49 89 6e 08          	mov    QWORD PTR [r14+0x8],rbp
  4088da:	eb b6                	jmp    408892 <AES::DecryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0xe2>
  4088dc:	48 89 c3             	mov    rbx,rax
  4088df:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  4088e4:	48 8b 38             	mov    rdi,QWORD PTR [rax]
  4088e7:	48 85 ff             	test   rdi,rdi
  4088ea:	74 05                	je     4088f1 <AES::DecryptECB(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x141>
  4088ec:	e8 8f 8f ff ff       	call   401880 <operator delete(void*)@plt>
  4088f1:	48 89 df             	mov    rdi,rbx
  4088f4:	e8 b7 91 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  4088f9:	90                   	nop
  4088fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000408900 <AES::EncryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)>:
  408900:	41 57                	push   r15
  408902:	41 56                	push   r14
  408904:	41 55                	push   r13
  408906:	41 54                	push   r12
  408908:	55                   	push   rbp
  408909:	53                   	push   rbx
  40890a:	48 89 f3             	mov    rbx,rsi
  40890d:	48 83 ec 48          	sub    rsp,0x48
  408911:	48 8b 42 08          	mov    rax,QWORD PTR [rdx+0x8]
  408915:	4c 8b 32             	mov    r14,QWORD PTR [rdx]
  408918:	64 48 8b 34 25 28 00 	mov    rsi,QWORD PTR fs:0x28
  40891f:	00 00 
  408921:	48 89 74 24 38       	mov    QWORD PTR [rsp+0x38],rsi
  408926:	31 f6                	xor    esi,esi
  408928:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  40892b:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  408930:	48 89 df             	mov    rdi,rbx
  408933:	48 89 c1             	mov    rcx,rax
  408936:	4d 8b 38             	mov    r15,QWORD PTR [r8]
  408939:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
  40893e:	4c 29 f1             	sub    rcx,r14
  408941:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  408945:	49 89 f5             	mov    r13,rsi
  408948:	89 ce                	mov    esi,ecx
  40894a:	89 0c 24             	mov    DWORD PTR [rsp],ecx
  40894d:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  408952:	e8 e9 f1 ff ff       	call   407b40 <AES::CheckLength(unsigned int)>
  408957:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  40895c:	89 cf                	mov    edi,ecx
  40895e:	e8 0d 8f ff ff       	call   401870 <operator new[](unsigned long)@plt>
  408963:	49 89 c4             	mov    r12,rax
  408966:	8b 43 04             	mov    eax,DWORD PTR [rbx+0x4]
  408969:	8d 78 01             	lea    edi,[rax+0x1]
  40896c:	c1 e7 04             	shl    edi,0x4
  40896f:	e8 fc 8e ff ff       	call   401870 <operator new[](unsigned long)@plt>
  408974:	4c 89 ee             	mov    rsi,r13
  408977:	48 89 c2             	mov    rdx,rax
  40897a:	48 89 df             	mov    rdi,rbx
  40897d:	48 89 c5             	mov    rbp,rax
  408980:	e8 ab c5 ff ff       	call   404f30 <AES::KeyExpansion(unsigned char const*, unsigned char*)>
  408985:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  40898a:	49 8b 07             	mov    rax,QWORD PTR [r15]
  40898d:	49 8b 57 08          	mov    rdx,QWORD PTR [r15+0x8]
  408991:	45 31 ff             	xor    r15d,r15d
  408994:	85 c9                	test   ecx,ecx
  408996:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
  40899b:	48 89 54 24 28       	mov    QWORD PTR [rsp+0x28],rdx
  4089a0:	0f 84 e3 00 00 00    	je     408a89 <AES::EncryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x189>
  4089a6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4089ad:	00 00 00 
  4089b0:	44 89 fa             	mov    edx,r15d
  4089b3:	48 8d 74 24 20       	lea    rsi,[rsp+0x20]
  4089b8:	48 89 e9             	mov    rcx,rbp
  4089bb:	41 0f b6 04 16       	movzx  eax,BYTE PTR [r14+rdx*1]
  4089c0:	4d 8d 2c 14          	lea    r13,[r12+rdx*1]
  4089c4:	48 89 df             	mov    rdi,rbx
  4089c7:	30 44 24 20          	xor    BYTE PTR [rsp+0x20],al
  4089cb:	41 83 c7 10          	add    r15d,0x10
  4089cf:	41 0f b6 44 16 01    	movzx  eax,BYTE PTR [r14+rdx*1+0x1]
  4089d5:	30 44 24 21          	xor    BYTE PTR [rsp+0x21],al
  4089d9:	41 0f b6 44 16 02    	movzx  eax,BYTE PTR [r14+rdx*1+0x2]
  4089df:	30 44 24 22          	xor    BYTE PTR [rsp+0x22],al
  4089e3:	41 0f b6 44 16 03    	movzx  eax,BYTE PTR [r14+rdx*1+0x3]
  4089e9:	30 44 24 23          	xor    BYTE PTR [rsp+0x23],al
  4089ed:	41 0f b6 44 16 04    	movzx  eax,BYTE PTR [r14+rdx*1+0x4]
  4089f3:	30 44 24 24          	xor    BYTE PTR [rsp+0x24],al
  4089f7:	41 0f b6 44 16 05    	movzx  eax,BYTE PTR [r14+rdx*1+0x5]
  4089fd:	30 44 24 25          	xor    BYTE PTR [rsp+0x25],al
  408a01:	41 0f b6 44 16 06    	movzx  eax,BYTE PTR [r14+rdx*1+0x6]
  408a07:	30 44 24 26          	xor    BYTE PTR [rsp+0x26],al
  408a0b:	41 0f b6 44 16 07    	movzx  eax,BYTE PTR [r14+rdx*1+0x7]
  408a11:	30 44 24 27          	xor    BYTE PTR [rsp+0x27],al
  408a15:	41 0f b6 44 16 08    	movzx  eax,BYTE PTR [r14+rdx*1+0x8]
  408a1b:	30 44 24 28          	xor    BYTE PTR [rsp+0x28],al
  408a1f:	41 0f b6 44 16 09    	movzx  eax,BYTE PTR [r14+rdx*1+0x9]
  408a25:	30 44 24 29          	xor    BYTE PTR [rsp+0x29],al
  408a29:	41 0f b6 44 16 0a    	movzx  eax,BYTE PTR [r14+rdx*1+0xa]
  408a2f:	30 44 24 2a          	xor    BYTE PTR [rsp+0x2a],al
  408a33:	41 0f b6 44 16 0b    	movzx  eax,BYTE PTR [r14+rdx*1+0xb]
  408a39:	30 44 24 2b          	xor    BYTE PTR [rsp+0x2b],al
  408a3d:	41 0f b6 44 16 0c    	movzx  eax,BYTE PTR [r14+rdx*1+0xc]
  408a43:	30 44 24 2c          	xor    BYTE PTR [rsp+0x2c],al
  408a47:	41 0f b6 44 16 0d    	movzx  eax,BYTE PTR [r14+rdx*1+0xd]
  408a4d:	30 44 24 2d          	xor    BYTE PTR [rsp+0x2d],al
  408a51:	41 0f b6 44 16 0e    	movzx  eax,BYTE PTR [r14+rdx*1+0xe]
  408a57:	30 44 24 2e          	xor    BYTE PTR [rsp+0x2e],al
  408a5b:	41 0f b6 44 16 0f    	movzx  eax,BYTE PTR [r14+rdx*1+0xf]
  408a61:	4c 89 ea             	mov    rdx,r13
  408a64:	30 44 24 2f          	xor    BYTE PTR [rsp+0x2f],al
  408a68:	e8 e3 b8 ff ff       	call   404350 <AES::EncryptBlock(unsigned char const*, unsigned char*, unsigned char*)>
  408a6d:	44 39 3c 24          	cmp    DWORD PTR [rsp],r15d
  408a71:	49 8b 45 00          	mov    rax,QWORD PTR [r13+0x0]
  408a75:	49 8b 55 08          	mov    rdx,QWORD PTR [r13+0x8]
  408a79:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
  408a7e:	48 89 54 24 28       	mov    QWORD PTR [rsp+0x28],rdx
  408a83:	0f 87 27 ff ff ff    	ja     4089b0 <AES::EncryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0xb0>
  408a89:	48 89 ef             	mov    rdi,rbp
  408a8c:	e8 9f 8f ff ff       	call   401a30 <operator delete[](void*)@plt>
  408a91:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  408a96:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
  408a9a:	2b 18                	sub    ebx,DWORD PTR [rax]
  408a9c:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  408aa1:	48 85 db             	test   rbx,rbx
  408aa4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
  408aab:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  408ab2:	00 
  408ab3:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  408aba:	00 
  408abb:	75 43                	jne    408b00 <AES::EncryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x200>
  408abd:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  408ac4:	00 
  408ac5:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  408acc:	00 
  408acd:	4c 89 e7             	mov    rdi,r12
  408ad0:	e8 5b 8f ff ff       	call   401a30 <operator delete[](void*)@plt>
  408ad5:	48 8b 74 24 38       	mov    rsi,QWORD PTR [rsp+0x38]
  408ada:	64 48 33 34 25 28 00 	xor    rsi,QWORD PTR fs:0x28
  408ae1:	00 00 
  408ae3:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  408ae8:	75 5f                	jne    408b49 <AES::EncryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x249>
  408aea:	48 83 c4 48          	add    rsp,0x48
  408aee:	5b                   	pop    rbx
  408aef:	5d                   	pop    rbp
  408af0:	41 5c                	pop    r12
  408af2:	41 5d                	pop    r13
  408af4:	41 5e                	pop    r14
  408af6:	41 5f                	pop    r15
  408af8:	c3                   	ret    
  408af9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  408b00:	48 89 df             	mov    rdi,rbx
  408b03:	e8 98 8f ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  408b08:	4c 8b 7c 24 08       	mov    r15,QWORD PTR [rsp+0x8]
  408b0d:	48 8d 2c 18          	lea    rbp,[rax+rbx*1]
  408b11:	48 89 da             	mov    rdx,rbx
  408b14:	4c 89 e6             	mov    rsi,r12
  408b17:	48 89 c7             	mov    rdi,rax
  408b1a:	49 89 07             	mov    QWORD PTR [r15],rax
  408b1d:	49 89 6f 10          	mov    QWORD PTR [r15+0x10],rbp
  408b21:	e8 ca 8f ff ff       	call   401af0 <memcpy@plt>
  408b26:	49 89 6f 08          	mov    QWORD PTR [r15+0x8],rbp
  408b2a:	eb a1                	jmp    408acd <AES::EncryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x1cd>
  408b2c:	48 89 c3             	mov    rbx,rax
  408b2f:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  408b34:	48 8b 38             	mov    rdi,QWORD PTR [rax]
  408b37:	48 85 ff             	test   rdi,rdi
  408b3a:	74 05                	je     408b41 <AES::EncryptCBC(std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> >)+0x241>
  408b3c:	e8 3f 8d ff ff       	call   401880 <operator delete(void*)@plt>
  408b41:	48 89 df             	mov    rdi,rbx
  408b44:	e8 67 8f ff ff       	call   401ab0 <_Unwind_Resume@plt>
  408b49:	e8 72 8e ff ff       	call   4019c0 <__stack_chk_fail@plt>
  408b4e:	66 90                	xchg   ax,ax

0000000000408b50 <std::ctype<char>::do_widen(char) const>:
  408b50:	89 f0                	mov    eax,esi
  408b52:	c3                   	ret    
  408b53:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b5a:	00 00 00 
  408b5d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000408b60 <std::_Function_handler<int (int, int), int (*)(int, int)>::_M_invoke(std::_Any_data const&, int&&, int&&)>:
  408b60:	48 89 f1             	mov    rcx,rsi
  408b63:	48 8b 07             	mov    rax,QWORD PTR [rdi]
  408b66:	8b 32                	mov    esi,DWORD PTR [rdx]
  408b68:	8b 39                	mov    edi,DWORD PTR [rcx]
  408b6a:	ff e0                	jmp    rax
  408b6c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000408b70 <std::_Function_base::_Base_manager<int (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
  408b70:	83 fa 01             	cmp    edx,0x1
  408b73:	74 2b                	je     408ba0 <std::_Function_base::_Base_manager<int (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x30>
  408b75:	72 19                	jb     408b90 <std::_Function_base::_Base_manager<int (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
  408b77:	83 fa 02             	cmp    edx,0x2
  408b7a:	75 0b                	jne    408b87 <std::_Function_base::_Base_manager<int (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
  408b7c:	48 85 ff             	test   rdi,rdi
  408b7f:	48 8b 06             	mov    rax,QWORD PTR [rsi]
  408b82:	74 03                	je     408b87 <std::_Function_base::_Base_manager<int (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
  408b84:	48 89 07             	mov    QWORD PTR [rdi],rax
  408b87:	31 c0                	xor    eax,eax
  408b89:	c3                   	ret    
  408b8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  408b90:	48 c7 07 60 ac 40 00 	mov    QWORD PTR [rdi],0x40ac60
  408b97:	31 c0                	xor    eax,eax
  408b99:	c3                   	ret    
  408b9a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  408ba0:	48 89 37             	mov    QWORD PTR [rdi],rsi
  408ba3:	31 c0                	xor    eax,eax
  408ba5:	c3                   	ret    
  408ba6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  408bad:	00 00 00 

0000000000408bb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)>:
  408bb0:	55                   	push   rbp
  408bb1:	49 89 f2             	mov    r10,rsi
  408bb4:	48 89 d6             	mov    rsi,rdx
  408bb7:	48 89 ca             	mov    rdx,rcx
  408bba:	48 89 e5             	mov    rbp,rsp
  408bbd:	41 55                	push   r13
  408bbf:	41 54                	push   r12
  408bc1:	53                   	push   rbx
  408bc2:	49 89 fc             	mov    r12,rdi
  408bc5:	48 81 ec e8 00 00 00 	sub    rsp,0xe8
  408bcc:	84 c0                	test   al,al
  408bce:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
  408bd5:	4c 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r9
  408bdc:	74 26                	je     408c04 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)+0x54>
  408bde:	0f 29 85 60 ff ff ff 	movaps XMMWORD PTR [rbp-0xa0],xmm0
  408be5:	0f 29 8d 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm1
  408bec:	0f 29 55 80          	movaps XMMWORD PTR [rbp-0x80],xmm2
  408bf0:	0f 29 5d 90          	movaps XMMWORD PTR [rbp-0x70],xmm3
  408bf4:	0f 29 65 a0          	movaps XMMWORD PTR [rbp-0x60],xmm4
  408bf8:	0f 29 6d b0          	movaps XMMWORD PTR [rbp-0x50],xmm5
  408bfc:	0f 29 75 c0          	movaps XMMWORD PTR [rbp-0x40],xmm6
  408c00:	0f 29 7d d0          	movaps XMMWORD PTR [rbp-0x30],xmm7
  408c04:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  408c0b:	00 00 
  408c0d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
  408c14:	31 c0                	xor    eax,eax
  408c16:	48 8d 46 1e          	lea    rax,[rsi+0x1e]
  408c1a:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
  408c21:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
  408c25:	c7 85 10 ff ff ff 20 	mov    DWORD PTR [rbp-0xf0],0x20
  408c2c:	00 00 00 
  408c2f:	c7 85 14 ff ff ff 30 	mov    DWORD PTR [rbp-0xec],0x30
  408c36:	00 00 00 
  408c39:	48 29 c4             	sub    rsp,rax
  408c3c:	48 8d 45 10          	lea    rax,[rbp+0x10]
  408c40:	4c 8d 6c 24 0f       	lea    r13,[rsp+0xf]
  408c45:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  408c4c:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
  408c53:	49 83 e5 f0          	and    r13,0xfffffffffffffff0
  408c57:	4c 89 ef             	mov    rdi,r13
  408c5a:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
  408c61:	41 ff d2             	call   r10
  408c64:	49 8d 7c 24 10       	lea    rdi,[r12+0x10]
  408c69:	48 63 d8             	movsxd rbx,eax
  408c6c:	48 83 fb 0f          	cmp    rbx,0xf
  408c70:	48 89 9d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rbx
  408c77:	49 89 3c 24          	mov    QWORD PTR [r12],rdi
  408c7b:	77 43                	ja     408cc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)+0x110>
  408c7d:	48 83 fb 01          	cmp    rbx,0x1
  408c81:	74 7d                	je     408d00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)+0x150>
  408c83:	31 c0                	xor    eax,eax
  408c85:	48 85 db             	test   rbx,rbx
  408c88:	48 89 fa             	mov    rdx,rdi
  408c8b:	75 57                	jne    408ce4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)+0x134>
  408c8d:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
  408c94:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
  408c9b:	00 00 
  408c9d:	49 89 44 24 08       	mov    QWORD PTR [r12+0x8],rax
  408ca2:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
  408ca6:	4c 89 e0             	mov    rax,r12
  408ca9:	75 6c                	jne    408d17 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)+0x167>
  408cab:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
  408caf:	5b                   	pop    rbx
  408cb0:	41 5c                	pop    r12
  408cb2:	41 5d                	pop    r13
  408cb4:	5d                   	pop    rbp
  408cb5:	c3                   	ret    
  408cb6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  408cbd:	00 00 00 
  408cc0:	48 8d b5 08 ff ff ff 	lea    rsi,[rbp-0xf8]
  408cc7:	4c 89 e7             	mov    rdi,r12
  408cca:	31 d2                	xor    edx,edx
  408ccc:	e8 df 8b ff ff       	call   4018b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
  408cd1:	48 89 c7             	mov    rdi,rax
  408cd4:	49 89 04 24          	mov    QWORD PTR [r12],rax
  408cd8:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  408cdf:	49 89 44 24 10       	mov    QWORD PTR [r12+0x10],rax
  408ce4:	48 89 da             	mov    rdx,rbx
  408ce7:	4c 89 ee             	mov    rsi,r13
  408cea:	e8 01 8e ff ff       	call   401af0 <memcpy@plt>
  408cef:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  408cf6:	49 8b 14 24          	mov    rdx,QWORD PTR [r12]
  408cfa:	eb 91                	jmp    408c8d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)+0xdd>
  408cfc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  408d00:	41 0f b6 45 00       	movzx  eax,BYTE PTR [r13+0x0]
  408d05:	48 89 fa             	mov    rdx,rdi
  408d08:	41 88 44 24 10       	mov    BYTE PTR [r12+0x10],al
  408d0d:	b8 01 00 00 00       	mov    eax,0x1
  408d12:	e9 76 ff ff ff       	jmp    408c8d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)+0xdd>
  408d17:	e8 a4 8c ff ff       	call   4019c0 <__stack_chk_fail@plt>
  408d1c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000408d20 <std::enable_if<std::function<int (int, int)>::_Callable<std::decay<int (&)(int, int)>::type, std::result_of<std::decay<int (&)(int, int)>::type (int, int)>::type>::value, std::function<int (int, int)>&>::type std::function<int (int, int)>::operator=<int (&)(int, int)>(int (&)(int, int))>:
  408d20:	53                   	push   rbx
  408d21:	48 89 fb             	mov    rbx,rdi
  408d24:	48 83 ec 30          	sub    rsp,0x30
  408d28:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  408d2f:	00 00 
  408d31:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  408d36:	31 c0                	xor    eax,eax
  408d38:	48 85 f6             	test   rsi,rsi
  408d3b:	74 73                	je     408db0 <std::enable_if<std::function<int (int, int)>::_Callable<std::decay<int (&)(int, int)>::type, std::result_of<std::decay<int (&)(int, int)>::type (int, int)>::type>::value, std::function<int (int, int)>&>::type std::function<int (int, int)>::operator=<int (&)(int, int)>(int (&)(int, int))+0x90>
  408d3d:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  408d41:	ba 60 8b 40 00       	mov    edx,0x408b60
  408d46:	b9 70 8b 40 00       	mov    ecx,0x408b70
  408d4b:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  408d4f:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
  408d53:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
  408d58:	4c 8b 0b             	mov    r9,QWORD PTR [rbx]
  408d5b:	4c 8b 53 08          	mov    r10,QWORD PTR [rbx+0x8]
  408d5f:	48 89 4b 10          	mov    QWORD PTR [rbx+0x10],rcx
  408d63:	48 8b 4b 18          	mov    rcx,QWORD PTR [rbx+0x18]
  408d67:	48 85 c0             	test   rax,rax
  408d6a:	48 89 33             	mov    QWORD PTR [rbx],rsi
  408d6d:	4c 89 0c 24          	mov    QWORD PTR [rsp],r9
  408d71:	48 89 7b 08          	mov    QWORD PTR [rbx+0x8],rdi
  408d75:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
  408d7a:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  408d7f:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  408d84:	48 89 53 18          	mov    QWORD PTR [rbx+0x18],rdx
  408d88:	74 0d                	je     408d97 <std::enable_if<std::function<int (int, int)>::_Callable<std::decay<int (&)(int, int)>::type, std::result_of<std::decay<int (&)(int, int)>::type (int, int)>::type>::value, std::function<int (int, int)>&>::type std::function<int (int, int)>::operator=<int (&)(int, int)>(int (&)(int, int))+0x77>
  408d8a:	ba 03 00 00 00       	mov    edx,0x3
  408d8f:	48 89 e6             	mov    rsi,rsp
  408d92:	48 89 e7             	mov    rdi,rsp
  408d95:	ff d0                	call   rax
  408d97:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
  408d9c:	64 48 33 3c 25 28 00 	xor    rdi,QWORD PTR fs:0x28
  408da3:	00 00 
  408da5:	48 89 d8             	mov    rax,rbx
  408da8:	75 0f                	jne    408db9 <std::enable_if<std::function<int (int, int)>::_Callable<std::decay<int (&)(int, int)>::type, std::result_of<std::decay<int (&)(int, int)>::type (int, int)>::type>::value, std::function<int (int, int)>&>::type std::function<int (int, int)>::operator=<int (&)(int, int)>(int (&)(int, int))+0x99>
  408daa:	48 83 c4 30          	add    rsp,0x30
  408dae:	5b                   	pop    rbx
  408daf:	c3                   	ret    
  408db0:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
  408db5:	31 c9                	xor    ecx,ecx
  408db7:	eb 92                	jmp    408d4b <std::enable_if<std::function<int (int, int)>::_Callable<std::decay<int (&)(int, int)>::type, std::result_of<std::decay<int (&)(int, int)>::type (int, int)>::type>::value, std::function<int (int, int)>&>::type std::function<int (int, int)>::operator=<int (&)(int, int)>(int (&)(int, int))+0x2b>
  408db9:	e8 02 8c ff ff       	call   4019c0 <__stack_chk_fail@plt>
  408dbe:	66 90                	xchg   ax,ax

0000000000408dc0 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
  408dc0:	55                   	push   rbp
  408dc1:	53                   	push   rbx
  408dc2:	48 89 f5             	mov    rbp,rsi
  408dc5:	48 89 fb             	mov    rbx,rdi
  408dc8:	be c8 99 40 00       	mov    esi,0x4099c8
  408dcd:	48 83 ec 38          	sub    rsp,0x38
  408dd1:	48 c7 47 10 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
  408dd8:	00 
  408dd9:	c6 47 20 01          	mov    BYTE PTR [rdi+0x20],0x1
  408ddd:	48 89 ef             	mov    rdi,rbp
  408de0:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  408de7:	00 00 
  408de9:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  408dee:	31 c0                	xor    eax,eax
  408df0:	e8 2b 8c ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408df5:	85 c0                	test   eax,eax
  408df7:	0f 85 93 01 00 00    	jne    408f90 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1d0>
  408dfd:	48 c7 04 24 60 24 40 	mov    QWORD PTR [rsp],0x402460
  408e04:	00 
  408e05:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  408e09:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  408e0e:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  408e11:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  408e15:	48 89 03             	mov    QWORD PTR [rbx],rax
  408e18:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  408e1c:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  408e20:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  408e24:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  408e28:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  408e2d:	48 85 c0             	test   rax,rax
  408e30:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  408e35:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  408e3c:	00 
  408e3d:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  408e42:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  408e49:	00 
  408e4a:	74 0d                	je     408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  408e4c:	ba 03 00 00 00       	mov    edx,0x3
  408e51:	48 89 e6             	mov    rsi,rsp
  408e54:	48 89 e7             	mov    rdi,rsp
  408e57:	ff d0                	call   rax
  408e59:	be fc 99 40 00       	mov    esi,0x4099fc
  408e5e:	48 89 ef             	mov    rdi,rbp
  408e61:	e8 ba 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408e66:	85 c0                	test   eax,eax
  408e68:	0f 84 9a 02 00 00    	je     409108 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x348>
  408e6e:	be 07 9a 40 00       	mov    esi,0x409a07
  408e73:	48 89 ef             	mov    rdi,rbp
  408e76:	e8 a5 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408e7b:	85 c0                	test   eax,eax
  408e7d:	0f 84 1d 02 00 00    	je     4090a0 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x2e0>
  408e83:	be 11 9a 40 00       	mov    esi,0x409a11
  408e88:	48 89 ef             	mov    rdi,rbp
  408e8b:	e8 90 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408e90:	85 c0                	test   eax,eax
  408e92:	0f 84 a8 03 00 00    	je     409240 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x480>
  408e98:	be 1c 9a 40 00       	mov    esi,0x409a1c
  408e9d:	48 89 ef             	mov    rdi,rbp
  408ea0:	e8 7b 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408ea5:	85 c0                	test   eax,eax
  408ea7:	0f 84 2b 03 00 00    	je     4091d8 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x418>
  408ead:	be 20 9a 40 00       	mov    esi,0x409a20
  408eb2:	48 89 ef             	mov    rdi,rbp
  408eb5:	e8 66 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408eba:	85 c0                	test   eax,eax
  408ebc:	0f 84 7e 04 00 00    	je     409340 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x580>
  408ec2:	be 24 9a 40 00       	mov    esi,0x409a24
  408ec7:	48 89 ef             	mov    rdi,rbp
  408eca:	e8 51 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408ecf:	85 c0                	test   eax,eax
  408ed1:	0f 84 a1 05 00 00    	je     409478 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x6b8>
  408ed7:	be 28 9a 40 00       	mov    esi,0x409a28
  408edc:	48 89 ef             	mov    rdi,rbp
  408edf:	e8 3c 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408ee4:	85 c0                	test   eax,eax
  408ee6:	0f 84 24 05 00 00    	je     409410 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x650>
  408eec:	be 2c 9a 40 00       	mov    esi,0x409a2c
  408ef1:	48 89 ef             	mov    rdi,rbp
  408ef4:	e8 27 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408ef9:	85 c0                	test   eax,eax
  408efb:	0f 84 df 05 00 00    	je     4094e0 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x720>
  408f01:	be 30 9a 40 00       	mov    esi,0x409a30
  408f06:	48 89 ef             	mov    rdi,rbp
  408f09:	e8 12 8b ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408f0e:	85 c0                	test   eax,eax
  408f10:	0f 84 2f 06 00 00    	je     409545 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x785>
  408f16:	be 34 9a 40 00       	mov    esi,0x409a34
  408f1b:	48 89 ef             	mov    rdi,rbp
  408f1e:	e8 fd 8a ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408f23:	85 c0                	test   eax,eax
  408f25:	0f 84 7f 06 00 00    	je     4095aa <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x7ea>
  408f2b:	be 38 9a 40 00       	mov    esi,0x409a38
  408f30:	48 89 ef             	mov    rdi,rbp
  408f33:	e8 e8 8a ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408f38:	85 c0                	test   eax,eax
  408f3a:	0f 84 cf 06 00 00    	je     40960f <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x84f>
  408f40:	be 3f 9a 40 00       	mov    esi,0x409a3f
  408f45:	48 89 ef             	mov    rdi,rbp
  408f48:	e8 d3 8a ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408f4d:	85 c0                	test   eax,eax
  408f4f:	0f 84 1f 07 00 00    	je     409674 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x8b4>
  408f55:	be 4c 9a 40 00       	mov    esi,0x409a4c
  408f5a:	48 89 ef             	mov    rdi,rbp
  408f5d:	e8 be 8a ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408f62:	85 c0                	test   eax,eax
  408f64:	0f 84 1c 07 00 00    	je     409686 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x8c6>
  408f6a:	c6 43 20 00          	mov    BYTE PTR [rbx+0x20],0x0
  408f6e:	66 90                	xchg   ax,ax
  408f70:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
  408f75:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  408f7c:	00 00 
  408f7e:	0f 85 14 07 00 00    	jne    409698 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x8d8>
  408f84:	48 83 c4 38          	add    rsp,0x38
  408f88:	5b                   	pop    rbx
  408f89:	5d                   	pop    rbp
  408f8a:	c3                   	ret    
  408f8b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  408f90:	be 3b 9a 40 00       	mov    esi,0x409a3b
  408f95:	48 89 ef             	mov    rdi,rbp
  408f98:	e8 83 8a ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408f9d:	85 c0                	test   eax,eax
  408f9f:	0f 84 93 00 00 00    	je     409038 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x278>
  408fa5:	be d0 99 40 00       	mov    esi,0x4099d0
  408faa:	48 89 ef             	mov    rdi,rbp
  408fad:	e8 6e 8a ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408fb2:	85 c0                	test   eax,eax
  408fb4:	0f 84 b6 01 00 00    	je     409170 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x3b0>
  408fba:	be dc 99 40 00       	mov    esi,0x4099dc
  408fbf:	48 89 ef             	mov    rdi,rbp
  408fc2:	e8 59 8a ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  408fc7:	85 c0                	test   eax,eax
  408fc9:	0f 85 d9 02 00 00    	jne    4092a8 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x4e8>
  408fcf:	48 c7 04 24 90 24 40 	mov    QWORD PTR [rsp],0x402490
  408fd6:	00 
  408fd7:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  408fdb:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  408fe0:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  408fe3:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  408fe7:	48 89 03             	mov    QWORD PTR [rbx],rax
  408fea:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  408fee:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  408ff2:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  408ff6:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  408ffa:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  408fff:	48 85 c0             	test   rax,rax
  409002:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409007:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  40900e:	00 
  40900f:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  409014:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  40901b:	00 
  40901c:	0f 84 37 fe ff ff    	je     408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  409022:	ba 03 00 00 00       	mov    edx,0x3
  409027:	48 89 e6             	mov    rsi,rsp
  40902a:	48 89 e7             	mov    rdi,rsp
  40902d:	ff d0                	call   rax
  40902f:	e9 25 fe ff ff       	jmp    408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  409034:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  409038:	48 c7 04 24 70 24 40 	mov    QWORD PTR [rsp],0x402470
  40903f:	00 
  409040:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  409044:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409049:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  40904c:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409050:	48 89 03             	mov    QWORD PTR [rbx],rax
  409053:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  409057:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  40905b:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  40905f:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  409063:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409068:	48 85 c0             	test   rax,rax
  40906b:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409070:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  409077:	00 
  409078:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  40907d:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  409084:	00 
  409085:	0f 84 ce fd ff ff    	je     408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  40908b:	ba 03 00 00 00       	mov    edx,0x3
  409090:	48 89 e6             	mov    rsi,rsp
  409093:	48 89 e7             	mov    rdi,rsp
  409096:	ff d0                	call   rax
  409098:	e9 bc fd ff ff       	jmp    408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  40909d:	0f 1f 00             	nop    DWORD PTR [rax]
  4090a0:	48 c7 04 24 d0 24 40 	mov    QWORD PTR [rsp],0x4024d0
  4090a7:	00 
  4090a8:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4090ac:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  4090b1:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  4090b4:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  4090b8:	48 89 03             	mov    QWORD PTR [rbx],rax
  4090bb:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4090bf:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  4090c3:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  4090c7:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  4090cb:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  4090d0:	48 85 c0             	test   rax,rax
  4090d3:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4090d8:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  4090df:	00 
  4090e0:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4090e5:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  4090ec:	00 
  4090ed:	0f 84 7d fe ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  4090f3:	ba 03 00 00 00       	mov    edx,0x3
  4090f8:	48 89 e6             	mov    rsi,rsp
  4090fb:	48 89 e7             	mov    rdi,rsp
  4090fe:	ff d0                	call   rax
  409100:	e9 6b fe ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409105:	0f 1f 00             	nop    DWORD PTR [rax]
  409108:	48 c7 04 24 c0 24 40 	mov    QWORD PTR [rsp],0x4024c0
  40910f:	00 
  409110:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  409114:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409119:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  40911c:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409120:	48 89 03             	mov    QWORD PTR [rbx],rax
  409123:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  409127:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  40912b:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  40912f:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  409133:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409138:	48 85 c0             	test   rax,rax
  40913b:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409140:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  409147:	00 
  409148:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  40914d:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  409154:	00 
  409155:	0f 84 15 fe ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  40915b:	ba 03 00 00 00       	mov    edx,0x3
  409160:	48 89 e6             	mov    rsi,rsp
  409163:	48 89 e7             	mov    rdi,rsp
  409166:	ff d0                	call   rax
  409168:	e9 03 fe ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  40916d:	0f 1f 00             	nop    DWORD PTR [rax]
  409170:	48 c7 04 24 80 24 40 	mov    QWORD PTR [rsp],0x402480
  409177:	00 
  409178:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40917c:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409181:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  409184:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409188:	48 89 03             	mov    QWORD PTR [rbx],rax
  40918b:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  40918f:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  409193:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  409197:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  40919b:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  4091a0:	48 85 c0             	test   rax,rax
  4091a3:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4091a8:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  4091af:	00 
  4091b0:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4091b5:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  4091bc:	00 
  4091bd:	0f 84 96 fc ff ff    	je     408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  4091c3:	ba 03 00 00 00       	mov    edx,0x3
  4091c8:	48 89 e6             	mov    rsi,rsp
  4091cb:	48 89 e7             	mov    rdi,rsp
  4091ce:	ff d0                	call   rax
  4091d0:	e9 84 fc ff ff       	jmp    408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  4091d5:	0f 1f 00             	nop    DWORD PTR [rax]
  4091d8:	48 c7 04 24 f0 2d 40 	mov    QWORD PTR [rsp],0x402df0
  4091df:	00 
  4091e0:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4091e4:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  4091e9:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  4091ec:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  4091f0:	48 89 03             	mov    QWORD PTR [rbx],rax
  4091f3:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4091f7:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  4091fb:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  4091ff:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  409203:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409208:	48 85 c0             	test   rax,rax
  40920b:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409210:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  409217:	00 
  409218:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  40921d:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  409224:	00 
  409225:	0f 84 45 fd ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  40922b:	ba 03 00 00 00       	mov    edx,0x3
  409230:	48 89 e6             	mov    rsi,rsp
  409233:	48 89 e7             	mov    rdi,rsp
  409236:	ff d0                	call   rax
  409238:	e9 33 fd ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  40923d:	0f 1f 00             	nop    DWORD PTR [rax]
  409240:	48 c7 04 24 e0 24 40 	mov    QWORD PTR [rsp],0x4024e0
  409247:	00 
  409248:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40924c:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409251:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  409254:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409258:	48 89 03             	mov    QWORD PTR [rbx],rax
  40925b:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  40925f:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  409263:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  409267:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  40926b:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409270:	48 85 c0             	test   rax,rax
  409273:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409278:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  40927f:	00 
  409280:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  409285:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  40928c:	00 
  40928d:	0f 84 dd fc ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409293:	ba 03 00 00 00       	mov    edx,0x3
  409298:	48 89 e6             	mov    rsi,rsp
  40929b:	48 89 e7             	mov    rdi,rsp
  40929e:	ff d0                	call   rax
  4092a0:	e9 cb fc ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  4092a5:	0f 1f 00             	nop    DWORD PTR [rax]
  4092a8:	be eb 99 40 00       	mov    esi,0x4099eb
  4092ad:	48 89 ef             	mov    rdi,rbp
  4092b0:	e8 6b 87 ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  4092b5:	85 c0                	test   eax,eax
  4092b7:	0f 84 eb 00 00 00    	je     4093a8 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x5e8>
  4092bd:	be f4 99 40 00       	mov    esi,0x4099f4
  4092c2:	48 89 ef             	mov    rdi,rbp
  4092c5:	e8 56 87 ff ff       	call   401a20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
  4092ca:	85 c0                	test   eax,eax
  4092cc:	0f 85 87 fb ff ff    	jne    408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  4092d2:	48 c7 04 24 b0 24 40 	mov    QWORD PTR [rsp],0x4024b0
  4092d9:	00 
  4092da:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4092de:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  4092e3:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  4092e6:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  4092ea:	48 89 03             	mov    QWORD PTR [rbx],rax
  4092ed:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4092f1:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  4092f5:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  4092f9:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  4092fd:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409302:	48 85 c0             	test   rax,rax
  409305:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  40930a:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  409311:	00 
  409312:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  409317:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  40931e:	00 
  40931f:	0f 84 34 fb ff ff    	je     408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  409325:	ba 03 00 00 00       	mov    edx,0x3
  40932a:	48 89 e6             	mov    rsi,rsp
  40932d:	48 89 e7             	mov    rdi,rsp
  409330:	ff d0                	call   rax
  409332:	e9 22 fb ff ff       	jmp    408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  409337:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40933e:	00 00 
  409340:	48 c7 04 24 f0 24 40 	mov    QWORD PTR [rsp],0x4024f0
  409347:	00 
  409348:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40934c:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409351:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  409354:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409358:	48 89 03             	mov    QWORD PTR [rbx],rax
  40935b:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  40935f:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  409363:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  409367:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  40936b:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409370:	48 85 c0             	test   rax,rax
  409373:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409378:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  40937f:	00 
  409380:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  409385:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  40938c:	00 
  40938d:	0f 84 dd fb ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409393:	ba 03 00 00 00       	mov    edx,0x3
  409398:	48 89 e6             	mov    rsi,rsp
  40939b:	48 89 e7             	mov    rdi,rsp
  40939e:	ff d0                	call   rax
  4093a0:	e9 cb fb ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  4093a5:	0f 1f 00             	nop    DWORD PTR [rax]
  4093a8:	48 c7 04 24 a0 24 40 	mov    QWORD PTR [rsp],0x4024a0
  4093af:	00 
  4093b0:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4093b4:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  4093b9:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  4093bc:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  4093c0:	48 89 03             	mov    QWORD PTR [rbx],rax
  4093c3:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4093c7:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  4093cb:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  4093cf:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  4093d3:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  4093d8:	48 85 c0             	test   rax,rax
  4093db:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4093e0:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  4093e7:	00 
  4093e8:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4093ed:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  4093f4:	00 
  4093f5:	0f 84 5e fa ff ff    	je     408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  4093fb:	ba 03 00 00 00       	mov    edx,0x3
  409400:	48 89 e6             	mov    rsi,rsp
  409403:	48 89 e7             	mov    rdi,rsp
  409406:	ff d0                	call   rax
  409408:	e9 4c fa ff ff       	jmp    408e59 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x99>
  40940d:	0f 1f 00             	nop    DWORD PTR [rax]
  409410:	48 c7 04 24 40 25 40 	mov    QWORD PTR [rsp],0x402540
  409417:	00 
  409418:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40941c:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409421:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  409424:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409428:	48 89 03             	mov    QWORD PTR [rbx],rax
  40942b:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  40942f:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  409433:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  409437:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  40943b:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409440:	48 85 c0             	test   rax,rax
  409443:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409448:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  40944f:	00 
  409450:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  409455:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  40945c:	00 
  40945d:	0f 84 0d fb ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409463:	ba 03 00 00 00       	mov    edx,0x3
  409468:	48 89 e6             	mov    rsi,rsp
  40946b:	48 89 e7             	mov    rdi,rsp
  40946e:	ff d0                	call   rax
  409470:	e9 fb fa ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409475:	0f 1f 00             	nop    DWORD PTR [rax]
  409478:	48 c7 04 24 10 25 40 	mov    QWORD PTR [rsp],0x402510
  40947f:	00 
  409480:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  409484:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409489:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  40948c:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409490:	48 89 03             	mov    QWORD PTR [rbx],rax
  409493:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  409497:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  40949b:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  40949f:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  4094a3:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  4094a8:	48 85 c0             	test   rax,rax
  4094ab:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4094b0:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  4094b7:	00 
  4094b8:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4094bd:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  4094c4:	00 
  4094c5:	0f 84 a5 fa ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  4094cb:	ba 03 00 00 00       	mov    edx,0x3
  4094d0:	48 89 e6             	mov    rsi,rsp
  4094d3:	48 89 e7             	mov    rdi,rsp
  4094d6:	ff d0                	call   rax
  4094d8:	e9 93 fa ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  4094dd:	0f 1f 00             	nop    DWORD PTR [rax]
  4094e0:	48 c7 04 24 40 29 40 	mov    QWORD PTR [rsp],0x402940
  4094e7:	00 
  4094e8:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4094ec:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  4094f1:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  4094f4:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  4094f8:	48 89 03             	mov    QWORD PTR [rbx],rax
  4094fb:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4094ff:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  409503:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  409507:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  40950b:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409510:	48 85 c0             	test   rax,rax
  409513:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409518:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  40951f:	00 
  409520:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  409525:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  40952c:	00 
  40952d:	0f 84 3d fa ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409533:	ba 03 00 00 00       	mov    edx,0x3
  409538:	48 89 e6             	mov    rsi,rsp
  40953b:	48 89 e7             	mov    rdi,rsp
  40953e:	ff d0                	call   rax
  409540:	e9 2b fa ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409545:	48 c7 04 24 e0 2b 40 	mov    QWORD PTR [rsp],0x402be0
  40954c:	00 
  40954d:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  409551:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409556:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  409559:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  40955d:	48 89 03             	mov    QWORD PTR [rbx],rax
  409560:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  409564:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  409568:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  40956c:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  409570:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  409575:	48 85 c0             	test   rax,rax
  409578:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  40957d:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  409584:	00 
  409585:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  40958a:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  409591:	00 
  409592:	0f 84 d8 f9 ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409598:	ba 03 00 00 00       	mov    edx,0x3
  40959d:	48 89 e6             	mov    rsi,rsp
  4095a0:	48 89 e7             	mov    rdi,rsp
  4095a3:	ff d0                	call   rax
  4095a5:	e9 c6 f9 ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  4095aa:	48 c7 04 24 f0 2b 40 	mov    QWORD PTR [rsp],0x402bf0
  4095b1:	00 
  4095b2:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4095b6:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  4095bb:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  4095be:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  4095c2:	48 89 03             	mov    QWORD PTR [rbx],rax
  4095c5:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4095c9:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  4095cd:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  4095d1:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  4095d5:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  4095da:	48 85 c0             	test   rax,rax
  4095dd:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4095e2:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  4095e9:	00 
  4095ea:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4095ef:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  4095f6:	00 
  4095f7:	0f 84 73 f9 ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  4095fd:	ba 03 00 00 00       	mov    edx,0x3
  409602:	48 89 e6             	mov    rsi,rsp
  409605:	48 89 e7             	mov    rdi,rsp
  409608:	ff d0                	call   rax
  40960a:	e9 61 f9 ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  40960f:	48 c7 04 24 00 2c 40 	mov    QWORD PTR [rsp],0x402c00
  409616:	00 
  409617:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40961b:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  409620:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
  409623:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
  409627:	48 89 03             	mov    QWORD PTR [rbx],rax
  40962a:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  40962e:	48 89 53 08          	mov    QWORD PTR [rbx+0x8],rdx
  409632:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
  409636:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  40963a:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
  40963f:	48 85 c0             	test   rax,rax
  409642:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  409647:	48 c7 43 10 70 8b 40 	mov    QWORD PTR [rbx+0x10],0x408b70
  40964e:	00 
  40964f:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  409654:	48 c7 43 18 60 8b 40 	mov    QWORD PTR [rbx+0x18],0x408b60
  40965b:	00 
  40965c:	0f 84 0e f9 ff ff    	je     408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409662:	ba 03 00 00 00       	mov    edx,0x3
  409667:	48 89 e6             	mov    rsi,rsp
  40966a:	48 89 e7             	mov    rdi,rsp
  40966d:	ff d0                	call   rax
  40966f:	e9 fc f8 ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409674:	be 80 2c 40 00       	mov    esi,0x402c80
  409679:	48 89 df             	mov    rdi,rbx
  40967c:	e8 9f f6 ff ff       	call   408d20 <std::enable_if<std::function<int (int, int)>::_Callable<std::decay<int (&)(int, int)>::type, std::result_of<std::decay<int (&)(int, int)>::type (int, int)>::type>::value, std::function<int (int, int)>&>::type std::function<int (int, int)>::operator=<int (&)(int, int)>(int (&)(int, int))>
  409681:	e9 ea f8 ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409686:	be 50 2c 40 00       	mov    esi,0x402c50
  40968b:	48 89 df             	mov    rdi,rbx
  40968e:	e8 8d f6 ff ff       	call   408d20 <std::enable_if<std::function<int (int, int)>::_Callable<std::decay<int (&)(int, int)>::type, std::result_of<std::decay<int (&)(int, int)>::type (int, int)>::type>::value, std::function<int (int, int)>&>::type std::function<int (int, int)>::operator=<int (&)(int, int)>(int (&)(int, int))>
  409693:	e9 d8 f8 ff ff       	jmp    408f70 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x1b0>
  409698:	e8 23 83 ff ff       	call   4019c0 <__stack_chk_fail@plt>
  40969d:	48 89 c5             	mov    rbp,rax
  4096a0:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4096a4:	48 85 c0             	test   rax,rax
  4096a7:	74 0d                	je     4096b6 <ObtainResult::ObtainResult(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x8f6>
  4096a9:	ba 03 00 00 00       	mov    edx,0x3
  4096ae:	48 89 de             	mov    rsi,rbx
  4096b1:	48 89 df             	mov    rdi,rbx
  4096b4:	ff d0                	call   rax
  4096b6:	48 89 ef             	mov    rdi,rbp
  4096b9:	e8 f2 83 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  4096be:	66 90                	xchg   ax,ax

00000000004096c0 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::initializer_list<unsigned char>, std::allocator<unsigned char> const&)>:
  4096c0:	41 55                	push   r13
  4096c2:	41 54                	push   r12
  4096c4:	45 31 e4             	xor    r12d,r12d
  4096c7:	55                   	push   rbp
  4096c8:	53                   	push   rbx
  4096c9:	48 89 fb             	mov    rbx,rdi
  4096cc:	48 83 ec 08          	sub    rsp,0x8
  4096d0:	48 85 d2             	test   rdx,rdx
  4096d3:	48 c7 07 00 00 00 00 	mov    QWORD PTR [rdi],0x0
  4096da:	48 c7 47 08 00 00 00 	mov    QWORD PTR [rdi+0x8],0x0
  4096e1:	00 
  4096e2:	48 c7 47 10 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
  4096e9:	00 
  4096ea:	75 14                	jne    409700 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::initializer_list<unsigned char>, std::allocator<unsigned char> const&)+0x40>
  4096ec:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
  4096f0:	48 83 c4 08          	add    rsp,0x8
  4096f4:	5b                   	pop    rbx
  4096f5:	5d                   	pop    rbp
  4096f6:	41 5c                	pop    r12
  4096f8:	41 5d                	pop    r13
  4096fa:	c3                   	ret    
  4096fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  409700:	48 89 d7             	mov    rdi,rdx
  409703:	49 89 f5             	mov    r13,rsi
  409706:	48 89 d5             	mov    rbp,rdx
  409709:	e8 92 83 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  40970e:	4c 8d 24 28          	lea    r12,[rax+rbp*1]
  409712:	48 89 03             	mov    QWORD PTR [rbx],rax
  409715:	48 89 ea             	mov    rdx,rbp
  409718:	4c 89 ee             	mov    rsi,r13
  40971b:	48 89 c7             	mov    rdi,rax
  40971e:	4c 89 63 10          	mov    QWORD PTR [rbx+0x10],r12
  409722:	e8 c9 83 ff ff       	call   401af0 <memcpy@plt>
  409727:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
  40972b:	48 83 c4 08          	add    rsp,0x8
  40972f:	5b                   	pop    rbx
  409730:	5d                   	pop    rbp
  409731:	41 5c                	pop    r12
  409733:	41 5d                	pop    r13
  409735:	c3                   	ret    
  409736:	48 89 c5             	mov    rbp,rax
  409739:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
  40973c:	48 85 ff             	test   rdi,rdi
  40973f:	74 05                	je     409746 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::initializer_list<unsigned char>, std::allocator<unsigned char> const&)+0x86>
  409741:	e8 3a 81 ff ff       	call   401880 <operator delete(void*)@plt>
  409746:	48 89 ef             	mov    rdi,rbp
  409749:	e8 62 83 ff ff       	call   401ab0 <_Unwind_Resume@plt>
  40974e:	66 90                	xchg   ax,ax

0000000000409750 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)>:
  409750:	41 54                	push   r12
  409752:	55                   	push   rbp
  409753:	31 c9                	xor    ecx,ecx
  409755:	53                   	push   rbx
  409756:	48 8b 6e 08          	mov    rbp,QWORD PTR [rsi+0x8]
  40975a:	48 89 fb             	mov    rbx,rdi
  40975d:	48 2b 2e             	sub    rbp,QWORD PTR [rsi]
  409760:	49 89 f4             	mov    r12,rsi
  409763:	48 c7 07 00 00 00 00 	mov    QWORD PTR [rdi],0x0
  40976a:	48 c7 47 08 00 00 00 	mov    QWORD PTR [rdi+0x8],0x0
  409771:	00 
  409772:	48 c7 47 10 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
  409779:	00 
  40977a:	48 85 ed             	test   rbp,rbp
  40977d:	75 41                	jne    4097c0 <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)+0x70>
  40977f:	48 01 cd             	add    rbp,rcx
  409782:	48 89 0b             	mov    QWORD PTR [rbx],rcx
  409785:	48 89 4b 08          	mov    QWORD PTR [rbx+0x8],rcx
  409789:	48 89 6b 10          	mov    QWORD PTR [rbx+0x10],rbp
  40978d:	49 8b 34 24          	mov    rsi,QWORD PTR [r12]
  409791:	31 ed                	xor    ebp,ebp
  409793:	49 8b 44 24 08       	mov    rax,QWORD PTR [r12+0x8]
  409798:	48 29 f0             	sub    rax,rsi
  40979b:	74 11                	je     4097ae <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)+0x5e>
  40979d:	48 89 cf             	mov    rdi,rcx
  4097a0:	48 89 c2             	mov    rdx,rax
  4097a3:	48 89 c5             	mov    rbp,rax
  4097a6:	e8 c5 81 ff ff       	call   401970 <memmove@plt>
  4097ab:	48 89 c1             	mov    rcx,rax
  4097ae:	48 01 e9             	add    rcx,rbp
  4097b1:	48 89 4b 08          	mov    QWORD PTR [rbx+0x8],rcx
  4097b5:	5b                   	pop    rbx
  4097b6:	5d                   	pop    rbp
  4097b7:	41 5c                	pop    r12
  4097b9:	c3                   	ret    
  4097ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  4097c0:	48 89 ef             	mov    rdi,rbp
  4097c3:	e8 d8 82 ff ff       	call   401aa0 <operator new(unsigned long)@plt>
  4097c8:	48 89 c1             	mov    rcx,rax
  4097cb:	eb b2                	jmp    40977f <std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&)+0x2f>
  4097cd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000004097d0 <__libc_csu_init>:
  4097d0:	41 57                	push   r15
  4097d2:	41 56                	push   r14
  4097d4:	41 89 ff             	mov    r15d,edi
  4097d7:	41 55                	push   r13
  4097d9:	41 54                	push   r12
  4097db:	4c 8d 25 f6 35 20 00 	lea    r12,[rip+0x2035f6]        # 60cdd8 <__frame_dummy_init_array_entry>
  4097e2:	55                   	push   rbp
  4097e3:	48 8d 2d fe 35 20 00 	lea    rbp,[rip+0x2035fe]        # 60cde8 <__init_array_end>
  4097ea:	53                   	push   rbx
  4097eb:	49 89 f6             	mov    r14,rsi
  4097ee:	49 89 d5             	mov    r13,rdx
  4097f1:	4c 29 e5             	sub    rbp,r12
  4097f4:	48 83 ec 08          	sub    rsp,0x8
  4097f8:	48 c1 fd 03          	sar    rbp,0x3
  4097fc:	e8 f7 7f ff ff       	call   4017f8 <_init>
  409801:	48 85 ed             	test   rbp,rbp
  409804:	74 20                	je     409826 <__libc_csu_init+0x56>
  409806:	31 db                	xor    ebx,ebx
  409808:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40980f:	00 
  409810:	4c 89 ea             	mov    rdx,r13
  409813:	4c 89 f6             	mov    rsi,r14
  409816:	44 89 ff             	mov    edi,r15d
  409819:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
  40981d:	48 83 c3 01          	add    rbx,0x1
  409821:	48 39 eb             	cmp    rbx,rbp
  409824:	75 ea                	jne    409810 <__libc_csu_init+0x40>
  409826:	48 83 c4 08          	add    rsp,0x8
  40982a:	5b                   	pop    rbx
  40982b:	5d                   	pop    rbp
  40982c:	41 5c                	pop    r12
  40982e:	41 5d                	pop    r13
  409830:	41 5e                	pop    r14
  409832:	41 5f                	pop    r15
  409834:	c3                   	ret    
  409835:	90                   	nop
  409836:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40983d:	00 00 00 

0000000000409840 <__libc_csu_fini>:
  409840:	f3 c3                	repz ret 

Disassembly of section .fini:

0000000000409844 <_fini>:
  409844:	48 83 ec 08          	sub    rsp,0x8
  409848:	48 83 c4 08          	add    rsp,0x8
  40984c:	c3                   	ret    

Disassembly of section .rodata:

0000000000409860 <_IO_stdin_used>:
  409860:	01 00                	add    DWORD PTR [rax],eax
  409862:	02 00                	add    al,BYTE PTR [rax]
  409864:	00 00                	add    BYTE PTR [rax],al
  409866:	00 00                	add    BYTE PTR [rax],al
  409868:	62 61                	(bad)  {k7}
  40986a:	73 69                	jae    4098d5 <_IO_stdin_used+0x75>
  40986c:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
  40986f:	74 72                	je     4098e3 <_IO_stdin_used+0x83>
  409871:	69 6e 67 3a 3a 5f 4d 	imul   ebp,DWORD PTR [rsi+0x67],0x4d5f3a3a
  409878:	5f                   	pop    rdi
  409879:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
  40987c:	73 74                	jae    4098f2 <_IO_stdin_used+0x92>
  40987e:	72 75                	jb     4098f5 <_IO_stdin_used+0x95>
  409880:	63 74 20 6e          	movsxd esi,DWORD PTR [rax+riz*1+0x6e]
  409884:	75 6c                	jne    4098f2 <_IO_stdin_used+0x92>
  409886:	6c                   	ins    BYTE PTR es:[rdi],dx
  409887:	20 6e 6f             	and    BYTE PTR [rsi+0x6f],ch
  40988a:	74 20                	je     4098ac <_IO_stdin_used+0x4c>
  40988c:	76 61                	jbe    4098ef <_IO_stdin_used+0x8f>
  40988e:	6c                   	ins    BYTE PTR es:[rdi],dx
  40988f:	69 64 00 00 00 00 00 	imul   esp,DWORD PTR [rax+rax*1+0x0],0x0
  409896:	00 
  409897:	00 50 6c             	add    BYTE PTR [rax+0x6c],dl
  40989a:	61                   	(bad)  
  40989b:	69 6e 74 65 78 74 20 	imul   ebp,DWORD PTR [rsi+0x74],0x20747865
  4098a2:	6c                   	ins    BYTE PTR es:[rdi],dx
  4098a3:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  4098a5:	67 74 68             	addr32 je 409910 <_IO_stdin_used+0xb0>
  4098a8:	20 6d 75             	and    BYTE PTR [rbp+0x75],ch
  4098ab:	73 74                	jae    409921 <_IO_stdin_used+0xc1>
  4098ad:	20 62 65             	and    BYTE PTR [rdx+0x65],ah
  4098b0:	20 64 69 76          	and    BYTE PTR [rcx+rbp*2+0x76],ah
  4098b4:	69 73 69 62 6c 65 20 	imul   esi,DWORD PTR [rbx+0x69],0x20656c62
  4098bb:	62                   	(bad)  {k7}
  4098bc:	79 20                	jns    4098de <_IO_stdin_used+0x7e>
  4098be:	00 00                	add    BYTE PTR [rax],al
  4098c0:	48 69 2e 20 45 6e 74 	imul   rbp,QWORD PTR [rsi],0x746e4520
  4098c7:	65 72 20             	gs jb  4098ea <_IO_stdin_used+0x8a>
  4098ca:	31 20                	xor    DWORD PTR [rax],esp
  4098cc:	74 6f                	je     40993d <_IO_stdin_used+0xdd>
  4098ce:	20 63 6f             	and    BYTE PTR [rbx+0x6f],ah
  4098d1:	6d                   	ins    DWORD PTR es:[rdi],dx
  4098d2:	70 75                	jo     409949 <_IO_stdin_used+0xe9>
  4098d4:	74 65                	je     40993b <_IO_stdin_used+0xdb>
  4098d6:	20 73 75             	and    BYTE PTR [rbx+0x75],dh
  4098d9:	6d                   	ins    DWORD PTR es:[rdi],dx
  4098da:	20 61 6e             	and    BYTE PTR [rcx+0x6e],ah
  4098dd:	64 20 65 6e          	and    BYTE PTR fs:[rbp+0x6e],ah
  4098e1:	74 65                	je     409948 <_IO_stdin_used+0xe8>
  4098e3:	72 20                	jb     409905 <_IO_stdin_used+0xa5>
  4098e5:	32 20                	xor    ah,BYTE PTR [rax]
  4098e7:	74 6f                	je     409958 <_IO_stdin_used+0xf8>
  4098e9:	20 63 6f             	and    BYTE PTR [rbx+0x6f],ah
  4098ec:	6d                   	ins    DWORD PTR es:[rdi],dx
  4098ed:	70 75                	jo     409964 <_IO_stdin_used+0x104>
  4098ef:	74 65                	je     409956 <_IO_stdin_used+0xf6>
  4098f1:	20 74 68 65          	and    BYTE PTR [rax+rbp*2+0x65],dh
  4098f5:	20 68 69             	and    BYTE PTR [rax+0x69],ch
  4098f8:	64 64 65 6e          	fs fs outs dx,BYTE PTR gs:[rsi]
  4098fc:	20 66 75             	and    BYTE PTR [rsi+0x75],ah
  4098ff:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409900:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  409904:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409905:	00 00                	add    BYTE PTR [rax],al
  409907:	00 54 68 69          	add    BYTE PTR [rax+rbp*2+0x69],dl
  40990b:	73 20                	jae    40992d <_IO_stdin_used+0xcd>
  40990d:	72 65                	jb     409974 <_IO_stdin_used+0x114>
  40990f:	71 75                	jno    409986 <_IO_stdin_used+0x126>
  409911:	69 72 65 73 20 61 20 	imul   esi,DWORD PTR [rdx+0x65],0x20612073
  409918:	70 61                	jo     40997b <_IO_stdin_used+0x11b>
  40991a:	73 73                	jae    40998f <_IO_stdin_used+0x12f>
  40991c:	77 6f                	ja     40998d <_IO_stdin_used+0x12d>
  40991e:	72 64                	jb     409984 <_IO_stdin_used+0x124>
  409920:	2e 20 49 66          	and    BYTE PTR cs:[rcx+0x66],cl
  409924:	20 79 6f             	and    BYTE PTR [rcx+0x6f],bh
  409927:	75 20                	jne    409949 <_IO_stdin_used+0xe9>
  409929:	61                   	(bad)  
  40992a:	72 65                	jb     409991 <_IO_stdin_used+0x131>
  40992c:	20 61 20             	and    BYTE PTR [rcx+0x20],ah
  40992f:	73 75                	jae    4099a6 <_IO_stdin_used+0x146>
  409931:	70 65                	jo     409998 <_IO_stdin_used+0x138>
  409933:	72 75                	jb     4099aa <_IO_stdin_used+0x14a>
  409935:	73 65                	jae    40999c <_IO_stdin_used+0x13c>
  409937:	72 20                	jb     409959 <_IO_stdin_used+0xf9>
  409939:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  40993b:	74 65                	je     4099a2 <_IO_stdin_used+0x142>
  40993d:	72 20                	jb     40995f <_IO_stdin_used+0xff>
  40993f:	74 68                	je     4099a9 <_IO_stdin_used+0x149>
  409941:	65 20 70 61          	and    BYTE PTR gs:[rax+0x61],dh
  409945:	73 73                	jae    4099ba <_IO_stdin_used+0x15a>
  409947:	77 6f                	ja     4099b8 <_IO_stdin_used+0x158>
  409949:	72 64                	jb     4099af <_IO_stdin_used+0x14f>
  40994b:	20 70 72             	and    BYTE PTR [rax+0x72],dh
  40994e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  40994f:	76 69                	jbe    4099ba <_IO_stdin_used+0x15a>
  409951:	64 65 64 20 74 6f 20 	fs gs and BYTE PTR fs:[rdi+rbp*2+0x20],dh
  409958:	79 6f                	jns    4099c9 <_IO_stdin_used+0x169>
  40995a:	75 3a                	jne    409996 <_IO_stdin_used+0x136>
  40995c:	20 00                	and    BYTE PTR [rax],al
  40995e:	00 00                	add    BYTE PTR [rax],al
  409960:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  409962:	76 61                	jbe    4099c5 <_IO_stdin_used+0x165>
  409964:	6c                   	ins    BYTE PTR es:[rdi],dx
  409965:	69 64 20 43 68 6f 69 	imul   esp,DWORD PTR [rax+riz*1+0x43],0x63696f68
  40996c:	63 
  40996d:	65 21 20             	and    DWORD PTR gs:[rax],esp
  409970:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  409972:	74 65                	je     4099d9 <_IO_stdin_used+0x179>
  409974:	72 20                	jb     409996 <_IO_stdin_used+0x136>
  409976:	65 69 74 68 65 72 20 	imul   esi,DWORD PTR gs:[rax+rbp*2+0x65],0x20312072
  40997d:	31 20 
  40997f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  409980:	72 20                	jb     4099a2 <_IO_stdin_used+0x142>
  409982:	32 00                	xor    al,BYTE PTR [rax]
  409984:	00 00                	add    BYTE PTR [rax],al
  409986:	00 00                	add    BYTE PTR [rax],al
  409988:	25 30 32 78 20       	and    eax,0x20783230
  40998d:	00 55 6e             	add    BYTE PTR [rbp+0x6e],dl
  409990:	61                   	(bad)  
  409991:	75 74                	jne    409a07 <_IO_stdin_used+0x1a7>
  409993:	68 6f 72 69 7a       	push   0x7a69726f
  409998:	65 64 20 55 73       	gs and BYTE PTR fs:[rbp+0x73],dl
  40999d:	65 72 00             	gs jb  4099a0 <_IO_stdin_used+0x140>
  4099a0:	7b 00                	jnp    4099a2 <_IO_stdin_used+0x142>
  4099a2:	7d 00                	jge    4099a4 <_IO_stdin_used+0x144>
  4099a4:	30 78 00             	xor    BYTE PTR [rax+0x0],bh
  4099a7:	2c 00                	sub    al,0x0
  4099a9:	76 65                	jbe    409a10 <_IO_stdin_used+0x1b0>
  4099ab:	63 74 6f 72          	movsxd esi,DWORD PTR [rdi+rbp*2+0x72]
  4099af:	3a 3a                	cmp    bh,BYTE PTR [rdx]
  4099b1:	5f                   	pop    rdi
  4099b2:	4d 5f                	rex.WRB pop r15
  4099b4:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  4099b6:	70 6c                	jo     409a24 <_IO_stdin_used+0x1c4>
  4099b8:	61                   	(bad)  
  4099b9:	63 65 5f             	movsxd esp,DWORD PTR [rbp+0x5f]
  4099bc:	62 61                	(bad)  {k7}
  4099be:	63 6b 5f             	movsxd ebp,DWORD PTR [rbx+0x5f]
  4099c1:	61                   	(bad)  
  4099c2:	75 78                	jne    409a3c <_IO_stdin_used+0x1dc>
  4099c4:	00 25 75 00 61 76    	add    BYTE PTR [rip+0x76610075],ah        # 76a19a3f <_end+0x7640c29f>
  4099ca:	65 72 61             	gs jb  409a2e <_IO_stdin_used+0x1ce>
  4099cd:	67 65 00 73 75       	add    BYTE PTR gs:[ebx+0x75],dh
  4099d2:	62                   	(bad)  {k7}
  4099d3:	74 72                	je     409a47 <_IO_stdin_used+0x1e7>
  4099d5:	61                   	(bad)  
  4099d6:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  4099da:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  4099db:	00 6d 75             	add    BYTE PTR [rbp+0x75],ch
  4099de:	6c                   	ins    BYTE PTR es:[rdi],dx
  4099df:	74 69                	je     409a4a <_IO_stdin_used+0x1ea>
  4099e1:	70 6c                	jo     409a4f <_IO_stdin_used+0x1ef>
  4099e3:	69 63 61 74 69 6f 6e 	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
  4099ea:	00 64 69 76          	add    BYTE PTR [rcx+rbp*2+0x76],ah
  4099ee:	69 73 69 6f 6e 00 6d 	imul   esi,DWORD PTR [rbx+0x69],0x6d006e6f
  4099f5:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  4099f6:	64 75 6c             	fs jne 409a65 <_IO_stdin_used+0x205>
  4099f9:	75 73                	jne    409a6e <_IO_stdin_used+0x20e>
  4099fb:	00 62 69             	add    BYTE PTR [rdx+0x69],ah
  4099fe:	74 77                	je     409a77 <_IO_stdin_used+0x217>
  409a00:	69 73 65 78 6f 72 00 	imul   esi,DWORD PTR [rbx+0x65],0x726f78
  409a07:	62                   	(bad)  {k7}
  409a08:	69 74 77 69 73 65 6f 	imul   esi,DWORD PTR [rdi+rsi*2+0x69],0x726f6573
  409a0f:	72 
  409a10:	00 62 69             	add    BYTE PTR [rdx+0x69],ah
  409a13:	74 77                	je     409a8c <_IO_stdin_used+0x22c>
  409a15:	69 73 65 61 6e 64 00 	imul   esi,DWORD PTR [rbx+0x65],0x646e61
  409a1c:	65 78 70             	gs js  409a8f <_IO_stdin_used+0x22f>
  409a1f:	00 67 63             	add    BYTE PTR [rdi+0x63],ah
  409a22:	64 00 6c 63 6d       	add    BYTE PTR fs:[rbx+riz*2+0x6d],ch
  409a27:	00 6e 63             	add    BYTE PTR [rsi+0x63],ch
  409a2a:	72 00                	jb     409a2c <_IO_stdin_used+0x1cc>
  409a2c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409a2d:	70 72                	jo     409aa1 <main::str1+0x1>
  409a2f:	00 6d 61             	add    BYTE PTR [rbp+0x61],ch
  409a32:	78 00                	js     409a34 <_IO_stdin_used+0x1d4>
  409a34:	6d                   	ins    DWORD PTR es:[rdi],dx
  409a35:	69 6e 00 66 69 62 73 	imul   ebp,DWORD PTR [rsi+0x0],0x73626966
  409a3c:	75 6d                	jne    409aab <main::str1+0xb>
  409a3e:	00 6c 61 72          	add    BYTE PTR [rcx+riz*2+0x72],ch
  409a42:	67 65 73 74          	addr32 gs jae 409aba <main::str1+0x1a>
  409a46:	70 72                	jo     409aba <main::str1+0x1a>
  409a48:	69 6d 65 00 73 75 6d 	imul   ebp,DWORD PTR [rbp+0x65],0x6d757300
  409a4f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  409a50:	66 73 75             	data16 jae 409ac8 <._102+0x8>
  409a53:	6d                   	ins    DWORD PTR es:[rdi],dx
  409a54:	73 00                	jae    409a56 <_IO_stdin_used+0x1f6>
  409a56:	61                   	(bad)  
  409a57:	62 63 64 31 32       	(bad)  {k1}
  409a5c:	33 33                	xor    esi,DWORD PTR [rbx]
  409a5e:	00 45 6e             	add    BYTE PTR [rbp+0x6e],al
  409a61:	74 65                	je     409ac8 <._102+0x8>
  409a63:	72 20                	jb     409a85 <_IO_stdin_used+0x225>
  409a65:	74 68                	je     409acf <._102+0xf>
  409a67:	65 20 66 69          	and    BYTE PTR gs:[rsi+0x69],ah
  409a6b:	72 73                	jb     409ae0 <._100>
  409a6d:	74 20                	je     409a8f <_IO_stdin_used+0x22f>
  409a6f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409a70:	75 6d                	jne    409adf <._101+0xf>
  409a72:	62                   	(bad)  {k1}
  409a73:	65 72 00             	gs jb  409a76 <_IO_stdin_used+0x216>
  409a76:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  409a78:	74 65                	je     409adf <._101+0xf>
  409a7a:	72 20                	jb     409a9c <_IO_stdin_used+0x23c>
  409a7c:	74 68                	je     409ae6 <._100+0x6>
  409a7e:	65 20 73 65          	and    BYTE PTR gs:[rbx+0x65],dh
  409a82:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
  409a85:	64 20 6e 75          	and    BYTE PTR fs:[rsi+0x75],ch
  409a89:	6d                   	ins    DWORD PTR es:[rdi],dx
  409a8a:	62                   	(bad)  {k1}
  409a8b:	65 72 00             	gs jb  409a8e <_IO_stdin_used+0x22e>
  409a8e:	77 72                	ja     409b02 <._99+0x2>
  409a90:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  409a91:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409a92:	67 00 52 65          	add    BYTE PTR [edx+0x65],dl
  409a96:	73 75                	jae    409b0d <._99+0xd>
  409a98:	6c                   	ins    BYTE PTR es:[rdi],dx
  409a99:	74 20                	je     409abb <main::str1+0x1b>
  409a9b:	69 73 20 00 00 54 68 	imul   esi,DWORD PTR [rbx+0x20],0x68540000

0000000000409aa0 <main::str1>:
  409aa0:	54                   	push   rsp
  409aa1:	68 65 20 66 75       	push   0x75662065
  409aa6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409aa7:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  409aab:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409aac:	20 69 73             	and    BYTE PTR [rcx+0x73],ch
  409aaf:	20 6c 63 6d          	and    BYTE PTR [rbx+riz*2+0x6d],ch
	...

0000000000409ac0 <._102>:
  409ac0:	0f a1                	pop    fs
  409ac2:	e1 81                	loope  409a45 <_IO_stdin_used+0x1e5>
  409ac4:	3c 2e                	cmp    al,0x2e
  409ac6:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  409ac7:	59                   	pop    rcx
  409ac8:	11 34 fc             	adc    DWORD PTR [rsp+rdi*8],esi
  409acb:	43                   	rex.XB
  409acc:	43 1f                	rex.XB (bad) 
  409ace:	03 7c b7 19          	add    edi,DWORD PTR [rdi+rsi*4+0x19]

0000000000409ad0 <._101>:
  409ad0:	b7 19                	mov    bh,0x19
  409ad2:	1d e1 43 9a 07       	sbb    eax,0x79a43e1
  409ad7:	d1 be 18 e7 0f 2a    	sar    DWORD PTR [rsi+0x2a0fe718],1
  409add:	7c 45                	jl     409b24 <CMDS+0x4>
  409adf:	89 53 42             	mov    DWORD PTR [rbx+0x42],edx

0000000000409ae0 <._100>:
  409ae0:	53                   	push   rbx
  409ae1:	42 b9 32 82 ef e9    	rex.X mov ecx,0xe9ef8232
  409ae7:	fe 8a c3 eb 71 43    	dec    BYTE PTR [rdx+0x4371ebc3]
  409aed:	ce                   	(bad)  
  409aee:	c6                   	(bad)  
  409aef:	31 c0                	xor    eax,eax
  409af1:	da 74 ac 09          	fidiv  DWORD PTR [rsp+rbp*4+0x9]
  409af5:	70 9f                	jo     409a96 <_IO_stdin_used+0x236>
  409af7:	7c 5e                	jl     409b57 <GF_MUL_TABLE+0x17>
  409af9:	df ab 0d e5 3c 94    	fild   QWORD PTR [rbx-0x6bc31af3]
  409aff:	30 2e                	xor    BYTE PTR [rsi],ch

0000000000409b00 <._99>:
  409b00:	2e bf b0 72 49 4c    	cs mov edi,0x4c4972b0
  409b06:	53                   	push   rbx
  409b07:	37                   	(bad)  
  409b08:	6a fa                	push   0xfffffffffffffffa
  409b0a:	cc                   	int3   
  409b0b:	6b 5b ce 46          	imul   ebx,DWORD PTR [rbx-0x32],0x46
  409b0f:	07                   	(bad)  
  409b10:	86 f5                	xchg   ch,dh
  409b12:	d6                   	(bad)  
  409b13:	1d eb cd f2 e3       	sbb    eax,0xe3f2cdeb
  409b18:	53                   	push   rbx
  409b19:	27                   	(bad)  
  409b1a:	f4                   	hlt    
  409b1b:	39 5a e6             	cmp    DWORD PTR [rdx-0x1a],ebx
  409b1e:	dc 18                	fcomp  QWORD PTR [rax]

0000000000409b20 <CMDS>:
  409b20:	02 03                	add    al,BYTE PTR [rbx]
  409b22:	01 01                	add    DWORD PTR [rcx],eax
  409b24:	01 02                	add    DWORD PTR [rdx],eax
  409b26:	03 01                	add    eax,DWORD PTR [rcx]
  409b28:	01 01                	add    DWORD PTR [rcx],eax
  409b2a:	02 03                	add    al,BYTE PTR [rbx]
  409b2c:	03 01                	add    eax,DWORD PTR [rcx]
  409b2e:	01 02                	add    DWORD PTR [rdx],eax
	...

0000000000409b40 <GF_MUL_TABLE>:
	...
  409d40:	00 02                	add    BYTE PTR [rdx],al
  409d42:	04 06                	add    al,0x6
  409d44:	08 0a                	or     BYTE PTR [rdx],cl
  409d46:	0c 0e                	or     al,0xe
  409d48:	10 12                	adc    BYTE PTR [rdx],dl
  409d4a:	14 16                	adc    al,0x16
  409d4c:	18 1a                	sbb    BYTE PTR [rdx],bl
  409d4e:	1c 1e                	sbb    al,0x1e
  409d50:	20 22                	and    BYTE PTR [rdx],ah
  409d52:	24 26                	and    al,0x26
  409d54:	28 2a                	sub    BYTE PTR [rdx],ch
  409d56:	2c 2e                	sub    al,0x2e
  409d58:	30 32                	xor    BYTE PTR [rdx],dh
  409d5a:	34 36                	xor    al,0x36
  409d5c:	38 3a                	cmp    BYTE PTR [rdx],bh
  409d5e:	3c 3e                	cmp    al,0x3e
  409d60:	40                   	rex
  409d61:	42                   	rex.X
  409d62:	44                   	rex.R
  409d63:	46                   	rex.RX
  409d64:	48                   	rex.W
  409d65:	4a                   	rex.WX
  409d66:	4c                   	rex.WR
  409d67:	4e 50                	rex.WRX push rax
  409d69:	52                   	push   rdx
  409d6a:	54                   	push   rsp
  409d6b:	56                   	push   rsi
  409d6c:	58                   	pop    rax
  409d6d:	5a                   	pop    rdx
  409d6e:	5c                   	pop    rsp
  409d6f:	5e                   	pop    rsi
  409d70:	60                   	(bad)  
  409d71:	62                   	(bad)  {k1}
  409d72:	64 66 68 6a 6c       	fs pushw 0x6c6a
  409d77:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  409d78:	70 72                	jo     409dec <GF_MUL_TABLE+0x2ac>
  409d7a:	74 76                	je     409df2 <GF_MUL_TABLE+0x2b2>
  409d7c:	78 7a                	js     409df8 <GF_MUL_TABLE+0x2b8>
  409d7e:	7c 7e                	jl     409dfe <GF_MUL_TABLE+0x2be>
  409d80:	80 82 84 86 88 8a 8c 	add    BYTE PTR [rdx-0x7577797c],0x8c
  409d87:	8e 90 92 94 96 98    	mov    ss,WORD PTR [rax-0x67696b6e]
  409d8d:	9a                   	(bad)  
  409d8e:	9c                   	pushf  
  409d8f:	9e                   	sahf   
  409d90:	a0 a2 a4 a6 a8 aa ac 	movabs al,ds:0xb0aeacaaa8a6a4a2
  409d97:	ae b0 
  409d99:	b2 b4                	mov    dl,0xb4
  409d9b:	b6 b8                	mov    dh,0xb8
  409d9d:	ba bc be c0 c2       	mov    edx,0xc2c0bebc
  409da2:	c4                   	(bad)  
  409da3:	c6                   	(bad)  
  409da4:	c8 ca cc ce          	enter  0xccca,0xce
  409da8:	d0 d2                	rcl    dl,1
  409daa:	d4                   	(bad)  
  409dab:	d6                   	(bad)  
  409dac:	d8 da                	fcomp  st(2)
  409dae:	dc de                	(bad)  
  409db0:	e0 e2                	loopne 409d94 <GF_MUL_TABLE+0x254>
  409db2:	e4 e6                	in     al,0xe6
  409db4:	e8 ea ec ee f0       	call   fffffffff12f8aa3 <_end+0xfffffffff0ceb303>
  409db9:	f2 f4                	repnz hlt 
  409dbb:	f6 f8                	idiv   al
  409dbd:	fa                   	cli    
  409dbe:	fc                   	cld    
  409dbf:	fe                   	(bad)  
  409dc0:	1b 19                	sbb    ebx,DWORD PTR [rcx]
  409dc2:	1f                   	(bad)  
  409dc3:	1d 13 11 17 15       	sbb    eax,0x15171113
  409dc8:	0b 09                	or     ecx,DWORD PTR [rcx]
  409dca:	0f 0d 03             	prefetch BYTE PTR [rbx]
  409dcd:	01 07                	add    DWORD PTR [rdi],eax
  409dcf:	05 3b 39 3f 3d       	add    eax,0x3d3f393b
  409dd4:	33 31                	xor    esi,DWORD PTR [rcx]
  409dd6:	37                   	(bad)  
  409dd7:	35 2b 29 2f 2d       	xor    eax,0x2d2f292b
  409ddc:	23 21                	and    esp,DWORD PTR [rcx]
  409dde:	27                   	(bad)  
  409ddf:	25 5b 59 5f 5d       	and    eax,0x5d5f595b
  409de4:	53                   	push   rbx
  409de5:	51                   	push   rcx
  409de6:	57                   	push   rdi
  409de7:	55                   	push   rbp
  409de8:	4b                   	rex.WXB
  409de9:	49                   	rex.WB
  409dea:	4f                   	rex.WRXB
  409deb:	4d                   	rex.WRB
  409dec:	43                   	rex.XB
  409ded:	41                   	rex.B
  409dee:	47                   	rex.RXB
  409def:	45 7b 79             	rex.RB jnp 409e6b <GF_MUL_TABLE+0x32b>
  409df2:	7f 7d                	jg     409e71 <GF_MUL_TABLE+0x331>
  409df4:	73 71                	jae    409e67 <GF_MUL_TABLE+0x327>
  409df6:	77 75                	ja     409e6d <GF_MUL_TABLE+0x32d>
  409df8:	6b 69 6f 6d          	imul   ebp,DWORD PTR [rcx+0x6f],0x6d
  409dfc:	63 61 67             	movsxd esp,DWORD PTR [rcx+0x67]
  409dff:	65 9b                	gs fwait
  409e01:	99                   	cdq    
  409e02:	9f                   	lahf   
  409e03:	9d                   	popf   
  409e04:	93                   	xchg   ebx,eax
  409e05:	91                   	xchg   ecx,eax
  409e06:	97                   	xchg   edi,eax
  409e07:	95                   	xchg   ebp,eax
  409e08:	8b 89 8f 8d 83 81    	mov    ecx,DWORD PTR [rcx-0x7e7c7271]
  409e0e:	87 85 bb b9 bf bd    	xchg   DWORD PTR [rbp-0x42404645],eax
  409e14:	b3 b1                	mov    bl,0xb1
  409e16:	b7 b5                	mov    bh,0xb5
  409e18:	ab                   	stos   DWORD PTR es:[rdi],eax
  409e19:	a9 af ad a3 a1       	test   eax,0xa1a3adaf
  409e1e:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  409e1f:	a5                   	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  409e20:	db d9                	fcmovnu st,st(1)
  409e22:	df dd                	(bad)  
  409e24:	d3 d1                	rcl    ecx,cl
  409e26:	d7                   	xlat   BYTE PTR ds:[rbx]
  409e27:	d5                   	(bad)  
  409e28:	cb                   	retf   
  409e29:	c9                   	leave  
  409e2a:	cf                   	iret   
  409e2b:	cd c3                	int    0xc3
  409e2d:	c1 c7 c5             	rol    edi,0xc5
  409e30:	fb                   	sti    
  409e31:	f9                   	stc    
  409e32:	ff                   	(bad)  
  409e33:	fd                   	std    
  409e34:	f3 f1                	repz icebp 
  409e36:	f7 f5                	div    ebp
  409e38:	eb e9                	jmp    409e23 <GF_MUL_TABLE+0x2e3>
  409e3a:	ef                   	out    dx,eax
  409e3b:	ed                   	in     eax,dx
  409e3c:	e3 e1                	jrcxz  409e1f <GF_MUL_TABLE+0x2df>
  409e3e:	e7 e5                	out    0xe5,eax
  409e40:	00 03                	add    BYTE PTR [rbx],al
  409e42:	06                   	(bad)  
  409e43:	05 0c 0f 0a 09       	add    eax,0x90a0f0c
  409e48:	18 1b                	sbb    BYTE PTR [rbx],bl
  409e4a:	1e                   	(bad)  
  409e4b:	1d 14 17 12 11       	sbb    eax,0x11121714
  409e50:	30 33                	xor    BYTE PTR [rbx],dh
  409e52:	36 35 3c 3f 3a 39    	ss xor eax,0x393a3f3c
  409e58:	28 2b                	sub    BYTE PTR [rbx],ch
  409e5a:	2e 2d 24 27 22 21    	cs sub eax,0x21222724
  409e60:	60                   	(bad)  
  409e61:	63 66 65             	movsxd esp,DWORD PTR [rsi+0x65]
  409e64:	6c                   	ins    BYTE PTR es:[rdi],dx
  409e65:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  409e66:	6a 69                	push   0x69
  409e68:	78 7b                	js     409ee5 <GF_MUL_TABLE+0x3a5>
  409e6a:	7e 7d                	jle    409ee9 <GF_MUL_TABLE+0x3a9>
  409e6c:	74 77                	je     409ee5 <GF_MUL_TABLE+0x3a5>
  409e6e:	72 71                	jb     409ee1 <GF_MUL_TABLE+0x3a1>
  409e70:	50                   	push   rax
  409e71:	53                   	push   rbx
  409e72:	56                   	push   rsi
  409e73:	55                   	push   rbp
  409e74:	5c                   	pop    rsp
  409e75:	5f                   	pop    rdi
  409e76:	5a                   	pop    rdx
  409e77:	59                   	pop    rcx
  409e78:	48                   	rex.W
  409e79:	4b                   	rex.WXB
  409e7a:	4e                   	rex.WRX
  409e7b:	4d                   	rex.WRB
  409e7c:	44                   	rex.R
  409e7d:	47                   	rex.RXB
  409e7e:	42                   	rex.X
  409e7f:	41 c0 c3 c6          	rol    r11b,0xc6
  409e83:	c5 cc cf             	(bad)  
  409e86:	ca c9 d8             	retf   0xd8c9
  409e89:	db de                	fcmovnu st,st(6)
  409e8b:	dd d4                	fst    st(4)
  409e8d:	d7                   	xlat   BYTE PTR ds:[rbx]
  409e8e:	d2 d1                	rcl    cl,cl
  409e90:	f0 f3 f6 f5          	lock repz div ch
  409e94:	fc                   	cld    
  409e95:	ff                   	(bad)  
  409e96:	fa                   	cli    
  409e97:	f9                   	stc    
  409e98:	e8 eb ee ed e4       	call   ffffffffe52e8d88 <_end+0xffffffffe4cdb5e8>
  409e9d:	e7 e2                	out    0xe2,eax
  409e9f:	e1 a0                	loope  409e41 <GF_MUL_TABLE+0x301>
  409ea1:	a3 a6 a5 ac af aa a9 	movabs ds:0xbbb8a9aaafaca5a6,eax
  409ea8:	b8 bb 
  409eaa:	be bd b4 b7 b2       	mov    esi,0xb2b7b4bd
  409eaf:	b1 90                	mov    cl,0x90
  409eb1:	93                   	xchg   ebx,eax
  409eb2:	96                   	xchg   esi,eax
  409eb3:	95                   	xchg   ebp,eax
  409eb4:	9c                   	pushf  
  409eb5:	9f                   	lahf   
  409eb6:	9a                   	(bad)  
  409eb7:	99                   	cdq    
  409eb8:	88 8b 8e 8d 84 87    	mov    BYTE PTR [rbx-0x787b7272],cl
  409ebe:	82                   	(bad)  
  409ebf:	81 9b 98 9d 9e 97 94 	sbb    DWORD PTR [rbx-0x68616268],0x83929194
  409ec6:	91 92 83 
  409ec9:	80 85 86 8f 8c 89 8a 	add    BYTE PTR [rbp-0x7673707a],0x8a
  409ed0:	ab                   	stos   DWORD PTR es:[rdi],eax
  409ed1:	a8 ad                	test   al,0xad
  409ed3:	ae                   	scas   al,BYTE PTR es:[rdi]
  409ed4:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  409ed5:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  409ed6:	a1 a2 b3 b0 b5 b6 bf 	movabs eax,ds:0xb9bcbfb6b5b0b3a2
  409edd:	bc b9 
  409edf:	ba fb f8 fd fe       	mov    edx,0xfefdf8fb
  409ee4:	f7 f4                	div    esp
  409ee6:	f1                   	icebp  
  409ee7:	f2 e3 e0             	repnz jrcxz 409eca <GF_MUL_TABLE+0x38a>
  409eea:	e5 e6                	in     eax,0xe6
  409eec:	ef                   	out    dx,eax
  409eed:	ec                   	in     al,dx
  409eee:	e9 ea cb c8 cd       	jmp    ffffffffce096add <_end+0xffffffffcda8933d>
  409ef3:	ce                   	(bad)  
  409ef4:	c7 c4 c1 c2 d3 d0    	mov    esp,0xd0d3c2c1
  409efa:	d5                   	(bad)  
  409efb:	d6                   	(bad)  
  409efc:	df dc                	(bad)  
  409efe:	d9 da                	(bad)  
  409f00:	5b                   	pop    rbx
  409f01:	58                   	pop    rax
  409f02:	5d                   	pop    rbp
  409f03:	5e                   	pop    rsi
  409f04:	57                   	push   rdi
  409f05:	54                   	push   rsp
  409f06:	51                   	push   rcx
  409f07:	52                   	push   rdx
  409f08:	43                   	rex.XB
  409f09:	40                   	rex
  409f0a:	45                   	rex.RB
  409f0b:	46                   	rex.RX
  409f0c:	4f                   	rex.WRXB
  409f0d:	4c                   	rex.WR
  409f0e:	49                   	rex.WB
  409f0f:	4a 6b 68 6d 6e       	rex.WX imul rbp,QWORD PTR [rax+0x6d],0x6e
  409f14:	67 64 61             	addr32 fs (bad) 
  409f17:	62 73                	(bad)  {k1}
  409f19:	70 75                	jo     409f90 <GF_MUL_TABLE+0x450>
  409f1b:	76 7f                	jbe    409f9c <GF_MUL_TABLE+0x45c>
  409f1d:	7c 79                	jl     409f98 <GF_MUL_TABLE+0x458>
  409f1f:	7a 3b                	jp     409f5c <GF_MUL_TABLE+0x41c>
  409f21:	38 3d 3e 37 34 31    	cmp    BYTE PTR [rip+0x3134373e],bh        # 3174d665 <_end+0x3113fec5>
  409f27:	32 23                	xor    ah,BYTE PTR [rbx]
  409f29:	20 25 26 2f 2c 29    	and    BYTE PTR [rip+0x292c2f26],ah        # 296cce55 <_end+0x290bf6b5>
  409f2f:	2a 0b                	sub    cl,BYTE PTR [rbx]
  409f31:	08 0d 0e 07 04 01    	or     BYTE PTR [rip+0x104070e],cl        # 144a645 <_end+0xe3cea5>
  409f37:	02 13                	add    dl,BYTE PTR [rbx]
  409f39:	10 15 16 1f 1c 19    	adc    BYTE PTR [rip+0x191c1f16],dl        # 195cbe55 <_end+0x18fbe6b5>
  409f3f:	1a 00                	sbb    al,BYTE PTR [rax]
	...
  40a441:	09 12                	or     DWORD PTR [rdx],edx
  40a443:	1b 24 2d 36 3f 48 41 	sbb    esp,DWORD PTR [rbp*1+0x41483f36]
  40a44a:	5a                   	pop    rdx
  40a44b:	53                   	push   rbx
  40a44c:	6c                   	ins    BYTE PTR es:[rdi],dx
  40a44d:	65 7e 77             	gs jle 40a4c7 <GF_MUL_TABLE+0x987>
  40a450:	90                   	nop
  40a451:	99                   	cdq    
  40a452:	82                   	(bad)  
  40a453:	8b b4 bd a6 af d8 d1 	mov    esi,DWORD PTR [rbp+rdi*4-0x2e27505a]
  40a45a:	ca c3 fc             	retf   0xfcc3
  40a45d:	f5                   	cmc    
  40a45e:	ee                   	out    dx,al
  40a45f:	e7 3b                	out    0x3b,eax
  40a461:	32 29                	xor    ch,BYTE PTR [rcx]
  40a463:	20 1f                	and    BYTE PTR [rdi],bl
  40a465:	16                   	(bad)  
  40a466:	0d 04 73 7a 61       	or     eax,0x617a7304
  40a46b:	68 57 5e 45 4c       	push   0x4c455e57
  40a470:	ab                   	stos   DWORD PTR es:[rdi],eax
  40a471:	a2 b9 b0 8f 86 9d 94 	movabs ds:0xeae3949d868fb0b9,al
  40a478:	e3 ea 
  40a47a:	f1                   	icebp  
  40a47b:	f8                   	clc    
  40a47c:	c7                   	(bad)  
  40a47d:	ce                   	(bad)  
  40a47e:	d5                   	(bad)  
  40a47f:	dc 76 7f             	fdiv   QWORD PTR [rsi+0x7f]
  40a482:	64 6d                	fs ins DWORD PTR es:[rdi],dx
  40a484:	52                   	push   rdx
  40a485:	5b                   	pop    rbx
  40a486:	40                   	rex
  40a487:	49                   	rex.WB
  40a488:	3e 37                	ds (bad) 
  40a48a:	2c 25                	sub    al,0x25
  40a48c:	1a 13                	sbb    dl,BYTE PTR [rbx]
  40a48e:	08 01                	or     BYTE PTR [rcx],al
  40a490:	e6 ef                	out    0xef,al
  40a492:	f4                   	hlt    
  40a493:	fd                   	std    
  40a494:	c2 cb d0             	ret    0xd0cb
  40a497:	d9 ae a7 bc b5 8a    	fldcw  WORD PTR [rsi-0x754a4359]
  40a49d:	83 98 91 4d 44 5f 56 	sbb    DWORD PTR [rax+0x5f444d91],0x56
  40a4a4:	69 60 7b 72 05 0c 17 	imul   esp,DWORD PTR [rax+0x7b],0x170c0572
  40a4ab:	1e                   	(bad)  
  40a4ac:	21 28                	and    DWORD PTR [rax],ebp
  40a4ae:	33 3a                	xor    edi,DWORD PTR [rdx]
  40a4b0:	dd d4                	fst    st(4)
  40a4b2:	cf                   	iret   
  40a4b3:	c6                   	(bad)  
  40a4b4:	f9                   	stc    
  40a4b5:	f0 eb e2             	lock jmp 40a49a <GF_MUL_TABLE+0x95a>
  40a4b8:	95                   	xchg   ebp,eax
  40a4b9:	9c                   	pushf  
  40a4ba:	87 8e b1 b8 a3 aa    	xchg   DWORD PTR [rsi-0x555c474f],ecx
  40a4c0:	ec                   	in     al,dx
  40a4c1:	e5 fe                	in     eax,0xfe
  40a4c3:	f7                   	(bad)  
  40a4c4:	c8 c1 da d3          	enter  0xdac1,0xd3
  40a4c8:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40a4c9:	ad                   	lods   eax,DWORD PTR ds:[rsi]
  40a4ca:	b6 bf                	mov    dh,0xbf
  40a4cc:	80 89 92 9b 7c 75 6e 	or     BYTE PTR [rcx+0x757c9b92],0x6e
  40a4d3:	67 58                	addr32 pop rax
  40a4d5:	51                   	push   rcx
  40a4d6:	4a                   	rex.WX
  40a4d7:	43 34 3d             	rex.XB xor al,0x3d
  40a4da:	26 2f                	es (bad) 
  40a4dc:	10 19                	adc    BYTE PTR [rcx],bl
  40a4de:	02 0b                	add    cl,BYTE PTR [rbx]
  40a4e0:	d7                   	xlat   BYTE PTR ds:[rbx]
  40a4e1:	de c5                	faddp  st(5),st
  40a4e3:	cc                   	int3   
  40a4e4:	f3 fa                	repz cli 
  40a4e6:	e1 e8                	loope  40a4d0 <GF_MUL_TABLE+0x990>
  40a4e8:	9f                   	lahf   
  40a4e9:	96                   	xchg   esi,eax
  40a4ea:	8d 84 bb b2 a9 a0 47 	lea    eax,[rbx+rdi*4+0x47a0a9b2]
  40a4f1:	4e 55                	rex.WRX push rbp
  40a4f3:	5c                   	pop    rsp
  40a4f4:	63 6a 71             	movsxd ebp,DWORD PTR [rdx+0x71]
  40a4f7:	78 0f                	js     40a508 <GF_MUL_TABLE+0x9c8>
  40a4f9:	06                   	(bad)  
  40a4fa:	1d 14 2b 22 39       	sbb    eax,0x39222b14
  40a4ff:	30 9a 93 88 81 be    	xor    BYTE PTR [rdx-0x417e776d],bl
  40a505:	b7 ac                	mov    bh,0xac
  40a507:	a5                   	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  40a508:	d2 db                	rcr    bl,cl
  40a50a:	c0 c9 f6             	ror    cl,0xf6
  40a50d:	ff e4                	jmp    rsp
  40a50f:	ed                   	in     eax,dx
  40a510:	0a 03                	or     al,BYTE PTR [rbx]
  40a512:	18 11                	sbb    BYTE PTR [rcx],dl
  40a514:	2e 27                	cs (bad) 
  40a516:	3c 35                	cmp    al,0x35
  40a518:	42                   	rex.X
  40a519:	4b 50                	rex.WXB push r8
  40a51b:	59                   	pop    rcx
  40a51c:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  40a51e:	74 7d                	je     40a59d <GF_MUL_TABLE+0xa5d>
  40a520:	a1 a8 b3 ba 85 8c 97 	movabs eax,ds:0xe99e978c85bab3a8
  40a527:	9e e9 
  40a529:	e0 fb                	loopne 40a526 <GF_MUL_TABLE+0x9e6>
  40a52b:	f2 cd c4             	repnz int 0xc4
  40a52e:	df d6                	(bad)  
  40a530:	31 38                	xor    DWORD PTR [rax],edi
  40a532:	23 2a                	and    ebp,DWORD PTR [rdx]
  40a534:	15 1c 07 0e 79       	adc    eax,0x790e071c
  40a539:	70 6b                	jo     40a5a6 <GF_MUL_TABLE+0xa66>
  40a53b:	62                   	(bad)  {k1}
  40a53c:	5d                   	pop    rbp
  40a53d:	54                   	push   rsp
  40a53e:	4f                   	rex.WRXB
  40a53f:	46 00 00             	rex.RX add BYTE PTR [rax],r8b
	...
  40a63e:	00 00                	add    BYTE PTR [rax],al
  40a640:	00 0b                	add    BYTE PTR [rbx],cl
  40a642:	16                   	(bad)  
  40a643:	1d 2c 27 3a 31       	sbb    eax,0x313a272c
  40a648:	58                   	pop    rax
  40a649:	53                   	push   rbx
  40a64a:	4e                   	rex.WRX
  40a64b:	45 74 7f             	rex.RB je 40a6cd <GF_MUL_TABLE+0xb8d>
  40a64e:	62                   	(bad)  {k1}
  40a64f:	69 b0 bb a6 ad 9c 97 	imul   esi,DWORD PTR [rax-0x63525945],0xe8818a97
  40a656:	8a 81 e8 
  40a659:	e3 fe                	jrcxz  40a659 <GF_MUL_TABLE+0xb19>
  40a65b:	f5                   	cmc    
  40a65c:	c4                   	(bad)  
  40a65d:	cf                   	iret   
  40a65e:	d2 d9                	rcr    cl,cl
  40a660:	7b 70                	jnp    40a6d2 <GF_MUL_TABLE+0xb92>
  40a662:	6d                   	ins    DWORD PTR es:[rdi],dx
  40a663:	66 57                	push   di
  40a665:	5c                   	pop    rsp
  40a666:	41                   	rex.B
  40a667:	4a 23 28             	rex.WX and rbp,QWORD PTR [rax]
  40a66a:	35 3e 0f 04 19       	xor    eax,0x19040f3e
  40a66f:	12 cb                	adc    cl,bl
  40a671:	c0 dd d6             	rcr    ch,0xd6
  40a674:	e7 ec                	out    0xec,eax
  40a676:	f1                   	icebp  
  40a677:	fa                   	cli    
  40a678:	93                   	xchg   ebx,eax
  40a679:	98                   	cwde   
  40a67a:	85 8e bf b4 a9 a2    	test   DWORD PTR [rsi-0x5d564b41],ecx
  40a680:	f6 fd                	idiv   ch
  40a682:	e0 eb                	loopne 40a66f <GF_MUL_TABLE+0xb2f>
  40a684:	da d1                	fcmovbe st,st(1)
  40a686:	cc                   	int3   
  40a687:	c7                   	(bad)  
  40a688:	ae                   	scas   al,BYTE PTR es:[rdi]
  40a689:	a5                   	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  40a68a:	b8 b3 82 89 94       	mov    eax,0x948982b3
  40a68f:	9f                   	lahf   
  40a690:	46                   	rex.RX
  40a691:	4d 50                	rex.WRB push r8
  40a693:	5b                   	pop    rbx
  40a694:	6a 61                	push   0x61
  40a696:	7c 77                	jl     40a70f <GF_MUL_TABLE+0xbcf>
  40a698:	1e                   	(bad)  
  40a699:	15 08 03 32 39       	adc    eax,0x39320308
  40a69e:	24 2f                	and    al,0x2f
  40a6a0:	8d 86 9b 90 a1 aa    	lea    eax,[rsi-0x555e6f65]
  40a6a6:	b7 bc                	mov    bh,0xbc
  40a6a8:	d5                   	(bad)  
  40a6a9:	de c3                	faddp  st(3),st
  40a6ab:	c8 f9 f2 ef          	enter  0xf2f9,0xef
  40a6af:	e4 3d                	in     al,0x3d
  40a6b1:	36 2b 20             	sub    esp,DWORD PTR ss:[rax]
  40a6b4:	11 1a                	adc    DWORD PTR [rdx],ebx
  40a6b6:	07                   	(bad)  
  40a6b7:	0c 65                	or     al,0x65
  40a6b9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  40a6ba:	73 78                	jae    40a734 <GF_MUL_TABLE+0xbf4>
  40a6bc:	49                   	rex.WB
  40a6bd:	42 5f                	rex.X pop rdi
  40a6bf:	54                   	push   rsp
  40a6c0:	f7 fc                	idiv   esp
  40a6c2:	e1 ea                	loope  40a6ae <GF_MUL_TABLE+0xb6e>
  40a6c4:	db d0                	fcmovnbe st,st(0)
  40a6c6:	cd c6                	int    0xc6
  40a6c8:	af                   	scas   eax,DWORD PTR es:[rdi]
  40a6c9:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40a6ca:	b9 b2 83 88 95       	mov    ecx,0x958883b2
  40a6cf:	9e                   	sahf   
  40a6d0:	47                   	rex.RXB
  40a6d1:	4c 51                	rex.WR push rcx
  40a6d3:	5a                   	pop    rdx
  40a6d4:	6b 60 7d 76          	imul   esp,DWORD PTR [rax+0x7d],0x76
  40a6d8:	1f                   	(bad)  
  40a6d9:	14 09                	adc    al,0x9
  40a6db:	02 33                	add    dh,BYTE PTR [rbx]
  40a6dd:	38 25 2e 8c 87 9a    	cmp    BYTE PTR [rip+0xffffffff9a878c2e],ah        # ffffffff9ac83311 <_end+0xffffffff9a675b71>
  40a6e3:	91                   	xchg   ecx,eax
  40a6e4:	a0 ab b6 bd d4 df c2 	movabs al,ds:0xf8c9c2dfd4bdb6ab
  40a6eb:	c9 f8 
  40a6ed:	f3 ee                	repz out dx,al
  40a6ef:	e5 3c                	in     eax,0x3c
  40a6f1:	37                   	(bad)  
  40a6f2:	2a 21                	sub    ah,BYTE PTR [rcx]
  40a6f4:	10 1b                	adc    BYTE PTR [rbx],bl
  40a6f6:	06                   	(bad)  
  40a6f7:	0d 64 6f 72 79       	or     eax,0x79726f64
  40a6fc:	48                   	rex.W
  40a6fd:	43 5e                	rex.XB pop r14
  40a6ff:	55                   	push   rbp
  40a700:	01 0a                	add    DWORD PTR [rdx],ecx
  40a702:	17                   	(bad)  
  40a703:	1c 2d                	sbb    al,0x2d
  40a705:	26 3b 30             	cmp    esi,DWORD PTR es:[rax]
  40a708:	59                   	pop    rcx
  40a709:	52                   	push   rdx
  40a70a:	4f                   	rex.WRXB
  40a70b:	44 75 7e             	rex.R jne 40a78c <GF_MUL_TABLE+0xc4c>
  40a70e:	63 68 b1             	movsxd ebp,DWORD PTR [rax-0x4f]
  40a711:	ba a7 ac 9d 96       	mov    edx,0x969daca7
  40a716:	8b 80 e9 e2 ff f4    	mov    eax,DWORD PTR [rax-0xb001d17]
  40a71c:	c5 ce d3             	(bad)  
  40a71f:	d8 7a 71             	fdivr  DWORD PTR [rdx+0x71]
  40a722:	6c                   	ins    BYTE PTR es:[rdi],dx
  40a723:	67 56                	addr32 push rsi
  40a725:	5d                   	pop    rbp
  40a726:	40                   	rex
  40a727:	4b 22 29             	rex.WXB and bpl,BYTE PTR [r9]
  40a72a:	34 3f                	xor    al,0x3f
  40a72c:	0e                   	(bad)  
  40a72d:	05 18 13 ca c1       	add    eax,0xc1ca1318
  40a732:	dc d7                	(bad)  
  40a734:	e6 ed                	out    0xed,al
  40a736:	f0 fb                	lock sti 
  40a738:	92                   	xchg   edx,eax
  40a739:	99                   	cdq    
  40a73a:	84 8f be b5 a8 a3    	test   BYTE PTR [rdi-0x5c574a42],cl
	...
  40a840:	00 0d 1a 17 34 39    	add    BYTE PTR [rip+0x3934171a],cl        # 3974bf60 <_end+0x3913e7c0>
  40a846:	2e 23 68 65          	and    ebp,DWORD PTR cs:[rax+0x65]
  40a84a:	72 7f                	jb     40a8cb <GF_MUL_TABLE+0xd8b>
  40a84c:	5c                   	pop    rsp
  40a84d:	51                   	push   rcx
  40a84e:	46                   	rex.RX
  40a84f:	4b d0 dd             	rex.WXB rcr r13b,1
  40a852:	ca c7 e4             	retf   0xe4c7
  40a855:	e9 fe f3 b8 b5       	jmp    ffffffffb5f99c58 <_end+0xffffffffb598c4b8>
  40a85a:	a2 af 8c 81 96 9b bb 	movabs ds:0xa1b6bb9b96818caf,al
  40a861:	b6 a1 
  40a863:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40a864:	8f 82 95 98 d3 de    	pop    QWORD PTR [rdx-0x212c676b]
  40a86a:	c9                   	leave  
  40a86b:	c4                   	(bad)  
  40a86c:	e7 ea                	out    0xea,eax
  40a86e:	fd                   	std    
  40a86f:	f0 6b 66 71 7c       	lock imul esp,DWORD PTR [rsi+0x71],0x7c
  40a874:	5f                   	pop    rdi
  40a875:	52                   	push   rdx
  40a876:	45                   	rex.RB
  40a877:	48 03 0e             	add    rcx,QWORD PTR [rsi]
  40a87a:	19 14 37             	sbb    DWORD PTR [rdi+rsi*1],edx
  40a87d:	3a 2d 20 6d 60 77    	cmp    ch,BYTE PTR [rip+0x77606d20]        # 77a115a3 <_end+0x77403e03>
  40a883:	7a 59                	jp     40a8de <GF_MUL_TABLE+0xd9e>
  40a885:	54                   	push   rsp
  40a886:	43                   	rex.XB
  40a887:	4e 05 08 1f 12 31    	rex.WRX add rax,0x31121f08
  40a88d:	3c 2b                	cmp    al,0x2b
  40a88f:	26 bd b0 a7 aa 89    	es mov ebp,0x89aaa7b0
  40a895:	84 93 9e d5 d8 cf    	test   BYTE PTR [rbx-0x30272a62],dl
  40a89b:	c2 e1 ec             	ret    0xece1
  40a89e:	fb                   	sti    
  40a89f:	f6 d6                	not    dh
  40a8a1:	db cc                	fcmovne st,st(4)
  40a8a3:	c1 e2 ef             	shl    edx,0xef
  40a8a6:	f8                   	clc    
  40a8a7:	f5                   	cmc    
  40a8a8:	be b3 a4 a9 8a       	mov    esi,0x8aa9a4b3
  40a8ad:	87 90 9d 06 0b 1c    	xchg   DWORD PTR [rax+0x1c0b069d],edx
  40a8b3:	11 32                	adc    DWORD PTR [rdx],esi
  40a8b5:	3f                   	(bad)  
  40a8b6:	28 25 6e 63 74 79    	sub    BYTE PTR [rip+0x7974636e],ah        # 79b50c2a <_end+0x7954348a>
  40a8bc:	5a                   	pop    rdx
  40a8bd:	57                   	push   rdi
  40a8be:	40                   	rex
  40a8bf:	4d da d7             	rex.WRB fcmovbe st,st(7)
  40a8c2:	c0 cd ee             	ror    ch,0xee
  40a8c5:	e3 f4                	jrcxz  40a8bb <GF_MUL_TABLE+0xd7b>
  40a8c7:	f9                   	stc    
  40a8c8:	b2 bf                	mov    dl,0xbf
  40a8ca:	a8 a5                	test   al,0xa5
  40a8cc:	86 8b 9c 91 0a 07    	xchg   BYTE PTR [rbx+0x70a919c],cl
  40a8d2:	10 1d 3e 33 24 29    	adc    BYTE PTR [rip+0x2924333e],bl        # 2964dc16 <_end+0x29040476>
  40a8d8:	62                   	(bad)  {k1}
  40a8d9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  40a8da:	78 75                	js     40a951 <GF_MUL_TABLE+0xe11>
  40a8dc:	56                   	push   rsi
  40a8dd:	5b                   	pop    rbx
  40a8de:	4c                   	rex.WR
  40a8df:	41 61                	rex.B (bad) 
  40a8e1:	6c                   	ins    BYTE PTR es:[rdi],dx
  40a8e2:	7b 76                	jnp    40a95a <GF_MUL_TABLE+0xe1a>
  40a8e4:	55                   	push   rbp
  40a8e5:	58                   	pop    rax
  40a8e6:	4f                   	rex.WRXB
  40a8e7:	42 09 04 13          	or     DWORD PTR [rbx+r10*1],eax
  40a8eb:	1e                   	(bad)  
  40a8ec:	3d 30 27 2a b1       	cmp    eax,0xb12a2730
  40a8f1:	bc ab a6 85 88       	mov    esp,0x8885a6ab
  40a8f6:	9f                   	lahf   
  40a8f7:	92                   	xchg   edx,eax
  40a8f8:	d9 d4                	(bad)  
  40a8fa:	c3                   	ret    
  40a8fb:	ce                   	(bad)  
  40a8fc:	ed                   	in     eax,dx
  40a8fd:	e0 f7                	loopne 40a8f6 <GF_MUL_TABLE+0xdb6>
  40a8ff:	fa                   	cli    
  40a900:	b7 ba                	mov    bh,0xba
  40a902:	ad                   	lods   eax,DWORD PTR ds:[rsi]
  40a903:	a0 83 8e 99 94 df d2 	movabs al,ds:0xc8c5d2df94998e83
  40a90a:	c5 c8 
  40a90c:	eb e6                	jmp    40a8f4 <GF_MUL_TABLE+0xdb4>
  40a90e:	f1                   	icebp  
  40a90f:	fc                   	cld    
  40a910:	67 6a 7d             	addr32 push 0x7d
  40a913:	70 53                	jo     40a968 <GF_MUL_TABLE+0xe28>
  40a915:	5e                   	pop    rsi
  40a916:	49                   	rex.WB
  40a917:	44 0f 02 15 18 3b 36 	lar    r10d,WORD PTR [rip+0x21363b18]        # 2176e437 <_end+0x21160c97>
  40a91e:	21 
  40a91f:	2c 0c                	sub    al,0xc
  40a921:	01 16                	add    DWORD PTR [rsi],edx
  40a923:	1b 38                	sbb    edi,DWORD PTR [rax]
  40a925:	35 22 2f 64 69       	xor    eax,0x69642f22
  40a92a:	7e 73                	jle    40a99f <GF_MUL_TABLE+0xe5f>
  40a92c:	50                   	push   rax
  40a92d:	5d                   	pop    rbp
  40a92e:	4a                   	rex.WX
  40a92f:	47 dc d1             	rex.RXB (bad) 
  40a932:	c6                   	(bad)  
  40a933:	cb                   	retf   
  40a934:	e8 e5 f2 ff b4       	call   ffffffffb5409c1e <_end+0xffffffffb4dfc47e>
  40a939:	b9 ae a3 80 8d       	mov    ecx,0x8d80a3ae
  40a93e:	9a                   	(bad)  
  40a93f:	97                   	xchg   edi,eax
  40a940:	00 0e                	add    BYTE PTR [rsi],cl
  40a942:	1c 12                	sbb    al,0x12
  40a944:	38 36                	cmp    BYTE PTR [rsi],dh
  40a946:	24 2a                	and    al,0x2a
  40a948:	70 7e                	jo     40a9c8 <GF_MUL_TABLE+0xe88>
  40a94a:	6c                   	ins    BYTE PTR es:[rdi],dx
  40a94b:	62                   	(bad)  {k1}
  40a94c:	48                   	rex.W
  40a94d:	46 54                	rex.RX push rsp
  40a94f:	5a                   	pop    rdx
  40a950:	e0 ee                	loopne 40a940 <GF_MUL_TABLE+0xe00>
  40a952:	fc                   	cld    
  40a953:	f2 d8 d6             	repnz fcom st(6)
  40a956:	c4                   	(bad)  
  40a957:	ca 90 9e             	retf   0x9e90
  40a95a:	8c 82 a8 a6 b4 ba    	mov    WORD PTR [rdx-0x454b5958],es
  40a960:	db d5                	fcmovnbe st,st(5)
  40a962:	c7                   	(bad)  
  40a963:	c9                   	leave  
  40a964:	e3 ed                	jrcxz  40a953 <GF_MUL_TABLE+0xe13>
  40a966:	ff f1                	push   rcx
  40a968:	ab                   	stos   DWORD PTR es:[rdi],eax
  40a969:	a5                   	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  40a96a:	b7 b9                	mov    bh,0xb9
  40a96c:	93                   	xchg   ebx,eax
  40a96d:	9d                   	popf   
  40a96e:	8f 81 3b 35 27 29    	pop    QWORD PTR [rcx+0x2927353b]
  40a974:	03 0d 1f 11 4b 45    	add    ecx,DWORD PTR [rip+0x454b111f]        # 458bba99 <_end+0x452ae2f9>
  40a97a:	57                   	push   rdi
  40a97b:	59                   	pop    rcx
  40a97c:	73 7d                	jae    40a9fb <GF_MUL_TABLE+0xebb>
  40a97e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  40a97f:	61                   	(bad)  
  40a980:	ad                   	lods   eax,DWORD PTR ds:[rsi]
  40a981:	a3 b1 bf 95 9b 89 87 	movabs ds:0xd3dd87899b95bfb1,eax
  40a988:	dd d3 
  40a98a:	c1 cf e5             	ror    edi,0xe5
  40a98d:	eb f9                	jmp    40a988 <GF_MUL_TABLE+0xe48>
  40a98f:	f7                   	(bad)  
  40a990:	4d                   	rex.WRB
  40a991:	43 51                	rex.XB push r9
  40a993:	5f                   	pop    rdi
  40a994:	75 7b                	jne    40aa11 <GF_MUL_TABLE+0xed1>
  40a996:	69 67 3d 33 21 2f 05 	imul   esp,DWORD PTR [rdi+0x3d],0x52f2133
  40a99d:	0b 19                	or     ebx,DWORD PTR [rcx]
  40a99f:	17                   	(bad)  
  40a9a0:	76 78                	jbe    40aa1a <GF_MUL_TABLE+0xeda>
  40a9a2:	6a 64                	push   0x64
  40a9a4:	4e                   	rex.WRX
  40a9a5:	40 52                	rex push rdx
  40a9a7:	5c                   	pop    rsp
  40a9a8:	06                   	(bad)  
  40a9a9:	08 1a                	or     BYTE PTR [rdx],bl
  40a9ab:	14 3e                	adc    al,0x3e
  40a9ad:	30 22                	xor    BYTE PTR [rdx],ah
  40a9af:	2c 96                	sub    al,0x96
  40a9b1:	98                   	cwde   
  40a9b2:	8a 84 ae a0 b2 bc e6 	mov    al,BYTE PTR [rsi+rbp*4-0x19434d60]
  40a9b9:	e8 fa f4 de d0       	call   ffffffffd11f9eb8 <_end+0xffffffffd0bec718>
  40a9be:	c2 cc 41             	ret    0x41cc
  40a9c1:	4f 5d                	rex.WRXB pop r13
  40a9c3:	53                   	push   rbx
  40a9c4:	79 77                	jns    40aa3d <GF_MUL_TABLE+0xefd>
  40a9c6:	65 6b 31 3f          	imul   esi,DWORD PTR gs:[rcx],0x3f
  40a9ca:	2d 23 09 07 15       	sub    eax,0x15070923
  40a9cf:	1b a1 af bd b3 99    	sbb    esp,DWORD PTR [rcx-0x664c4251]
  40a9d5:	97                   	xchg   edi,eax
  40a9d6:	85 8b d1 df cd c3    	test   DWORD PTR [rbx-0x3c32202f],ecx
  40a9dc:	e9 e7 f5 fb 9a       	jmp    ffffffff9b3c9fc8 <_end+0xffffffff9adbc828>
  40a9e1:	94                   	xchg   esp,eax
  40a9e2:	86 88 a2 ac be b0    	xchg   BYTE PTR [rax-0x4f41535e],cl
  40a9e8:	ea                   	(bad)  
  40a9e9:	e4 f6                	in     al,0xf6
  40a9eb:	f8                   	clc    
  40a9ec:	d2 dc                	rcr    ah,cl
  40a9ee:	ce                   	(bad)  
  40a9ef:	c0 7a 74 66          	sar    BYTE PTR [rdx+0x74],0x66
  40a9f3:	68 42 4c 5e 50       	push   0x505e4c42
  40a9f8:	0a 04 16             	or     al,BYTE PTR [rsi+rdx*1]
  40a9fb:	18 32                	sbb    BYTE PTR [rdx],dh
  40a9fd:	3c 2e                	cmp    al,0x2e
  40a9ff:	20 ec                	and    ah,ch
  40aa01:	e2 f0                	loop   40a9f3 <GF_MUL_TABLE+0xeb3>
  40aa03:	fe                   	(bad)  
  40aa04:	d4                   	(bad)  
  40aa05:	da c8                	fcmove st,st(0)
  40aa07:	c6                   	(bad)  
  40aa08:	9c                   	pushf  
  40aa09:	92                   	xchg   edx,eax
  40aa0a:	80 8e a4 aa b8 b6 0c 	or     BYTE PTR [rsi-0x4947555c],0xc
  40aa11:	02 10                	add    dl,BYTE PTR [rax]
  40aa13:	1e                   	(bad)  
  40aa14:	34 3a                	xor    al,0x3a
  40aa16:	28 26                	sub    BYTE PTR [rsi],ah
  40aa18:	7c 72                	jl     40aa8c <inv_sbox+0x4c>
  40aa1a:	60                   	(bad)  
  40aa1b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  40aa1c:	44                   	rex.R
  40aa1d:	4a 58                	rex.WX pop rax
  40aa1f:	56                   	push   rsi
  40aa20:	37                   	(bad)  
  40aa21:	39 2b                	cmp    DWORD PTR [rbx],ebp
  40aa23:	25 0f 01 13 1d       	and    eax,0x1d13010f
  40aa28:	47                   	rex.RXB
  40aa29:	49 5b                	rex.WB pop r11
  40aa2b:	55                   	push   rbp
  40aa2c:	7f 71                	jg     40aa9f <inv_sbox+0x5f>
  40aa2e:	63 6d d7             	movsxd ebp,DWORD PTR [rbp-0x29]
  40aa31:	d9 cb                	fxch   st(3)
  40aa33:	c5 ef e1             	(bad)  
  40aa36:	f3 fd                	repz std 
  40aa38:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  40aa39:	a9 bb b5 9f 91       	test   eax,0x919fb5bb
  40aa3e:	83 8d 52 09 6a d5 30 	or     DWORD PTR [rbp-0x2a95f6ae],0x30

000000000040aa40 <inv_sbox>:
  40aa40:	52                   	push   rdx
  40aa41:	09 6a d5             	or     DWORD PTR [rdx-0x2b],ebp
  40aa44:	30 36                	xor    BYTE PTR [rsi],dh
  40aa46:	a5                   	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  40aa47:	38 bf 40 a3 9e 81    	cmp    BYTE PTR [rdi-0x7e615cc0],bh
  40aa4d:	f3 d7                	repz xlat BYTE PTR ds:[rbx]
  40aa4f:	fb                   	sti    
  40aa50:	7c e3                	jl     40aa35 <GF_MUL_TABLE+0xef5>
  40aa52:	39 82 9b 2f ff 87    	cmp    DWORD PTR [rdx-0x7800d065],eax
  40aa58:	34 8e                	xor    al,0x8e
  40aa5a:	43                   	rex.XB
  40aa5b:	44 c4                	rex.R (bad) 
  40aa5d:	de e9                	fsubrp st(1),st
  40aa5f:	cb                   	retf   
  40aa60:	54                   	push   rsp
  40aa61:	7b 94                	jnp    40a9f7 <GF_MUL_TABLE+0xeb7>
  40aa63:	32 a6 c2 23 3d ee    	xor    ah,BYTE PTR [rsi-0x11c2dc3e]
  40aa69:	4c 95                	rex.WR xchg rbp,rax
  40aa6b:	0b 42 fa             	or     eax,DWORD PTR [rdx-0x6]
  40aa6e:	c3                   	ret    
  40aa6f:	4e 08 2e             	rex.WRX or BYTE PTR [rsi],r13b
  40aa72:	a1 66 28 d9 24 b2 76 	movabs eax,ds:0xa25b76b224d92866
  40aa79:	5b a2 
  40aa7b:	49 6d                	rex.WB ins DWORD PTR es:[rdi],dx
  40aa7d:	8b d1                	mov    edx,ecx
  40aa7f:	25 72 f8 f6 64       	and    eax,0x64f6f872
  40aa84:	86 68 98             	xchg   BYTE PTR [rax-0x68],ch
  40aa87:	16                   	(bad)  
  40aa88:	d4                   	(bad)  
  40aa89:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40aa8a:	5c                   	pop    rsp
  40aa8b:	cc                   	int3   
  40aa8c:	5d                   	pop    rbp
  40aa8d:	65 b6 92             	gs mov dh,0x92
  40aa90:	6c                   	ins    BYTE PTR es:[rdi],dx
  40aa91:	70 48                	jo     40aadb <inv_sbox+0x9b>
  40aa93:	50                   	push   rax
  40aa94:	fd                   	std    
  40aa95:	ed                   	in     eax,dx
  40aa96:	b9 da 5e 15 46       	mov    ecx,0x46155eda
  40aa9b:	57                   	push   rdi
  40aa9c:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  40aa9d:	8d 9d 84 90 d8 ab    	lea    ebx,[rbp-0x54276f7c]
  40aaa3:	00 8c bc d3 0a f7 e4 	add    BYTE PTR [rsp+rdi*4-0x1b08f52d],cl
  40aaaa:	58                   	pop    rax
  40aaab:	05 b8 b3 45 06       	add    eax,0x645b3b8
  40aab0:	d0 2c 1e             	shr    BYTE PTR [rsi+rbx*1],1
  40aab3:	8f ca 3f 0f          	(bad)  
  40aab7:	02 c1                	add    al,cl
  40aab9:	af                   	scas   eax,DWORD PTR es:[rdi]
  40aaba:	bd 03 01 13 8a       	mov    ebp,0x8a130103
  40aabf:	6b 3a 91             	imul   edi,DWORD PTR [rdx],0xffffff91
  40aac2:	11 41 4f             	adc    DWORD PTR [rcx+0x4f],eax
  40aac5:	67 dc ea             	addr32 fsubr st(2),st
  40aac8:	97                   	xchg   edi,eax
  40aac9:	f2 cf                	repnz iret 
  40aacb:	ce                   	(bad)  
  40aacc:	f0 b4 e6             	lock mov ah,0xe6
  40aacf:	73 96                	jae    40aa67 <inv_sbox+0x27>
  40aad1:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40aad2:	74 22                	je     40aaf6 <inv_sbox+0xb6>
  40aad4:	e7 ad                	out    0xad,eax
  40aad6:	35 85 e2 f9 37       	xor    eax,0x37f9e285
  40aadb:	e8 1c 75 df 6e       	call   6f201ffc <_end+0x6ebf485c>
  40aae0:	47 f1                	rex.RXB icebp 
  40aae2:	1a 71 1d             	sbb    dh,BYTE PTR [rcx+0x1d]
  40aae5:	29 c5                	sub    ebp,eax
  40aae7:	89 6f b7             	mov    DWORD PTR [rdi-0x49],ebp
  40aaea:	62                   	(bad)  {k1}
  40aaeb:	0e                   	(bad)  
  40aaec:	aa                   	stos   BYTE PTR es:[rdi],al
  40aaed:	18 be 1b fc 56 3e    	sbb    BYTE PTR [rsi+0x3e56fc1b],bh
  40aaf3:	4b c6                	rex.WXB (bad) 
  40aaf5:	d2 79 20             	sar    BYTE PTR [rcx+0x20],cl
  40aaf8:	9a                   	(bad)  
  40aaf9:	db c0                	fcmovnb st,st(0)
  40aafb:	fe                   	(bad)  
  40aafc:	78 cd                	js     40aacb <inv_sbox+0x8b>
  40aafe:	5a                   	pop    rdx
  40aaff:	f4                   	hlt    
  40ab00:	1f                   	(bad)  
  40ab01:	dd a8 33 88 07 c7    	(bad)  [rax-0x38f877cd]
  40ab07:	31 b1 12 10 59 27    	xor    DWORD PTR [rcx+0x27591012],esi
  40ab0d:	80 ec 5f             	sub    ah,0x5f
  40ab10:	60                   	(bad)  
  40ab11:	51                   	push   rcx
  40ab12:	7f a9                	jg     40aabd <inv_sbox+0x7d>
  40ab14:	19 b5 4a 0d 2d e5    	sbb    DWORD PTR [rbp-0x1ad2f2b6],esi
  40ab1a:	7a 9f                	jp     40aabb <inv_sbox+0x7b>
  40ab1c:	93                   	xchg   ebx,eax
  40ab1d:	c9                   	leave  
  40ab1e:	9c                   	pushf  
  40ab1f:	ef                   	out    dx,eax
  40ab20:	a0 e0 3b 4d ae 2a f5 	movabs al,ds:0xc8b0f52aae4d3be0
  40ab27:	b0 c8 
  40ab29:	eb bb                	jmp    40aae6 <inv_sbox+0xa6>
  40ab2b:	3c 83                	cmp    al,0x83
  40ab2d:	53                   	push   rbx
  40ab2e:	99                   	cdq    
  40ab2f:	61                   	(bad)  
  40ab30:	17                   	(bad)  
  40ab31:	2b 04 7e             	sub    eax,DWORD PTR [rsi+rdi*2]
  40ab34:	ba 77 d6 26 e1       	mov    edx,0xe126d677
  40ab39:	69 14 63 55 21 0c 7d 	imul   edx,DWORD PTR [rbx+riz*2],0x7d0c2155

000000000040ab40 <sbox>:
  40ab40:	63 7c 77 7b          	movsxd edi,DWORD PTR [rdi+rsi*2+0x7b]
  40ab44:	f2 6b 6f c5 30       	repnz imul ebp,DWORD PTR [rdi-0x3b],0x30
  40ab49:	01 67 2b             	add    DWORD PTR [rdi+0x2b],esp
  40ab4c:	fe                   	(bad)  
  40ab4d:	d7                   	xlat   BYTE PTR ds:[rbx]
  40ab4e:	ab                   	stos   DWORD PTR es:[rdi],eax
  40ab4f:	76 ca                	jbe    40ab1b <inv_sbox+0xdb>
  40ab51:	82                   	(bad)  
  40ab52:	c9                   	leave  
  40ab53:	7d fa                	jge    40ab4f <sbox+0xf>
  40ab55:	59                   	pop    rcx
  40ab56:	47                   	rex.RXB
  40ab57:	f0 ad                	lock lods eax,DWORD PTR ds:[rsi]
  40ab59:	d4                   	(bad)  
  40ab5a:	a2 af 9c a4 72 c0 b7 	movabs ds:0x93fdb7c072a49caf,al
  40ab61:	fd 93 
  40ab63:	26 36 3f             	es ss (bad) 
  40ab66:	f7                   	(bad)  
  40ab67:	cc                   	int3   
  40ab68:	34 a5                	xor    al,0xa5
  40ab6a:	e5 f1                	in     eax,0xf1
  40ab6c:	71 d8                	jno    40ab46 <sbox+0x6>
  40ab6e:	31 15 04 c7 23 c3    	xor    DWORD PTR [rip+0xffffffffc323c704],edx        # ffffffffc3647278 <_end+0xffffffffc3039ad8>
  40ab74:	18 96 05 9a 07 12    	sbb    BYTE PTR [rsi+0x12079a05],dl
  40ab7a:	80 e2 eb             	and    dl,0xeb
  40ab7d:	27                   	(bad)  
  40ab7e:	b2 75                	mov    dl,0x75
  40ab80:	09 83 2c 1a 1b 6e    	or     DWORD PTR [rbx+0x6e1b1a2c],eax
  40ab86:	5a                   	pop    rdx
  40ab87:	a0 52 3b d6 b3 29 e3 	movabs al,ds:0x842fe329b3d63b52
  40ab8e:	2f 84 
  40ab90:	53                   	push   rbx
  40ab91:	d1 00                	rol    DWORD PTR [rax],1
  40ab93:	ed                   	in     eax,dx
  40ab94:	20 fc                	and    ah,bh
  40ab96:	b1 5b                	mov    cl,0x5b
  40ab98:	6a cb                	push   0xffffffffffffffcb
  40ab9a:	be 39 4a 4c 58       	mov    esi,0x584c4a39
  40ab9f:	cf                   	iret   
  40aba0:	d0 ef                	shr    bh,1
  40aba2:	aa                   	stos   BYTE PTR es:[rdi],al
  40aba3:	fb                   	sti    
  40aba4:	43                   	rex.XB
  40aba5:	4d 33 85 45 f9 02 7f 	xor    r8,QWORD PTR [r13+0x7f02f945]
  40abac:	50                   	push   rax
  40abad:	3c 9f                	cmp    al,0x9f
  40abaf:	a8 51                	test   al,0x51
  40abb1:	a3 40 8f 92 9d 38 f5 	movabs ds:0xb6bcf5389d928f40,eax
  40abb8:	bc b6 
  40abba:	da 21                	fisub  DWORD PTR [rcx]
  40abbc:	10 ff                	adc    bh,bh
  40abbe:	f3 d2 cd             	repz ror ch,cl
  40abc1:	0c 13                	or     al,0x13
  40abc3:	ec                   	in     al,dx
  40abc4:	5f                   	pop    rdi
  40abc5:	97                   	xchg   edi,eax
  40abc6:	44 17                	rex.R (bad) 
  40abc8:	c4                   	(bad)  
  40abc9:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  40abca:	7e 3d                	jle    40ac09 <sbox+0xc9>
  40abcc:	64 5d                	fs pop rbp
  40abce:	19 73 60             	sbb    DWORD PTR [rbx+0x60],esi
  40abd1:	81 4f dc 22 2a 90 88 	or     DWORD PTR [rdi-0x24],0x88902a22
  40abd8:	46 ee                	rex.RX out dx,al
  40abda:	b8 14 de 5e 0b       	mov    eax,0xb5ede14
  40abdf:	db e0                	fneni(8087 only) 
  40abe1:	32 3a                	xor    bh,BYTE PTR [rdx]
  40abe3:	0a 49 06             	or     cl,BYTE PTR [rcx+0x6]
  40abe6:	24 5c                	and    al,0x5c
  40abe8:	c2 d3 ac             	ret    0xacd3
  40abeb:	62 91 95 e4 79       	(bad)  {k4}{z}
  40abf0:	e7 c8                	out    0xc8,eax
  40abf2:	37                   	(bad)  
  40abf3:	6d                   	ins    DWORD PTR es:[rdi],dx
  40abf4:	8d                   	(bad)  
  40abf5:	d5                   	(bad)  
  40abf6:	4e a9 6c 56 f4 ea    	rex.WRX test rax,0xffffffffeaf4566c
  40abfc:	65 7a ae             	gs jp  40abad <sbox+0x6d>
  40abff:	08 ba 78 25 2e 1c    	or     BYTE PTR [rdx+0x1c2e2578],bh
  40ac05:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  40ac06:	b4 c6                	mov    ah,0xc6
  40ac08:	e8 dd 74 1f 4b       	call   4b6020ea <_end+0x4aff494a>
  40ac0d:	bd 8b 8a 70 3e       	mov    ebp,0x3e708a8b
  40ac12:	b5 66                	mov    ch,0x66
  40ac14:	48 03 f6             	add    rsi,rsi
  40ac17:	0e                   	(bad)  
  40ac18:	61                   	(bad)  
  40ac19:	35 57 b9 86 c1       	xor    eax,0xc186b957
  40ac1e:	1d 9e e1 f8 98       	sbb    eax,0x98f8e19e
  40ac23:	11 69 d9             	adc    DWORD PTR [rcx-0x27],ebp
  40ac26:	8e 94 9b 1e 87 e9 ce 	mov    ss,WORD PTR [rbx+rbx*4-0x311678e2]
  40ac2d:	55                   	push   rbp
  40ac2e:	28 df                	sub    bh,bl
  40ac30:	8c a1 89 0d bf e6    	mov    WORD PTR [rcx-0x1940f277],fs
  40ac36:	42 68 41 99 2d 0f    	rex.X push 0xf2d9941
  40ac3c:	b0 54                	mov    al,0x54
  40ac3e:	bb 16 46 69 69       	mov    ebx,0x69694616

000000000040ac40 <typeinfo name for int (int, int)>:
  40ac40:	46 69 69 69 45 00 00 	rex.RX imul r13d,DWORD PTR [rcx+0x69],0x45
  40ac47:	00 

000000000040ac48 <typeinfo for int (int, int)>:
  40ac48:	30 d5                	xor    ch,dl
  40ac4a:	60                   	(bad)  
  40ac4b:	00 00                	add    BYTE PTR [rax],al
  40ac4d:	00 00                	add    BYTE PTR [rax],al
  40ac4f:	00 40 ac             	add    BYTE PTR [rax-0x54],al
  40ac52:	40 00 00             	add    BYTE PTR [rax],al
  40ac55:	00 00                	add    BYTE PTR [rax],al
	...

000000000040ac58 <typeinfo name for int (*)(int, int)>:
  40ac58:	50                   	push   rax
  40ac59:	46 69 69 69 45 00 00 	rex.RX imul r13d,DWORD PTR [rcx+0x69],0x10000045
  40ac60:	10 

000000000040ac60 <typeinfo for int (*)(int, int)>:
  40ac60:	10 d7                	adc    bh,dl
  40ac62:	60                   	(bad)  
  40ac63:	00 00                	add    BYTE PTR [rax],al
  40ac65:	00 00                	add    BYTE PTR [rax],al
  40ac67:	00 58 ac             	add    BYTE PTR [rax-0x54],bl
  40ac6a:	40 00 00             	add    BYTE PTR [rax],al
	...
  40ac75:	00 00                	add    BYTE PTR [rax],al
  40ac77:	00 48 ac             	add    BYTE PTR [rax-0x54],cl
  40ac7a:	40 00 00             	add    BYTE PTR [rax],al
  40ac7d:	00 00                	add    BYTE PTR [rax],al
  40ac7f:	00 01                	add    BYTE PTR [rcx],al
  40ac81:	00 00                	add    BYTE PTR [rax],al
  40ac83:	00 01                	add    BYTE PTR [rcx],al
  40ac85:	00 00                	add    BYTE PTR [rax],al
  40ac87:	00 01                	add    BYTE PTR [rcx],al
  40ac89:	00 00                	add    BYTE PTR [rax],al
  40ac8b:	00 01                	add    BYTE PTR [rcx],al
  40ac8d:	00 00                	add    BYTE PTR [rax],al
  40ac8f:	00 00                	add    BYTE PTR [rax],al
  40ac91:	00 00                	add    BYTE PTR [rax],al
  40ac93:	00 ff                	add    bh,bh
  40ac95:	ff                   	(bad)  
  40ac96:	ff                   	(bad)  
  40ac97:	ff                   	(bad)  
  40ac98:	fe                   	(bad)  
  40ac99:	ff                   	(bad)  
  40ac9a:	ff                   	(bad)  
  40ac9b:	ff                   	(bad)  
  40ac9c:	fd                   	std    
  40ac9d:	ff                   	(bad)  
  40ac9e:	ff                   	(bad)  
  40ac9f:	ff                   	(bad)  
  40aca0:	fc                   	cld    
  40aca1:	ff                   	(bad)  
  40aca2:	ff                   	(bad)  
  40aca3:	ff                   	(bad)  
  40aca4:	fc                   	cld    
  40aca5:	ff                   	(bad)  
  40aca6:	ff                   	(bad)  
  40aca7:	ff                   	(bad)  
  40aca8:	fc                   	cld    
  40aca9:	ff                   	(bad)  
  40acaa:	ff                   	(bad)  
  40acab:	ff                   	(bad)  
  40acac:	fc                   	cld    
  40acad:	ff                   	(bad)  
  40acae:	ff                   	(bad)  
  40acaf:	ff                   	(bad)  
  40acb0:	ff 00                	inc    DWORD PTR [rax]
  40acb2:	ff 00                	inc    DWORD PTR [rax]
  40acb4:	ff 00                	inc    DWORD PTR [rax]
  40acb6:	ff 00                	inc    DWORD PTR [rax]
  40acb8:	ff 00                	inc    DWORD PTR [rax]
  40acba:	ff 00                	inc    DWORD PTR [rax]
  40acbc:	ff 00                	inc    DWORD PTR [rax]
  40acbe:	ff 00                	inc    DWORD PTR [rax]

Disassembly of section .eh_frame_hdr:

000000000040acc0 <__GNU_EH_FRAME_HDR>:
  40acc0:	01 1b                	add    DWORD PTR [rbx],ebx
  40acc2:	03 3b                	add    edi,DWORD PTR [rbx]
  40acc4:	c4 02 00 00          	(bad)  
  40acc8:	57                   	push   rdi
  40acc9:	00 00                	add    BYTE PTR [rax],al
  40accb:	00 60 6b             	add    BYTE PTR [rax+0x6b],ah
  40acce:	ff                   	(bad)  
  40accf:	ff 10                	call   QWORD PTR [rax]
  40acd1:	03 00                	add    eax,DWORD PTR [rax]
  40acd3:	00 60 6e             	add    BYTE PTR [rax+0x6e],ah
  40acd6:	ff                   	(bad)  
  40acd7:	ff                   	(bad)  
  40acd8:	38 11                	cmp    BYTE PTR [rcx],dl
  40acda:	00 00                	add    BYTE PTR [rax],al
  40acdc:	70 76                	jo     40ad54 <__GNU_EH_FRAME_HDR+0x94>
  40acde:	ff                   	(bad)  
  40acdf:	ff                   	(bad)  
  40ace0:	78 11                	js     40acf3 <__GNU_EH_FRAME_HDR+0x33>
  40ace2:	00 00                	add    BYTE PTR [rax],al
  40ace4:	a0 76 ff ff e0 02 00 	movabs al,ds:0xa0000002e0ffff76
  40aceb:	00 a0 
  40aced:	77 ff                	ja     40acee <__GNU_EH_FRAME_HDR+0x2e>
  40acef:	ff 50 03             	call   QWORD PTR [rax+0x3]
  40acf2:	00 00                	add    BYTE PTR [rax],al
  40acf4:	b0 77                	mov    al,0x77
  40acf6:	ff                   	(bad)  
  40acf7:	ff 68 03             	jmp    FWORD PTR [rax+0x3]
  40acfa:	00 00                	add    BYTE PTR [rax],al
  40acfc:	c0                   	(bad)  
  40acfd:	77 ff                	ja     40acfe <__GNU_EH_FRAME_HDR+0x3e>
  40acff:	ff 80 03 00 00 d0    	inc    DWORD PTR [rax-0x2ffffffd]
  40ad05:	77 ff                	ja     40ad06 <__GNU_EH_FRAME_HDR+0x46>
  40ad07:	ff 98 03 00 00 e0    	call   FWORD PTR [rax-0x1ffffffd]
  40ad0d:	77 ff                	ja     40ad0e <__GNU_EH_FRAME_HDR+0x4e>
  40ad0f:	ff b0 03 00 00 f0    	push   QWORD PTR [rax-0xffffffd]
  40ad15:	77 ff                	ja     40ad16 <__GNU_EH_FRAME_HDR+0x56>
  40ad17:	ff c8                	dec    eax
  40ad19:	03 00                	add    eax,DWORD PTR [rax]
  40ad1b:	00 00                	add    BYTE PTR [rax],al
  40ad1d:	78 ff                	js     40ad1e <__GNU_EH_FRAME_HDR+0x5e>
  40ad1f:	ff e0                	jmp    rax
  40ad21:	03 00                	add    eax,DWORD PTR [rax]
  40ad23:	00 10                	add    BYTE PTR [rax],dl
  40ad25:	78 ff                	js     40ad26 <__GNU_EH_FRAME_HDR+0x66>
  40ad27:	ff                   	(bad)  
  40ad28:	f8                   	clc    
  40ad29:	03 00                	add    eax,DWORD PTR [rax]
  40ad2b:	00 20                	add    BYTE PTR [rax],ah
  40ad2d:	78 ff                	js     40ad2e <__GNU_EH_FRAME_HDR+0x6e>
  40ad2f:	ff 10                	call   QWORD PTR [rax]
  40ad31:	04 00                	add    al,0x0
  40ad33:	00 30                	add    BYTE PTR [rax],dh
  40ad35:	78 ff                	js     40ad36 <__GNU_EH_FRAME_HDR+0x76>
  40ad37:	ff 28                	jmp    FWORD PTR [rax]
  40ad39:	04 00                	add    al,0x0
  40ad3b:	00 50 78             	add    BYTE PTR [rax+0x78],dl
  40ad3e:	ff                   	(bad)  
  40ad3f:	ff 40 04             	inc    DWORD PTR [rax+0x4]
  40ad42:	00 00                	add    BYTE PTR [rax],al
  40ad44:	80 78 ff ff          	cmp    BYTE PTR [rax-0x1],0xff
  40ad48:	58                   	pop    rax
  40ad49:	04 00                	add    al,0x0
  40ad4b:	00 80 7c ff ff 70    	add    BYTE PTR [rax+0x70ffff7c],al
  40ad51:	04 00                	add    al,0x0
  40ad53:	00 20                	add    BYTE PTR [rax],ah
  40ad55:	7f ff                	jg     40ad56 <__GNU_EH_FRAME_HDR+0x96>
  40ad57:	ff 88 04 00 00 30    	dec    DWORD PTR [rax+0x30000004]
  40ad5d:	7f ff                	jg     40ad5e <__GNU_EH_FRAME_HDR+0x9e>
  40ad5f:	ff a0 04 00 00 40    	jmp    QWORD PTR [rax+0x40000004]
  40ad65:	7f ff                	jg     40ad66 <__GNU_EH_FRAME_HDR+0xa6>
  40ad67:	ff                   	(bad)  
  40ad68:	b8 04 00 00 90       	mov    eax,0x90000004
  40ad6d:	7f ff                	jg     40ad6e <__GNU_EH_FRAME_HDR+0xae>
  40ad6f:	ff d0                	call   rax
  40ad71:	04 00                	add    al,0x0
  40ad73:	00 c0                	add    al,al
  40ad75:	7f ff                	jg     40ad76 <__GNU_EH_FRAME_HDR+0xb6>
  40ad77:	ff 18                	call   FWORD PTR [rax]
  40ad79:	05 00 00 70 80       	add    eax,0x80700000
  40ad7e:	ff                   	(bad)  
  40ad7f:	ff 48 05             	dec    DWORD PTR [rax+0x5]
  40ad82:	00 00                	add    BYTE PTR [rax],al
  40ad84:	30 81 ff ff 80 05    	xor    BYTE PTR [rcx+0x580ffff],al
  40ad8a:	00 00                	add    BYTE PTR [rax],al
  40ad8c:	e0 81                	loopne 40ad0f <__GNU_EH_FRAME_HDR+0x4f>
  40ad8e:	ff                   	(bad)  
  40ad8f:	ff c0                	inc    eax
  40ad91:	05 00 00 20 82       	add    eax,0x82200000
  40ad96:	ff                   	(bad)  
  40ad97:	ff                   	(bad)  
  40ad98:	d8 05 00 00 f0 90    	fadd   DWORD PTR [rip+0xffffffff90f00000]        # ffffffff9130ad9e <_end+0xffffffff90cfd5fe>
  40ad9e:	ff                   	(bad)  
  40ad9f:	ff 28                	jmp    FWORD PTR [rax]
  40ada1:	06                   	(bad)  
  40ada2:	00 00                	add    BYTE PTR [rax],al
  40ada4:	e0 92                	loopne 40ad38 <__GNU_EH_FRAME_HDR+0x78>
  40ada6:	ff                   	(bad)  
  40ada7:	ff 40 06             	inc    DWORD PTR [rax+0x6]
  40adaa:	00 00                	add    BYTE PTR [rax],al
  40adac:	60                   	(bad)  
  40adad:	93                   	xchg   ebx,eax
  40adae:	ff                   	(bad)  
  40adaf:	ff 68 06             	jmp    FWORD PTR [rax+0x6]
  40adb2:	00 00                	add    BYTE PTR [rax],al
  40adb4:	00 94 ff ff 88 06 00 	add    BYTE PTR [rdi+rdi*8+0x688ff],dl
  40adbb:	00 20                	add    BYTE PTR [rax],ah
  40adbd:	94                   	xchg   esp,eax
  40adbe:	ff                   	(bad)  
  40adbf:	ff a0 06 00 00 90    	jmp    QWORD PTR [rax-0x6ffffffa]
  40adc5:	96                   	xchg   esi,eax
  40adc6:	ff                   	(bad)  
  40adc7:	ff c0                	inc    eax
  40adc9:	06                   	(bad)  
  40adca:	00 00                	add    BYTE PTR [rax],al
  40adcc:	f0 a0 ff ff 10 07 00 	lock movabs al,ds:0xa16000000710ffff
  40add3:	00 60 a1 
  40add6:	ff                   	(bad)  
  40add7:	ff 28                	jmp    FWORD PTR [rax]
  40add9:	07                   	(bad)  
  40adda:	00 00                	add    BYTE PTR [rax],al
  40addc:	e0 a1                	loopne 40ad7f <__GNU_EH_FRAME_HDR+0xbf>
  40adde:	ff                   	(bad)  
  40addf:	ff 40 07             	inc    DWORD PTR [rax+0x7]
  40ade2:	00 00                	add    BYTE PTR [rax],al
  40ade4:	00 a2 ff ff 58 07    	add    BYTE PTR [rdx+0x758ffff],ah
  40adea:	00 00                	add    BYTE PTR [rax],al
  40adec:	30 a2 ff ff 70 07    	xor    BYTE PTR [rdx+0x770ffff],ah
  40adf2:	00 00                	add    BYTE PTR [rax],al
  40adf4:	70 a2                	jo     40ad98 <__GNU_EH_FRAME_HDR+0xd8>
  40adf6:	ff                   	(bad)  
  40adf7:	ff 88 07 00 00 c0    	dec    DWORD PTR [rax-0x3ffffff9]
  40adfd:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40adfe:	ff                   	(bad)  
  40adff:	ff d0                	call   rax
  40ae01:	07                   	(bad)  
  40ae02:	00 00                	add    BYTE PTR [rax],al
  40ae04:	b0 a6                	mov    al,0xa6
  40ae06:	ff                   	(bad)  
  40ae07:	ff                   	(bad)  
  40ae08:	e8 07 00 00 20       	call   2040ae14 <_end+0x1fdfd674>
  40ae0d:	aa                   	stos   BYTE PTR es:[rdi],al
  40ae0e:	ff                   	(bad)  
  40ae0f:	ff                   	(bad)  
  40ae10:	38 08                	cmp    BYTE PTR [rax],cl
  40ae12:	00 00                	add    BYTE PTR [rax],al
  40ae14:	c0 aa ff ff 58 08 00 	shr    BYTE PTR [rdx+0x858ffff],0x0
  40ae1b:	00 20                	add    BYTE PTR [rax],ah
  40ae1d:	af                   	scas   eax,DWORD PTR es:[rdi]
  40ae1e:	ff                   	(bad)  
  40ae1f:	ff a0 08 00 00 60    	jmp    QWORD PTR [rax+0x60000008]
  40ae25:	af                   	scas   eax,DWORD PTR es:[rdi]
  40ae26:	ff                   	(bad)  
  40ae27:	ff d0                	call   rax
  40ae29:	08 00                	or     BYTE PTR [rax],al
  40ae2b:	00 c0                	add    al,al
  40ae2d:	af                   	scas   eax,DWORD PTR es:[rdi]
  40ae2e:	ff                   	(bad)  
  40ae2f:	ff 20                	jmp    QWORD PTR [rax]
  40ae31:	09 00                	or     DWORD PTR [rax],eax
  40ae33:	00 50 b0             	add    BYTE PTR [rax-0x50],dl
  40ae36:	ff                   	(bad)  
  40ae37:	ff 68 09             	jmp    FWORD PTR [rax+0x9]
  40ae3a:	00 00                	add    BYTE PTR [rax],al
  40ae3c:	60                   	(bad)  
  40ae3d:	b0 ff                	mov    al,0xff
  40ae3f:	ff 80 09 00 00 b0    	inc    DWORD PTR [rax-0x4ffffff7]
  40ae45:	b0 ff                	mov    al,0xff
  40ae47:	ff 98 09 00 00 c0    	call   FWORD PTR [rax-0x3ffffff7]
  40ae4d:	b0 ff                	mov    al,0xff
  40ae4f:	ff b0 09 00 00 d0    	push   QWORD PTR [rax-0x2ffffff7]
  40ae55:	b0 ff                	mov    al,0xff
  40ae57:	ff c8                	dec    eax
  40ae59:	09 00                	or     DWORD PTR [rax],eax
  40ae5b:	00 e0                	add    al,ah
  40ae5d:	b0 ff                	mov    al,0xff
  40ae5f:	ff e0                	jmp    rax
  40ae61:	09 00                	or     DWORD PTR [rax],eax
  40ae63:	00 00                	add    BYTE PTR [rax],al
  40ae65:	b1 ff                	mov    cl,0xff
  40ae67:	ff                   	(bad)  
  40ae68:	f8                   	clc    
  40ae69:	09 00                	or     DWORD PTR [rax],eax
  40ae6b:	00 20                	add    BYTE PTR [rax],ah
  40ae6d:	b1 ff                	mov    cl,0xff
  40ae6f:	ff 10                	call   QWORD PTR [rax]
  40ae71:	0a 00                	or     al,BYTE PTR [rax]
  40ae73:	00 e0                	add    al,ah
  40ae75:	b5 ff                	mov    ch,0xff
  40ae77:	ff 58 0a             	call   FWORD PTR [rax+0xa]
  40ae7a:	00 00                	add    BYTE PTR [rax],al
  40ae7c:	50                   	push   rax
  40ae7d:	b6 ff                	mov    dh,0xff
  40ae7f:	ff 88 0a 00 00 c0    	dec    DWORD PTR [rax-0x3ffffff6]
  40ae85:	b6 ff                	mov    dh,0xff
  40ae87:	ff                   	(bad)  
  40ae88:	b8 0a 00 00 50       	mov    eax,0x5000000a
  40ae8d:	ba ff ff e8 0a       	mov    edx,0xae8ffff
  40ae92:	00 00                	add    BYTE PTR [rax],al
  40ae94:	80 bc ff ff 08 0b 00 	cmp    BYTE PTR [rdi+rdi*8+0xb08ff],0x0
  40ae9b:	00 
  40ae9c:	70 bd                	jo     40ae5b <__GNU_EH_FRAME_HDR+0x19b>
  40ae9e:	ff                   	(bad)  
  40ae9f:	ff 20                	jmp    QWORD PTR [rax]
  40aea1:	0b 00                	or     eax,DWORD PTR [rax]
  40aea3:	00 a0 c3 ff ff 78    	add    BYTE PTR [rax+0x78ffffc3],ah
  40aea9:	0b 00                	or     eax,DWORD PTR [rax]
  40aeab:	00 e0                	add    al,ah
  40aead:	c4                   	(bad)  
  40aeae:	ff                   	(bad)  
  40aeaf:	ff 90 0b 00 00 10    	call   QWORD PTR [rax+0x1000000b]
  40aeb5:	c5 ff ff             	(bad)  
  40aeb8:	a8 0b                	test   al,0xb
  40aeba:	00 00                	add    BYTE PTR [rax],al
  40aebc:	00 c8                	add    al,cl
  40aebe:	ff                   	(bad)  
  40aebf:	ff 00                	inc    DWORD PTR [rax]
  40aec1:	0c 00                	or     al,0x0
  40aec3:	00 d0                	add    al,dl
  40aec5:	c8 ff ff 28          	enter  0xffff,0x28
  40aec9:	0c 00                	or     al,0x0
  40aecb:	00 80 ce ff ff a8    	add    BYTE PTR [rax-0x57000032],al
  40aed1:	0c 00                	or     al,0x0
  40aed3:	00 e0                	add    al,ah
  40aed5:	cf                   	iret   
  40aed6:	ff                   	(bad)  
  40aed7:	ff                   	(bad)  
  40aed8:	d8 0c 00             	fmul   DWORD PTR [rax+rax*1]
  40aedb:	00 70 d0             	add    BYTE PTR [rax-0x30],dh
  40aede:	ff                   	(bad)  
  40aedf:	ff 20                	jmp    QWORD PTR [rax]
  40aee1:	0d 00 00 00 d1       	or     eax,0xd1000000
  40aee6:	ff                   	(bad)  
  40aee7:	ff 68 0d             	jmp    FWORD PTR [rax+0xd]
  40aeea:	00 00                	add    BYTE PTR [rax],al
  40aeec:	00 d2                	add    dl,dl
  40aeee:	ff                   	(bad)  
  40aeef:	ff                   	(bad)  
  40aef0:	b8 0d 00 00 b0       	mov    eax,0xb000000d
  40aef5:	d3 ff                	sar    edi,cl
  40aef7:	ff 08                	dec    DWORD PTR [rax]
  40aef9:	0e                   	(bad)  
  40aefa:	00 00                	add    BYTE PTR [rax],al
  40aefc:	80 d4 ff             	adc    ah,0xff
  40aeff:	ff 48 0e             	dec    DWORD PTR [rax+0xe]
  40af02:	00 00                	add    BYTE PTR [rax],al
  40af04:	40 d6                	rex (bad) 
  40af06:	ff                   	(bad)  
  40af07:	ff 98 0e 00 00 10    	call   FWORD PTR [rax+0x1000000e]
  40af0d:	d7                   	xlat   BYTE PTR ds:[rbx]
  40af0e:	ff                   	(bad)  
  40af0f:	ff                   	(bad)  
  40af10:	d8 0e                	fmul   DWORD PTR [rsi]
  40af12:	00 00                	add    BYTE PTR [rax],al
  40af14:	d0 d8                	rcr    al,1
  40af16:	ff                   	(bad)  
  40af17:	ff 28                	jmp    FWORD PTR [rax]
  40af19:	0f 00 00             	sldt   WORD PTR [rax]
  40af1c:	a0 d9 ff ff 68 0f 00 	movabs al,ds:0xf000000f68ffffd9
  40af23:	00 f0 
  40af25:	da ff                	(bad)  
  40af27:	ff                   	(bad)  
  40af28:	b8 0f 00 00 40       	mov    eax,0x4000000f
  40af2d:	dc ff                	fdivr  st(7),st
  40af2f:	ff 08                	dec    DWORD PTR [rax]
  40af31:	10 00                	adc    BYTE PTR [rax],al
  40af33:	00 90 de ff ff 38    	add    BYTE PTR [rax+0x38ffffde],dl
  40af39:	03 00                	add    eax,DWORD PTR [rax]
  40af3b:	00 a0 de ff ff e8    	add    BYTE PTR [rax-0x17000022],ah
  40af41:	04 00                	add    al,0x0
  40af43:	00 b0 de ff ff 00    	add    BYTE PTR [rax+0xffffde],dh
  40af49:	05 00 00 f0 de       	add    eax,0xdef00000
  40af4e:	ff                   	(bad)  
  40af4f:	ff 80 0c 00 00 60    	inc    DWORD PTR [rax+0x6000000c]
  40af55:	e0 ff                	loopne 40af56 <__GNU_EH_FRAME_HDR+0x296>
  40af57:	ff 60 10             	jmp    QWORD PTR [rax+0x10]
  40af5a:	00 00                	add    BYTE PTR [rax],al
  40af5c:	00 e1                	add    cl,ah
  40af5e:	ff                   	(bad)  
  40af5f:	ff 88 10 00 00 00    	dec    DWORD PTR [rax+0x10]
  40af65:	ea                   	(bad)  
  40af66:	ff                   	(bad)  
  40af67:	ff                   	(bad)  
  40af68:	b8 10 00 00 90       	mov    eax,0x90000010
  40af6d:	ea                   	(bad)  
  40af6e:	ff                   	(bad)  
  40af6f:	ff 08                	dec    DWORD PTR [rax]
  40af71:	11 00                	adc    DWORD PTR [rax],eax
  40af73:	00 10                	add    BYTE PTR [rax],dl
  40af75:	eb ff                	jmp    40af76 <__GNU_EH_FRAME_HDR+0x2b6>
  40af77:	ff 90 11 00 00 80    	call   QWORD PTR [rax-0x7fffffef]
  40af7d:	eb ff                	jmp    40af7e <__GNU_EH_FRAME_HDR+0x2be>
  40af7f:	ff                   	(bad)  
  40af80:	d8 11                	fcom   DWORD PTR [rcx]
	...

Disassembly of section .eh_frame:

000000000040af88 <__FRAME_END__-0xf28>:
  40af88:	14 00                	adc    al,0x0
  40af8a:	00 00                	add    BYTE PTR [rax],al
  40af8c:	00 00                	add    BYTE PTR [rax],al
  40af8e:	00 00                	add    BYTE PTR [rax],al
  40af90:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
  40af93:	00 01                	add    BYTE PTR [rcx],al
  40af95:	78 10                	js     40afa7 <__GNU_EH_FRAME_HDR+0x2e7>
  40af97:	01 1b                	add    DWORD PTR [rbx],ebx
  40af99:	0c 07                	or     al,0x7
  40af9b:	08 90 01 07 10 14    	or     BYTE PTR [rax+0x14100701],dl
  40afa1:	00 00                	add    BYTE PTR [rax],al
  40afa3:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  40afa6:	00 00                	add    BYTE PTR [rax],al
  40afa8:	b8 73 ff ff 2a       	mov    eax,0x2affff73
	...
  40afb5:	00 00                	add    BYTE PTR [rax],al
  40afb7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40afba:	00 00                	add    BYTE PTR [rax],al
  40afbc:	00 00                	add    BYTE PTR [rax],al
  40afbe:	00 00                	add    BYTE PTR [rax],al
  40afc0:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
  40afc3:	00 01                	add    BYTE PTR [rcx],al
  40afc5:	78 10                	js     40afd7 <__GNU_EH_FRAME_HDR+0x317>
  40afc7:	01 1b                	add    DWORD PTR [rbx],ebx
  40afc9:	0c 07                	or     al,0x7
  40afcb:	08 90 01 00 00 24    	or     BYTE PTR [rax+0x24000001],dl
  40afd1:	00 00                	add    BYTE PTR [rax],al
  40afd3:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  40afd6:	00 00                	add    BYTE PTR [rax],al
  40afd8:	48 68 ff ff f0 02    	rex.W push 0x2f0ffff
  40afde:	00 00                	add    BYTE PTR [rax],al
  40afe0:	00 0e                	add    BYTE PTR [rsi],cl
  40afe2:	10 46 0e             	adc    BYTE PTR [rsi+0xe],al
  40afe5:	18 4a 0f             	sbb    BYTE PTR [rdx+0xf],cl
  40afe8:	0b 77 08             	or     esi,DWORD PTR [rdi+0x8]
  40afeb:	80 00 3f             	add    BYTE PTR [rax],0x3f
  40afee:	1a 3b                	sbb    bh,BYTE PTR [rbx]
  40aff0:	2a 33                	sub    dh,BYTE PTR [rbx]
  40aff2:	24 22                	and    al,0x22
  40aff4:	00 00                	add    BYTE PTR [rax],al
  40aff6:	00 00                	add    BYTE PTR [rax],al
  40aff8:	14 00                	adc    al,0x0
  40affa:	00 00                	add    BYTE PTR [rax],al
  40affc:	44 00 00             	add    BYTE PTR [rax],r8b
  40afff:	00 50 db             	add    BYTE PTR [rax-0x25],dl
  40b002:	ff                   	(bad)  
  40b003:	ff 03                	inc    DWORD PTR [rbx]
	...
  40b00d:	00 00                	add    BYTE PTR [rax],al
  40b00f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b012:	00 00                	add    BYTE PTR [rax],al
  40b014:	5c                   	pop    rsp
  40b015:	00 00                	add    BYTE PTR [rax],al
  40b017:	00 48 74             	add    BYTE PTR [rax+0x74],cl
  40b01a:	ff                   	(bad)  
  40b01b:	ff 07                	inc    DWORD PTR [rdi]
	...
  40b025:	00 00                	add    BYTE PTR [rax],al
  40b027:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b02a:	00 00                	add    BYTE PTR [rax],al
  40b02c:	74 00                	je     40b02e <__GNU_EH_FRAME_HDR+0x36e>
  40b02e:	00 00                	add    BYTE PTR [rax],al
  40b030:	40 74 ff             	rex je 40b032 <__GNU_EH_FRAME_HDR+0x372>
  40b033:	ff 04 00             	inc    DWORD PTR [rax+rax*1]
	...
  40b03e:	00 00                	add    BYTE PTR [rax],al
  40b040:	14 00                	adc    al,0x0
  40b042:	00 00                	add    BYTE PTR [rax],al
  40b044:	8c 00                	mov    WORD PTR [rax],es
  40b046:	00 00                	add    BYTE PTR [rax],al
  40b048:	38 74 ff ff          	cmp    BYTE PTR [rdi+rdi*8-0x1],dh
  40b04c:	05 00 00 00 00       	add    eax,0x0
  40b051:	00 00                	add    BYTE PTR [rax],al
  40b053:	00 00                	add    BYTE PTR [rax],al
  40b055:	00 00                	add    BYTE PTR [rax],al
  40b057:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b05a:	00 00                	add    BYTE PTR [rax],al
  40b05c:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40b05d:	00 00                	add    BYTE PTR [rax],al
  40b05f:	00 30                	add    BYTE PTR [rax],dh
  40b061:	74 ff                	je     40b062 <__GNU_EH_FRAME_HDR+0x3a2>
  40b063:	ff 06                	inc    DWORD PTR [rsi]
	...
  40b06d:	00 00                	add    BYTE PTR [rax],al
  40b06f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b072:	00 00                	add    BYTE PTR [rax],al
  40b074:	bc 00 00 00 28       	mov    esp,0x28000000
  40b079:	74 ff                	je     40b07a <__GNU_EH_FRAME_HDR+0x3ba>
  40b07b:	ff 06                	inc    DWORD PTR [rsi]
	...
  40b085:	00 00                	add    BYTE PTR [rax],al
  40b087:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b08a:	00 00                	add    BYTE PTR [rax],al
  40b08c:	d4                   	(bad)  
  40b08d:	00 00                	add    BYTE PTR [rax],al
  40b08f:	00 20                	add    BYTE PTR [rax],ah
  40b091:	74 ff                	je     40b092 <__GNU_EH_FRAME_HDR+0x3d2>
  40b093:	ff 08                	dec    DWORD PTR [rax]
	...
  40b09d:	00 00                	add    BYTE PTR [rax],al
  40b09f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b0a2:	00 00                	add    BYTE PTR [rax],al
  40b0a4:	ec                   	in     al,dx
  40b0a5:	00 00                	add    BYTE PTR [rax],al
  40b0a7:	00 18                	add    BYTE PTR [rax],bl
  40b0a9:	74 ff                	je     40b0aa <__GNU_EH_FRAME_HDR+0x3ea>
  40b0ab:	ff 05 00 00 00 00    	inc    DWORD PTR [rip+0x0]        # 40b0b1 <__GNU_EH_FRAME_HDR+0x3f1>
  40b0b1:	00 00                	add    BYTE PTR [rax],al
  40b0b3:	00 00                	add    BYTE PTR [rax],al
  40b0b5:	00 00                	add    BYTE PTR [rax],al
  40b0b7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b0ba:	00 00                	add    BYTE PTR [rax],al
  40b0bc:	04 01                	add    al,0x1
  40b0be:	00 00                	add    BYTE PTR [rax],al
  40b0c0:	10 74 ff ff          	adc    BYTE PTR [rdi+rdi*8-0x1],dh
  40b0c4:	05 00 00 00 00       	add    eax,0x0
  40b0c9:	00 00                	add    BYTE PTR [rax],al
  40b0cb:	00 00                	add    BYTE PTR [rax],al
  40b0cd:	00 00                	add    BYTE PTR [rax],al
  40b0cf:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b0d2:	00 00                	add    BYTE PTR [rax],al
  40b0d4:	1c 01                	sbb    al,0x1
  40b0d6:	00 00                	add    BYTE PTR [rax],al
  40b0d8:	08 74 ff ff          	or     BYTE PTR [rdi+rdi*8-0x1],dh
  40b0dc:	05 00 00 00 00       	add    eax,0x0
  40b0e1:	00 00                	add    BYTE PTR [rax],al
  40b0e3:	00 00                	add    BYTE PTR [rax],al
  40b0e5:	00 00                	add    BYTE PTR [rax],al
  40b0e7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b0ea:	00 00                	add    BYTE PTR [rax],al
  40b0ec:	34 01                	xor    al,0x1
  40b0ee:	00 00                	add    BYTE PTR [rax],al
  40b0f0:	00 74 ff ff          	add    BYTE PTR [rdi+rdi*8-0x1],dh
  40b0f4:	1f                   	(bad)  
	...
  40b0fd:	00 00                	add    BYTE PTR [rax],al
  40b0ff:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b102:	00 00                	add    BYTE PTR [rax],al
  40b104:	4c 01 00             	add    QWORD PTR [rax],r8
  40b107:	00 08                	add    BYTE PTR [rax],cl
  40b109:	74 ff                	je     40b10a <__GNU_EH_FRAME_HDR+0x44a>
  40b10b:	ff 25 00 00 00 00    	jmp    QWORD PTR [rip+0x0]        # 40b111 <__GNU_EH_FRAME_HDR+0x451>
  40b111:	00 00                	add    BYTE PTR [rax],al
  40b113:	00 00                	add    BYTE PTR [rax],al
  40b115:	00 00                	add    BYTE PTR [rax],al
  40b117:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b11a:	00 00                	add    BYTE PTR [rax],al
  40b11c:	64 01 00             	add    DWORD PTR fs:[rax],eax
  40b11f:	00 20                	add    BYTE PTR [rax],ah
  40b121:	74 ff                	je     40b122 <__GNU_EH_FRAME_HDR+0x462>
  40b123:	ff f7                	push   rdi
  40b125:	03 00                	add    eax,DWORD PTR [rax]
	...
  40b12f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b132:	00 00                	add    BYTE PTR [rax],al
  40b134:	7c 01                	jl     40b137 <__GNU_EH_FRAME_HDR+0x477>
  40b136:	00 00                	add    BYTE PTR [rax],al
  40b138:	08 78 ff             	or     BYTE PTR [rax-0x1],bh
  40b13b:	ff 9a 02 00 00 00    	call   FWORD PTR [rdx+0x2]
  40b141:	00 00                	add    BYTE PTR [rax],al
  40b143:	00 00                	add    BYTE PTR [rax],al
  40b145:	00 00                	add    BYTE PTR [rax],al
  40b147:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b14a:	00 00                	add    BYTE PTR [rax],al
  40b14c:	94                   	xchg   esp,eax
  40b14d:	01 00                	add    DWORD PTR [rax],eax
  40b14f:	00 90 7a ff ff 08    	add    BYTE PTR [rax+0x8ffff7a],dl
	...
  40b15d:	00 00                	add    BYTE PTR [rax],al
  40b15f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b162:	00 00                	add    BYTE PTR [rax],al
  40b164:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40b165:	01 00                	add    DWORD PTR [rax],eax
  40b167:	00 88 7a ff ff 08    	add    BYTE PTR [rax+0x8ffff7a],cl
	...
  40b175:	00 00                	add    BYTE PTR [rax],al
  40b177:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b17a:	00 00                	add    BYTE PTR [rax],al
  40b17c:	c4 01 00 00          	(bad)  
  40b180:	80 7a ff ff          	cmp    BYTE PTR [rdx-0x1],0xff
  40b184:	4b 00 00             	rex.WXB add BYTE PTR [r8],al
	...
  40b18f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b192:	00 00                	add    BYTE PTR [rax],al
  40b194:	dc 01                	fadd   QWORD PTR [rcx]
  40b196:	00 00                	add    BYTE PTR [rax],al
  40b198:	b8 7a ff ff 22       	mov    eax,0x22ffff7a
	...
  40b1a5:	00 00                	add    BYTE PTR [rax],al
  40b1a7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b1aa:	00 00                	add    BYTE PTR [rax],al
  40b1ac:	f4                   	hlt    
  40b1ad:	01 00                	add    DWORD PTR [rax],eax
  40b1af:	00 b0 d9 ff ff 0c    	add    BYTE PTR [rax+0xcffffd9],dh
	...
  40b1bd:	00 00                	add    BYTE PTR [rax],al
  40b1bf:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b1c2:	00 00                	add    BYTE PTR [rax],al
  40b1c4:	0c 02                	or     al,0x2
  40b1c6:	00 00                	add    BYTE PTR [rax],al
  40b1c8:	a8 d9                	test   al,0xd9
  40b1ca:	ff                   	(bad)  
  40b1cb:	ff 36                	push   QWORD PTR [rsi]
	...
  40b1d5:	00 00                	add    BYTE PTR [rax],al
  40b1d7:	00 2c 00             	add    BYTE PTR [rax+rax*1],ch
  40b1da:	00 00                	add    BYTE PTR [rax],al
  40b1dc:	24 02                	and    al,0x2
  40b1de:	00 00                	add    BYTE PTR [rax],al
  40b1e0:	a0 7a ff ff a9 00 00 	movabs al,ds:0xa9ffff7a
  40b1e7:	00 00 
  40b1e9:	49 0e                	rex.WB (bad) 
  40b1eb:	10 8c 02 41 0e 18 86 	adc    BYTE PTR [rdx+rax*1-0x79e7f1bf],cl
  40b1f2:	03 43 0e             	add    eax,DWORD PTR [rbx+0xe]
  40b1f5:	20 83 04 50 0e 30    	and    BYTE PTR [rbx+0x300e5004],al
  40b1fb:	02 85 0e 20 43 0e    	add    al,BYTE PTR [rbp+0xe43200e]
  40b201:	18 41 0e             	sbb    BYTE PTR [rcx+0xe],al
  40b204:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b207:	08 34 00             	or     BYTE PTR [rax+rax*1],dh
  40b20a:	00 00                	add    BYTE PTR [rax],al
  40b20c:	54                   	push   rsp
  40b20d:	02 00                	add    al,BYTE PTR [rax]
  40b20f:	00 20                	add    BYTE PTR [rax],ah
  40b211:	7b ff                	jnp    40b212 <__GNU_EH_FRAME_HDR+0x552>
  40b213:	ff                   	(bad)  
  40b214:	be 00 00 00 00       	mov    esi,0x0
  40b219:	42 0e                	rex.X (bad) 
  40b21b:	10 8c 02 41 0e 18 86 	adc    BYTE PTR [rdx+rax*1-0x79e7f1bf],cl
  40b222:	03 44 0e 20          	add    eax,DWORD PTR [rsi+rcx*1+0x20]
  40b226:	83 04 47 0e          	add    DWORD PTR [rdi+rax*2],0xe
  40b22a:	30 02                	xor    BYTE PTR [rdx],al
  40b22c:	6c                   	ins    BYTE PTR es:[rdi],dx
  40b22d:	0a 0e                	or     cl,BYTE PTR [rsi]
  40b22f:	20 41 0e             	and    BYTE PTR [rcx+0xe],al
  40b232:	18 41 0e             	sbb    BYTE PTR [rcx+0xe],al
  40b235:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b238:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b23b:	00 00                	add    BYTE PTR [rax],al
  40b23d:	00 00                	add    BYTE PTR [rax],al
  40b23f:	00 3c 00             	add    BYTE PTR [rax+rax*1],bh
  40b242:	00 00                	add    BYTE PTR [rax],al
  40b244:	8c 02                	mov    WORD PTR [rdx],es
  40b246:	00 00                	add    BYTE PTR [rax],al
  40b248:	a8 7b                	test   al,0x7b
  40b24a:	ff                   	(bad)  
  40b24b:	ff a8 00 00 00 00    	jmp    FWORD PTR [rax+0x0]
  40b251:	54                   	push   rsp
  40b252:	0e                   	(bad)  
  40b253:	10 8d 02 42 0e 18    	adc    BYTE PTR [rbp+0x180e4202],cl
  40b259:	8c 03                	mov    WORD PTR [rbx],es
  40b25b:	44 0e                	rex.R (bad) 
  40b25d:	20 86 04 41 0e 28    	and    BYTE PTR [rsi+0x280e4104],al
  40b263:	83 05 4a 0e 30 56 0a 	add    DWORD PTR [rip+0x56300e4a],0xa        # 5670c0b4 <_end+0x560fe914>
  40b26a:	0e                   	(bad)  
  40b26b:	28 41 c3             	sub    BYTE PTR [rcx-0x3d],al
  40b26e:	0e                   	(bad)  
  40b26f:	20 41 c6             	and    BYTE PTR [rcx-0x3a],al
  40b272:	0e                   	(bad)  
  40b273:	18 42 cc             	sbb    BYTE PTR [rdx-0x34],al
  40b276:	0e                   	(bad)  
  40b277:	10 42 cd             	adc    BYTE PTR [rdx-0x33],al
  40b27a:	0e                   	(bad)  
  40b27b:	08 47 0b             	or     BYTE PTR [rdi+0xb],al
  40b27e:	00 00                	add    BYTE PTR [rax],al
  40b280:	14 00                	adc    al,0x0
  40b282:	00 00                	add    BYTE PTR [rax],al
  40b284:	cc                   	int3   
  40b285:	02 00                	add    al,BYTE PTR [rax]
  40b287:	00 18                	add    BYTE PTR [rax],bl
  40b289:	7c ff                	jl     40b28a <__GNU_EH_FRAME_HDR+0x5ca>
  40b28b:	ff                   	(bad)  
  40b28c:	3e 00 00             	add    BYTE PTR ds:[rax],al
	...
  40b297:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
  40b29b:	00 e4                	add    ah,ah
  40b29d:	02 00                	add    al,BYTE PTR [rax]
  40b29f:	00 40 7c             	add    BYTE PTR [rax+0x7c],al
  40b2a2:	ff                   	(bad)  
  40b2a3:	ff c2                	inc    edx
  40b2a5:	0e                   	(bad)  
  40b2a6:	00 00                	add    BYTE PTR [rax],al
  40b2a8:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
  40b2ab:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b2b1:	8e 03                	mov    es,WORD PTR [rbx]
  40b2b3:	42 0e                	rex.X (bad) 
  40b2b5:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b2bb:	8c 05 41 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e41],es        # ffffffff8670c102 <_end+0xffffffff860fe962>
  40b2c1:	06                   	(bad)  
  40b2c2:	41 0e                	rex.B (bad) 
  40b2c4:	38 83 07 4a 0e a0    	cmp    BYTE PTR [rbx-0x5ff1b5f9],al
  40b2ca:	02 03                	add    al,BYTE PTR [rbx]
  40b2cc:	9e                   	sahf   
  40b2cd:	0e                   	(bad)  
  40b2ce:	0a 0e                	or     cl,BYTE PTR [rsi]
  40b2d0:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40b2d3:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b2d6:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b2d9:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b2dc:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b2df:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b2e2:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b2e5:	00 00                	add    BYTE PTR [rax],al
  40b2e7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b2ea:	00 00                	add    BYTE PTR [rax],al
  40b2ec:	34 03                	xor    al,0x3
  40b2ee:	00 00                	add    BYTE PTR [rax],al
  40b2f0:	c0 8a ff ff ef 01 00 	ror    BYTE PTR [rdx+0x1efffff],0x0
	...
  40b2ff:	00 24 00             	add    BYTE PTR [rax+rax*1],ah
  40b302:	00 00                	add    BYTE PTR [rax],al
  40b304:	4c 03 00             	add    r8,QWORD PTR [rax]
  40b307:	00 98 8c ff ff 71    	add    BYTE PTR [rax+0x71ffff8c],bl
  40b30d:	00 00                	add    BYTE PTR [rax],al
  40b30f:	00 00                	add    BYTE PTR [rax],al
  40b311:	41 0e                	rex.B (bad) 
  40b313:	10 83 02 48 0e 20    	adc    BYTE PTR [rbx+0x200e4802],al
  40b319:	02 61 0a             	add    ah,BYTE PTR [rcx+0xa]
  40b31c:	0e                   	(bad)  
  40b31d:	10 41 0e             	adc    BYTE PTR [rcx+0xe],al
  40b320:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b323:	00 00                	add    BYTE PTR [rax],al
  40b325:	00 00                	add    BYTE PTR [rax],al
  40b327:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  40b32a:	00 00                	add    BYTE PTR [rax],al
  40b32c:	74 03                	je     40b331 <__GNU_EH_FRAME_HDR+0x671>
  40b32e:	00 00                	add    BYTE PTR [rax],al
  40b330:	f0 8c ff             	lock mov edi,?
  40b333:	ff 9d 00 00 00 00    	call   FWORD PTR [rbp+0x0]
  40b339:	44 0e                	rex.R (bad) 
  40b33b:	20 02                	and    BYTE PTR [rdx],al
  40b33d:	93                   	xchg   ebx,eax
  40b33e:	0a 0e                	or     cl,BYTE PTR [rsi]
  40b340:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b343:	00 00                	add    BYTE PTR [rax],al
  40b345:	00 00                	add    BYTE PTR [rax],al
  40b347:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b34a:	00 00                	add    BYTE PTR [rax],al
  40b34c:	94                   	xchg   esp,eax
  40b34d:	03 00                	add    eax,DWORD PTR [rax]
  40b34f:	00 70 8d             	add    BYTE PTR [rax-0x73],dh
  40b352:	ff                   	(bad)  
  40b353:	ff 12                	call   QWORD PTR [rdx]
	...
  40b35d:	00 00                	add    BYTE PTR [rax],al
  40b35f:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  40b362:	00 00                	add    BYTE PTR [rax],al
  40b364:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40b365:	03 00                	add    eax,DWORD PTR [rax]
  40b367:	00 78 8d             	add    BYTE PTR [rax-0x73],bh
  40b36a:	ff                   	(bad)  
  40b36b:	ff 64 02 00          	jmp    QWORD PTR [rdx+rax*1+0x0]
  40b36f:	00 00                	add    BYTE PTR [rax],al
  40b371:	44 0e                	rex.R (bad) 
  40b373:	30 03                	xor    BYTE PTR [rbx],al
  40b375:	ce                   	(bad)  
  40b376:	01 0a                	add    DWORD PTR [rdx],ecx
  40b378:	0e                   	(bad)  
  40b379:	08 46 0b             	or     BYTE PTR [rsi+0xb],al
  40b37c:	00 00                	add    BYTE PTR [rax],al
  40b37e:	00 00                	add    BYTE PTR [rax],al
  40b380:	4c 00 00             	rex.WR add BYTE PTR [rax],r8b
  40b383:	00 cc                	add    ah,cl
  40b385:	03 00                	add    eax,DWORD PTR [rax]
  40b387:	00 c8                	add    al,cl
  40b389:	8f                   	(bad)  
  40b38a:	ff                   	(bad)  
  40b38b:	ff 5c 0a 00          	call   FWORD PTR [rdx+rcx*1+0x0]
  40b38f:	00 00                	add    BYTE PTR [rax],al
  40b391:	42 0e                	rex.X (bad) 
  40b393:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b399:	8e 03                	mov    es,WORD PTR [rbx]
  40b39b:	45 0e                	rex.RB (bad) 
  40b39d:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b3a3:	8c 05 44 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e44],es        # ffffffff8670c1ed <_end+0xffffffff860fea4d>
  40b3a9:	06                   	(bad)  
  40b3aa:	41 0e                	rex.B (bad) 
  40b3ac:	38 83 07 47 0e e0    	cmp    BYTE PTR [rbx-0x1ff1b8f9],al
  40b3b2:	01 03                	add    DWORD PTR [rbx],eax
  40b3b4:	35 0a 0a 0e 38       	xor    eax,0x380e0a0a
  40b3b9:	41 0e                	rex.B (bad) 
  40b3bb:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b3be:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b3c1:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b3c4:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b3c7:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b3ca:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b3cd:	00 00                	add    BYTE PTR [rax],al
  40b3cf:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b3d2:	00 00                	add    BYTE PTR [rax],al
  40b3d4:	1c 04                	sbb    al,0x4
  40b3d6:	00 00                	add    BYTE PTR [rax],al
  40b3d8:	d8 99 ff ff 6f 00    	fcomp  DWORD PTR [rcx+0x6fffff]
	...
  40b3e6:	00 00                	add    BYTE PTR [rax],al
  40b3e8:	14 00                	adc    al,0x0
  40b3ea:	00 00                	add    BYTE PTR [rax],al
  40b3ec:	34 04                	xor    al,0x4
  40b3ee:	00 00                	add    BYTE PTR [rax],al
  40b3f0:	30 9a ff ff 7b 00    	xor    BYTE PTR [rdx+0x7bffff],bl
	...
  40b3fe:	00 00                	add    BYTE PTR [rax],al
  40b400:	14 00                	adc    al,0x0
  40b402:	00 00                	add    BYTE PTR [rax],al
  40b404:	4c 04 00             	rex.WR add al,0x0
  40b407:	00 98 9a ff ff 1b    	add    BYTE PTR [rax+0x1bffff9a],bl
	...
  40b415:	00 00                	add    BYTE PTR [rax],al
  40b417:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b41a:	00 00                	add    BYTE PTR [rax],al
  40b41c:	64 04 00             	fs add al,0x0
  40b41f:	00 a0 9a ff ff 26    	add    BYTE PTR [rax+0x26ffff9a],ah
	...
  40b42d:	00 00                	add    BYTE PTR [rax],al
  40b42f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b432:	00 00                	add    BYTE PTR [rax],al
  40b434:	7c 04                	jl     40b43a <__GNU_EH_FRAME_HDR+0x77a>
  40b436:	00 00                	add    BYTE PTR [rax],al
  40b438:	b8 9a ff ff 39       	mov    eax,0x39ffff9a
	...
  40b445:	00 00                	add    BYTE PTR [rax],al
  40b447:	00 44 00 00          	add    BYTE PTR [rax+rax*1+0x0],al
  40b44b:	00 94 04 00 00 e0 9a 	add    BYTE PTR [rsp+rax*1-0x65200000],dl
  40b452:	ff                   	(bad)  
  40b453:	ff 43 02             	inc    DWORD PTR [rbx+0x2]
  40b456:	00 00                	add    BYTE PTR [rax],al
  40b458:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
  40b45b:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b461:	8e 03                	mov    es,WORD PTR [rbx]
  40b463:	44 0e                	rex.R (bad) 
  40b465:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b46b:	8c 05 44 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e44],es        # ffffffff8670c2b5 <_end+0xffffffff860feb15>
  40b471:	06                   	(bad)  
  40b472:	43 0e                	rex.XB (bad) 
  40b474:	38 83 07 03 28 02    	cmp    BYTE PTR [rbx+0x2280307],al
  40b47a:	0e                   	(bad)  
  40b47b:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b47e:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b481:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b484:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b487:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b48a:	08 00                	or     BYTE PTR [rax],al
  40b48c:	00 00                	add    BYTE PTR [rax],al
  40b48e:	00 00                	add    BYTE PTR [rax],al
  40b490:	14 00                	adc    al,0x0
  40b492:	00 00                	add    BYTE PTR [rax],al
  40b494:	dc 04 00             	fadd   QWORD PTR [rax+rax*1]
  40b497:	00 e8                	add    al,ch
  40b499:	9c                   	pushf  
  40b49a:	ff                   	(bad)  
  40b49b:	ff                   	(bad)  
  40b49c:	ef                   	out    dx,eax
  40b49d:	01 00                	add    DWORD PTR [rax],eax
	...
  40b4a7:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
  40b4ab:	00 f4                	add    ah,dh
  40b4ad:	04 00                	add    al,0x0
  40b4af:	00 c0                	add    al,al
  40b4b1:	9e                   	sahf   
  40b4b2:	ff                   	(bad)  
  40b4b3:	ff 68 03             	jmp    FWORD PTR [rax+0x3]
  40b4b6:	00 00                	add    BYTE PTR [rax],al
  40b4b8:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
  40b4bb:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b4c1:	8e 03                	mov    es,WORD PTR [rbx]
  40b4c3:	42 0e                	rex.X (bad) 
  40b4c5:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b4cb:	8c 05 41 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e41],es        # ffffffff8670c312 <_end+0xffffffff860feb72>
  40b4d1:	06                   	(bad)  
  40b4d2:	41 0e                	rex.B (bad) 
  40b4d4:	38 83 07 44 0e 90    	cmp    BYTE PTR [rbx-0x6ff1bbf9],al
  40b4da:	01 03                	add    DWORD PTR [rbx],eax
  40b4dc:	4a 03 0a             	rex.WX add rcx,QWORD PTR [rdx]
  40b4df:	0e                   	(bad)  
  40b4e0:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40b4e3:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b4e6:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b4e9:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b4ec:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b4ef:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b4f2:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b4f5:	00 00                	add    BYTE PTR [rax],al
  40b4f7:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  40b4fa:	00 00                	add    BYTE PTR [rax],al
  40b4fc:	44 05 00 00 e0 a1    	rex.R add eax,0xa1e00000
  40b502:	ff                   	(bad)  
  40b503:	ff 9d 00 00 00 00    	call   FWORD PTR [rbp+0x0]
  40b509:	44 0e                	rex.R (bad) 
  40b50b:	20 02                	and    BYTE PTR [rdx],al
  40b50d:	93                   	xchg   ebx,eax
  40b50e:	0a 0e                	or     cl,BYTE PTR [rsi]
  40b510:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b513:	00 00                	add    BYTE PTR [rax],al
  40b515:	00 00                	add    BYTE PTR [rax],al
  40b517:	00 44 00 00          	add    BYTE PTR [rax+rax*1+0x0],al
  40b51b:	00 64 05 00          	add    BYTE PTR [rbp+rax*1+0x0],ah
  40b51f:	00 60 a2             	add    BYTE PTR [rax-0x5e],ah
  40b522:	ff                   	(bad)  
  40b523:	ff 5a 04             	call   FWORD PTR [rdx+0x4]
  40b526:	00 00                	add    BYTE PTR [rax],al
  40b528:	00 02                	add    BYTE PTR [rdx],al
  40b52a:	4c 0e                	rex.WR (bad) 
  40b52c:	10 8d 02 42 0e 18    	adc    BYTE PTR [rbp+0x180e4202],cl
  40b532:	8c 03                	mov    WORD PTR [rbx],es
  40b534:	44 0e                	rex.R (bad) 
  40b536:	20 86 04 41 0e 28    	and    BYTE PTR [rsi+0x280e4104],al
  40b53c:	83 05 03 fd 02 c3 0e 	add    DWORD PTR [rip+0xffffffffc302fd03],0xe        # ffffffffc343b246 <_end+0xffffffffc2e2daa6>
  40b543:	20 41 c6             	and    BYTE PTR [rcx-0x3a],al
  40b546:	0e                   	(bad)  
  40b547:	18 42 cc             	sbb    BYTE PTR [rdx-0x34],al
  40b54a:	0e                   	(bad)  
  40b54b:	10 42 cd             	adc    BYTE PTR [rdx-0x33],al
  40b54e:	0e                   	(bad)  
  40b54f:	08 6b 0e             	or     BYTE PTR [rbx+0xe],ch
  40b552:	28 83 05 86 04 8c    	sub    BYTE PTR [rbx-0x73fb79fb],al
  40b558:	03 8d 02 00 00 00    	add    ecx,DWORD PTR [rbp+0x2]
  40b55e:	00 00                	add    BYTE PTR [rax],al
  40b560:	2c 00                	sub    al,0x0
  40b562:	00 00                	add    BYTE PTR [rax],al
  40b564:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40b565:	05 00 00 78 a6       	add    eax,0xa6780000
  40b56a:	ff                   	(bad)  
  40b56b:	ff                   	(bad)  
  40b56c:	3d 00 00 00 00       	cmp    eax,0x0
  40b571:	48 0e                	rex.W (bad) 
  40b573:	10 86 02 41 0e 18    	adc    BYTE PTR [rsi+0x180e4102],al
  40b579:	83 03 4c             	add    DWORD PTR [rbx],0x4c
  40b57c:	0e                   	(bad)  
  40b57d:	20 64 0e 18          	and    BYTE PTR [rsi+rcx*1+0x18],ah
  40b581:	41 c3                	rex.B ret 
  40b583:	0e                   	(bad)  
  40b584:	10 41 c6             	adc    BYTE PTR [rcx-0x3a],al
  40b587:	0e                   	(bad)  
  40b588:	08 00                	or     BYTE PTR [rax],al
  40b58a:	00 00                	add    BYTE PTR [rax],al
  40b58c:	00 00                	add    BYTE PTR [rax],al
  40b58e:	00 00                	add    BYTE PTR [rax],al
  40b590:	2c 00                	sub    al,0x0
  40b592:	00 00                	add    BYTE PTR [rax],al
  40b594:	dc 05 00 00 88 a6    	fadd   QWORD PTR [rip+0xffffffffa6880000]        # ffffffffa6c8b59a <_end+0xffffffffa667ddfa>
  40b59a:	ff                   	(bad)  
  40b59b:	ff 53 00             	call   QWORD PTR [rbx+0x0]
  40b59e:	00 00                	add    BYTE PTR [rax],al
  40b5a0:	00 4a 0e             	add    BYTE PTR [rdx+0xe],cl
  40b5a3:	10 86 02 41 0e 18    	adc    BYTE PTR [rsi+0x180e4102],al
  40b5a9:	83 03 4b             	add    DWORD PTR [rbx],0x4b
  40b5ac:	0e                   	(bad)  
  40b5ad:	20 79 0e             	and    BYTE PTR [rcx+0xe],bh
  40b5b0:	18 41 c3             	sbb    BYTE PTR [rcx-0x3d],al
  40b5b3:	0e                   	(bad)  
  40b5b4:	10 41 c6             	adc    BYTE PTR [rcx-0x3a],al
  40b5b7:	0e                   	(bad)  
  40b5b8:	08 00                	or     BYTE PTR [rax],al
  40b5ba:	00 00                	add    BYTE PTR [rax],al
  40b5bc:	00 00                	add    BYTE PTR [rax],al
  40b5be:	00 00                	add    BYTE PTR [rax],al
  40b5c0:	1c 00                	sbb    al,0x0
  40b5c2:	00 00                	add    BYTE PTR [rax],al
  40b5c4:	00 00                	add    BYTE PTR [rax],al
  40b5c6:	00 00                	add    BYTE PTR [rax],al
  40b5c8:	01 7a 50             	add    DWORD PTR [rdx+0x50],edi
  40b5cb:	4c 52                	rex.WR push rdx
  40b5cd:	00 01                	add    BYTE PTR [rcx],al
  40b5cf:	78 10                	js     40b5e1 <__GNU_EH_FRAME_HDR+0x921>
  40b5d1:	07                   	(bad)  
  40b5d2:	03 90 1a 40 00 03    	add    edx,DWORD PTR [rax+0x300401a]
  40b5d8:	1b 0c 07             	sbb    ecx,DWORD PTR [rdi+rax*1]
  40b5db:	08 90 01 00 00 44    	or     BYTE PTR [rax+0x44000001],dl
  40b5e1:	00 00                	add    BYTE PTR [rax],al
  40b5e3:	00 24 00             	add    BYTE PTR [rax+rax*1],ah
  40b5e6:	00 00                	add    BYTE PTR [rax],al
  40b5e8:	98                   	cwde   
  40b5e9:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  40b5ea:	ff                   	(bad)  
  40b5eb:	ff 85 00 00 00 04    	inc    DWORD PTR [rbp+0x4000000]
  40b5f1:	b4 be                	mov    ah,0xbe
  40b5f3:	40 00 42 0e          	add    BYTE PTR [rdx+0xe],al
  40b5f7:	10 8e 02 42 0e 18    	adc    BYTE PTR [rsi+0x180e4202],cl
  40b5fd:	8d 03                	lea    eax,[rbx]
  40b5ff:	45 0e                	rex.RB (bad) 
  40b601:	20 8c 04 41 0e 28 86 	and    BYTE PTR [rsp+rax*1-0x79d7f1bf],cl
  40b608:	05 43 0e 30 83       	add    eax,0x83300e43
  40b60d:	06                   	(bad)  
  40b60e:	02 47 0a             	add    al,BYTE PTR [rdi+0xa]
  40b611:	0e                   	(bad)  
  40b612:	28 41 0e             	sub    BYTE PTR [rcx+0xe],al
  40b615:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b618:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b61b:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b61e:	08 45 0b             	or     BYTE PTR [rbp+0xb],al
  40b621:	00 00                	add    BYTE PTR [rax],al
  40b623:	00 00                	add    BYTE PTR [rax],al
  40b625:	00 00                	add    BYTE PTR [rax],al
  40b627:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b62a:	00 00                	add    BYTE PTR [rax],al
  40b62c:	74 06                	je     40b634 <__GNU_EH_FRAME_HDR+0x974>
  40b62e:	00 00                	add    BYTE PTR [rax],al
  40b630:	e0 a6                	loopne 40b5d8 <__GNU_EH_FRAME_HDR+0x918>
  40b632:	ff                   	(bad)  
  40b633:	ff 04 00             	inc    DWORD PTR [rax+rax*1]
	...
  40b63e:	00 00                	add    BYTE PTR [rax],al
  40b640:	14 00                	adc    al,0x0
  40b642:	00 00                	add    BYTE PTR [rax],al
  40b644:	8c 06                	mov    WORD PTR [rsi],es
  40b646:	00 00                	add    BYTE PTR [rax],al
  40b648:	d8 a6 ff ff 48 00    	fsub   DWORD PTR [rsi+0x48ffff]
	...
  40b656:	00 00                	add    BYTE PTR [rax],al
  40b658:	14 00                	adc    al,0x0
  40b65a:	00 00                	add    BYTE PTR [rax],al
  40b65c:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40b65d:	06                   	(bad)  
  40b65e:	00 00                	add    BYTE PTR [rax],al
  40b660:	10 a7 ff ff 07 00    	adc    BYTE PTR [rdi+0x7ffff],ah
	...
  40b66e:	00 00                	add    BYTE PTR [rax],al
  40b670:	14 00                	adc    al,0x0
  40b672:	00 00                	add    BYTE PTR [rax],al
  40b674:	bc 06 00 00 08       	mov    esp,0x8000006
  40b679:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  40b67a:	ff                   	(bad)  
  40b67b:	ff 0d 00 00 00 00    	dec    DWORD PTR [rip+0x0]        # 40b681 <__GNU_EH_FRAME_HDR+0x9c1>
  40b681:	00 00                	add    BYTE PTR [rax],al
  40b683:	00 00                	add    BYTE PTR [rax],al
  40b685:	00 00                	add    BYTE PTR [rax],al
  40b687:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b68a:	00 00                	add    BYTE PTR [rax],al
  40b68c:	d4                   	(bad)  
  40b68d:	06                   	(bad)  
  40b68e:	00 00                	add    BYTE PTR [rax],al
  40b690:	00 a7 ff ff 0d 00    	add    BYTE PTR [rdi+0xdffff],ah
	...
  40b69e:	00 00                	add    BYTE PTR [rax],al
  40b6a0:	14 00                	adc    al,0x0
  40b6a2:	00 00                	add    BYTE PTR [rax],al
  40b6a4:	ec                   	in     al,dx
  40b6a5:	06                   	(bad)  
  40b6a6:	00 00                	add    BYTE PTR [rax],al
  40b6a8:	f8                   	clc    
  40b6a9:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  40b6aa:	ff                   	(bad)  
  40b6ab:	ff 12                	call   QWORD PTR [rdx]
	...
  40b6b5:	00 00                	add    BYTE PTR [rax],al
  40b6b7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b6ba:	00 00                	add    BYTE PTR [rax],al
  40b6bc:	04 07                	add    al,0x7
  40b6be:	00 00                	add    BYTE PTR [rax],al
  40b6c0:	00 a7 ff ff 12 00    	add    BYTE PTR [rdi+0x12ffff],ah
	...
  40b6ce:	00 00                	add    BYTE PTR [rax],al
  40b6d0:	44 00 00             	add    BYTE PTR [rax],r8b
  40b6d3:	00 1c 07             	add    BYTE PTR [rdi+rax*1],bl
  40b6d6:	00 00                	add    BYTE PTR [rax],al
  40b6d8:	08 a7 ff ff be 04    	or     BYTE PTR [rdi+0x4beffff],ah
  40b6de:	00 00                	add    BYTE PTR [rax],al
  40b6e0:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
  40b6e3:	10 8e 02 42 0e 18    	adc    BYTE PTR [rsi+0x180e4202],cl
  40b6e9:	8d 03                	lea    eax,[rbx]
  40b6eb:	47 0e                	rex.RXB (bad) 
  40b6ed:	20 8c 04 41 0e 28 86 	and    BYTE PTR [rsp+rax*1-0x79d7f1bf],cl
  40b6f4:	05 41 0e 30 83       	add    eax,0x83300e41
  40b6f9:	06                   	(bad)  
  40b6fa:	4b 0e                	rex.WXB (bad) 
  40b6fc:	f0 02 03             	lock add al,BYTE PTR [rbx]
  40b6ff:	98                   	cwde   
  40b700:	04 0a                	add    al,0xa
  40b702:	0e                   	(bad)  
  40b703:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b706:	28 41 0e             	sub    BYTE PTR [rcx+0xe],al
  40b709:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b70c:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b70f:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b712:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b715:	00 00                	add    BYTE PTR [rax],al
  40b717:	00 2c 00             	add    BYTE PTR [rax+rax*1],ch
  40b71a:	00 00                	add    BYTE PTR [rax],al
  40b71c:	64 07                	fs (bad) 
  40b71e:	00 00                	add    BYTE PTR [rax],al
  40b720:	80 ab ff ff 66 00 00 	sub    BYTE PTR [rbx+0x66ffff],0x0
  40b727:	00 00                	add    BYTE PTR [rax],al
  40b729:	47 0e                	rex.RXB (bad) 
  40b72b:	10 8c 02 45 0e 18 86 	adc    BYTE PTR [rdx+rax*1-0x79e7f1bb],cl
  40b732:	03 44 0e 20          	add    eax,DWORD PTR [rsi+rcx*1+0x20]
  40b736:	83 04 02 51          	add    DWORD PTR [rdx+rax*1],0x51
  40b73a:	c3                   	ret    
  40b73b:	0e                   	(bad)  
  40b73c:	18 41 c6             	sbb    BYTE PTR [rcx-0x3a],al
  40b73f:	0e                   	(bad)  
  40b740:	10 42 cc             	adc    BYTE PTR [rdx-0x34],al
  40b743:	0e                   	(bad)  
  40b744:	08 00                	or     BYTE PTR [rax],al
  40b746:	00 00                	add    BYTE PTR [rax],al
  40b748:	2c 00                	sub    al,0x0
  40b74a:	00 00                	add    BYTE PTR [rax],al
  40b74c:	94                   	xchg   esp,eax
  40b74d:	07                   	(bad)  
  40b74e:	00 00                	add    BYTE PTR [rax],al
  40b750:	c0 ab ff ff 64 00 00 	shr    BYTE PTR [rbx+0x64ffff],0x0
  40b757:	00 00                	add    BYTE PTR [rax],al
  40b759:	42 0e                	rex.X (bad) 
  40b75b:	10 8c 02 45 0e 18 86 	adc    BYTE PTR [rdx+rax*1-0x79e7f1bb],cl
  40b762:	03 41 0e             	add    eax,DWORD PTR [rcx+0xe]
  40b765:	20 83 04 02 58 0e    	and    BYTE PTR [rbx+0xe580204],al
  40b76b:	18 41 0e             	sbb    BYTE PTR [rcx+0xe],al
  40b76e:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b771:	08 00                	or     BYTE PTR [rax],al
  40b773:	00 00                	add    BYTE PTR [rax],al
  40b775:	00 00                	add    BYTE PTR [rax],al
  40b777:	00 2c 00             	add    BYTE PTR [rax+rax*1],ch
  40b77a:	00 00                	add    BYTE PTR [rax],al
  40b77c:	c4                   	(bad)  
  40b77d:	07                   	(bad)  
  40b77e:	00 00                	add    BYTE PTR [rax],al
  40b780:	00 ac ff ff 8b 03 00 	add    BYTE PTR [rdi+rdi*8+0x38bff],ch
  40b787:	00 00                	add    BYTE PTR [rax],al
  40b789:	41 0e                	rex.B (bad) 
  40b78b:	10 86 02 41 0e 18    	adc    BYTE PTR [rsi+0x180e4102],al
  40b791:	83 03 4c             	add    DWORD PTR [rbx],0x4c
  40b794:	0e                   	(bad)  
  40b795:	20 03                	and    BYTE PTR [rbx],al
  40b797:	fd                   	std    
  40b798:	01 0a                	add    DWORD PTR [rdx],ecx
  40b79a:	0e                   	(bad)  
  40b79b:	18 41 0e             	sbb    BYTE PTR [rcx+0xe],al
  40b79e:	10 41 0e             	adc    BYTE PTR [rcx+0xe],al
  40b7a1:	08 43 0b             	or     BYTE PTR [rbx+0xb],al
  40b7a4:	00 00                	add    BYTE PTR [rax],al
  40b7a6:	00 00                	add    BYTE PTR [rax],al
  40b7a8:	1c 00                	sbb    al,0x0
  40b7aa:	00 00                	add    BYTE PTR [rax],al
  40b7ac:	f4                   	hlt    
  40b7ad:	07                   	(bad)  
  40b7ae:	00 00                	add    BYTE PTR [rax],al
  40b7b0:	60                   	(bad)  
  40b7b1:	af                   	scas   eax,DWORD PTR es:[rdi]
  40b7b2:	ff                   	(bad)  
  40b7b3:	ff 2b                	jmp    FWORD PTR [rbx]
  40b7b5:	02 00                	add    al,BYTE PTR [rax]
  40b7b7:	00 00                	add    BYTE PTR [rax],al
  40b7b9:	41 0e                	rex.B (bad) 
  40b7bb:	10 83 02 02 ad 0a    	adc    BYTE PTR [rbx+0xaad0202],al
  40b7c1:	0e                   	(bad)  
  40b7c2:	08 4a 0b             	or     BYTE PTR [rdx+0xb],cl
  40b7c5:	00 00                	add    BYTE PTR [rax],al
  40b7c7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b7ca:	00 00                	add    BYTE PTR [rax],al
  40b7cc:	14 08                	adc    al,0x8
  40b7ce:	00 00                	add    BYTE PTR [rax],al
  40b7d0:	70 b1                	jo     40b783 <__GNU_EH_FRAME_HDR+0xac3>
  40b7d2:	ff                   	(bad)  
  40b7d3:	ff                   	(bad)  
  40b7d4:	e8 00 00 00 00       	call   40b7d9 <__GNU_EH_FRAME_HDR+0xb19>
  40b7d9:	00 00                	add    BYTE PTR [rax],al
  40b7db:	00 00                	add    BYTE PTR [rax],al
  40b7dd:	00 00                	add    BYTE PTR [rax],al
  40b7df:	00 54 00 00          	add    BYTE PTR [rax+rax*1+0x0],dl
  40b7e3:	00 24 02             	add    BYTE PTR [rdx+rax*1],ah
  40b7e6:	00 00                	add    BYTE PTR [rax],al
  40b7e8:	48 b2 ff             	rex.W mov dl,0xff
  40b7eb:	ff 22                	jmp    QWORD PTR [rdx]
  40b7ed:	06                   	(bad)  
  40b7ee:	00 00                	add    BYTE PTR [rax],al
  40b7f0:	04 c1                	add    al,0xc1
  40b7f2:	be 40 00 42 0e       	mov    esi,0xe420040
  40b7f7:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b7fd:	8e 03                	mov    es,WORD PTR [rbx]
  40b7ff:	42 0e                	rex.X (bad) 
  40b801:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b807:	8c 05 44 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e44],es        # ffffffff8670c651 <_end+0xffffffff860feeb1>
  40b80d:	06                   	(bad)  
  40b80e:	41 0e                	rex.B (bad) 
  40b810:	38 83 07 4a 0e a0    	cmp    BYTE PTR [rbx-0x5ff1b5f9],al
  40b816:	04 03                	add    al,0x3
  40b818:	b2 03                	mov    dl,0x3
  40b81a:	0a 0e                	or     cl,BYTE PTR [rsi]
  40b81c:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40b81f:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b822:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b825:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b828:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b82b:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b82e:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b831:	00 00                	add    BYTE PTR [rax],al
  40b833:	00 00                	add    BYTE PTR [rax],al
  40b835:	00 00                	add    BYTE PTR [rax],al
  40b837:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40b83a:	00 00                	add    BYTE PTR [rax],al
  40b83c:	84 08                	test   BYTE PTR [rax],cl
  40b83e:	00 00                	add    BYTE PTR [rax],al
  40b840:	20 b8 ff ff 37 01    	and    BYTE PTR [rax+0x137ffff],bh
	...
  40b84e:	00 00                	add    BYTE PTR [rax],al
  40b850:	14 00                	adc    al,0x0
  40b852:	00 00                	add    BYTE PTR [rax],al
  40b854:	9c                   	pushf  
  40b855:	08 00                	or     BYTE PTR [rax],al
  40b857:	00 48 b9             	add    BYTE PTR [rax-0x47],cl
  40b85a:	ff                   	(bad)  
  40b85b:	ff 23                	jmp    QWORD PTR [rbx]
	...
  40b865:	00 00                	add    BYTE PTR [rax],al
  40b867:	00 54 00 00          	add    BYTE PTR [rax+rax*1+0x0],dl
  40b86b:	00 ac 02 00 00 60 b9 	add    BYTE PTR [rdx+rax*1-0x46a00000],ch
  40b872:	ff                   	(bad)  
  40b873:	ff                   	(bad)  
  40b874:	ea                   	(bad)  
  40b875:	02 00                	add    al,BYTE PTR [rax]
  40b877:	00 04 06             	add    BYTE PTR [rsi+rax*1],al
  40b87a:	bf 40 00 42 0e       	mov    edi,0xe420040
  40b87f:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b885:	8e 03                	mov    es,WORD PTR [rbx]
  40b887:	45 0e                	rex.RB (bad) 
  40b889:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b88f:	8c 05 41 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e41],es        # ffffffff8670c6d6 <_end+0xffffffff860fef36>
  40b895:	06                   	(bad)  
  40b896:	41 0e                	rex.B (bad) 
  40b898:	38 83 07 44 0e 80    	cmp    BYTE PTR [rbx-0x7ff1bbf9],al
  40b89e:	01 03                	add    DWORD PTR [rbx],eax
  40b8a0:	e2 01                	loop   40b8a3 <__GNU_EH_FRAME_HDR+0xbe3>
  40b8a2:	0a 0e                	or     cl,BYTE PTR [rsi]
  40b8a4:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40b8a7:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b8aa:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b8ad:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b8b0:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b8b3:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b8b6:	08 43 0b             	or     BYTE PTR [rbx+0xb],al
  40b8b9:	00 00                	add    BYTE PTR [rax],al
  40b8bb:	00 00                	add    BYTE PTR [rax],al
  40b8bd:	00 00                	add    BYTE PTR [rax],al
  40b8bf:	00 24 00             	add    BYTE PTR [rax+rax*1],ah
  40b8c2:	00 00                	add    BYTE PTR [rax],al
  40b8c4:	0c 09                	or     al,0x9
  40b8c6:	00 00                	add    BYTE PTR [rax],al
  40b8c8:	f8                   	clc    
  40b8c9:	bb ff ff c3 00       	mov    ebx,0xc3ffff
  40b8ce:	00 00                	add    BYTE PTR [rax],al
  40b8d0:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  40b8d3:	10 86 02 41 0e 18    	adc    BYTE PTR [rsi+0x180e4102],al
  40b8d9:	83 03 56             	add    DWORD PTR [rbx],0x56
  40b8dc:	0e                   	(bad)  
  40b8dd:	20 02                	and    BYTE PTR [rdx],al
  40b8df:	95                   	xchg   ebp,eax
  40b8e0:	0e                   	(bad)  
  40b8e1:	18 4b 0e             	sbb    BYTE PTR [rbx+0xe],cl
  40b8e4:	10 41 0e             	adc    BYTE PTR [rcx+0xe],al
  40b8e7:	08 54 00 00          	or     BYTE PTR [rax+rax*1+0x0],dl
  40b8eb:	00 2c 03             	add    BYTE PTR [rbx+rax*1],ch
  40b8ee:	00 00                	add    BYTE PTR [rax],al
  40b8f0:	a0 bc ff ff af 05 00 	movabs al,ds:0x4000005afffffbc
  40b8f7:	00 04 
  40b8f9:	16                   	(bad)  
  40b8fa:	bf 40 00 42 0e       	mov    edi,0xe420040
  40b8ff:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b905:	8e 03                	mov    es,WORD PTR [rbx]
  40b907:	42 0e                	rex.X (bad) 
  40b909:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b90f:	8c 05 41 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e41],es        # ffffffff8670c756 <_end+0xffffffff860fefb6>
  40b915:	06                   	(bad)  
  40b916:	41 0e                	rex.B (bad) 
  40b918:	38 83 07 4a 0e d0    	cmp    BYTE PTR [rbx-0x2ff1b5f9],al
  40b91e:	01 03                	add    DWORD PTR [rbx],eax
  40b920:	fd                   	std    
  40b921:	03 0a                	add    ecx,DWORD PTR [rdx]
  40b923:	0e                   	(bad)  
  40b924:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40b927:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40b92a:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b92d:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b930:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b933:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b936:	08 45 0b             	or     BYTE PTR [rbp+0xb],al
  40b939:	00 00                	add    BYTE PTR [rax],al
  40b93b:	00 00                	add    BYTE PTR [rax],al
  40b93d:	00 00                	add    BYTE PTR [rax],al
  40b93f:	00 24 00             	add    BYTE PTR [rax+rax*1],ah
  40b942:	00 00                	add    BYTE PTR [rax],al
  40b944:	8c 09                	mov    WORD PTR [rcx],cs
  40b946:	00 00                	add    BYTE PTR [rax],al
  40b948:	68 d2 ff ff 6c       	push   0x6cffffd2
  40b94d:	01 00                	add    DWORD PTR [rax],eax
  40b94f:	00 00                	add    BYTE PTR [rax],al
  40b951:	41 0e                	rex.B (bad) 
  40b953:	10 86 02 4c 0d 06    	adc    BYTE PTR [rsi+0x60d4c02],al
  40b959:	45 8d 03             	lea    r8d,[r11]
  40b95c:	8c 04 83             	mov    WORD PTR [rbx+rax*4],es
  40b95f:	05 02 f3 0a 0c       	add    eax,0xc0af302
  40b964:	07                   	(bad)  
  40b965:	08 4b 0b             	or     BYTE PTR [rbx+0xb],cl
  40b968:	2c 00                	sub    al,0x0
  40b96a:	00 00                	add    BYTE PTR [rax],al
  40b96c:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40b96d:	03 00                	add    eax,DWORD PTR [rax]
  40b96f:	00 d0                	add    al,dl
  40b971:	c1 ff ff             	sar    edi,0xff
  40b974:	5f                   	pop    rdi
  40b975:	01 00                	add    DWORD PTR [rax],eax
  40b977:	00 04 30             	add    BYTE PTR [rax+rsi*1],al
  40b97a:	bf 40 00 41 0e       	mov    edi,0xe410040
  40b97f:	10 86 02 41 0e 18    	adc    BYTE PTR [rsi+0x180e4102],al
  40b985:	83 03 44             	add    DWORD PTR [rbx],0x44
  40b988:	0e                   	(bad)  
  40b989:	70 6d                	jo     40b9f8 <__GNU_EH_FRAME_HDR+0xd38>
  40b98b:	0a 0e                	or     cl,BYTE PTR [rsi]
  40b98d:	18 41 0e             	sbb    BYTE PTR [rcx+0xe],al
  40b990:	10 41 0e             	adc    BYTE PTR [rcx+0xe],al
  40b993:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40b996:	00 00                	add    BYTE PTR [rax],al
  40b998:	44 00 00             	add    BYTE PTR [rax],r8b
  40b99b:	00 e4                	add    ah,ah
  40b99d:	09 00                	or     DWORD PTR [rax],eax
  40b99f:	00 00                	add    BYTE PTR [rax],al
  40b9a1:	c3                   	ret    
  40b9a2:	ff                   	(bad)  
  40b9a3:	ff 89 00 00 00 00    	dec    DWORD PTR [rcx+0x0]
  40b9a9:	42 0e                	rex.X (bad) 
  40b9ab:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b9b1:	8e 03                	mov    es,WORD PTR [rbx]
  40b9b3:	45 0e                	rex.RB (bad) 
  40b9b5:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40b9bb:	8c 05 43 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e43],es        # ffffffff8670c804 <_end+0xffffffff860ff064>
  40b9c1:	06                   	(bad)  
  40b9c2:	41 0e                	rex.B (bad) 
  40b9c4:	38 83 07 4c 0e 40    	cmp    BYTE PTR [rbx+0x400e4c07],al
  40b9ca:	02 60 0e             	add    ah,BYTE PTR [rax+0xe]
  40b9cd:	38 44 0e 30          	cmp    BYTE PTR [rsi+rcx*1+0x30],al
  40b9d1:	41 0e                	rex.B (bad) 
  40b9d3:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40b9d6:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40b9d9:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40b9dc:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40b9df:	08 44 00 00          	or     BYTE PTR [rax+rax*1+0x0],al
  40b9e3:	00 2c 0a             	add    BYTE PTR [rdx+rcx*1],ch
  40b9e6:	00 00                	add    BYTE PTR [rax],al
  40b9e8:	48 c3                	rex.W ret 
  40b9ea:	ff                   	(bad)  
  40b9eb:	ff 89 00 00 00 00    	dec    DWORD PTR [rcx+0x0]
  40b9f1:	42 0e                	rex.X (bad) 
  40b9f3:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40b9f9:	8e 03                	mov    es,WORD PTR [rbx]
  40b9fb:	45 0e                	rex.RB (bad) 
  40b9fd:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40ba03:	8c 05 43 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e43],es        # ffffffff8670c84c <_end+0xffffffff860ff0ac>
  40ba09:	06                   	(bad)  
  40ba0a:	41 0e                	rex.B (bad) 
  40ba0c:	38 83 07 4c 0e 40    	cmp    BYTE PTR [rbx+0x400e4c07],al
  40ba12:	02 60 0e             	add    ah,BYTE PTR [rax+0xe]
  40ba15:	38 44 0e 30          	cmp    BYTE PTR [rsi+rcx*1+0x30],al
  40ba19:	41 0e                	rex.B (bad) 
  40ba1b:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40ba1e:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40ba21:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40ba24:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40ba27:	08 4c 00 00          	or     BYTE PTR [rax+rax*1+0x0],cl
  40ba2b:	00 74 0a 00          	add    BYTE PTR [rdx+rcx*1+0x0],dh
  40ba2f:	00 90 c3 ff ff f7    	add    BYTE PTR [rax-0x800003d],dl
  40ba35:	00 00                	add    BYTE PTR [rax],al
  40ba37:	00 00                	add    BYTE PTR [rax],al
  40ba39:	42 0e                	rex.X (bad) 
  40ba3b:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40ba41:	8e 03                	mov    es,WORD PTR [rbx]
  40ba43:	45 0e                	rex.RB (bad) 
  40ba45:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40ba4b:	8c 05 43 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e43],es        # ffffffff8670c894 <_end+0xffffffff860ff0f4>
  40ba51:	06                   	(bad)  
  40ba52:	41 0e                	rex.B (bad) 
  40ba54:	38 83 07 4f 0e 70    	cmp    BYTE PTR [rbx+0x700e4f07],al
  40ba5a:	02 c9                	add    cl,cl
  40ba5c:	0a 0e                	or     cl,BYTE PTR [rsi]
  40ba5e:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40ba61:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40ba64:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40ba67:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40ba6a:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40ba6d:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40ba70:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40ba73:	00 00                	add    BYTE PTR [rax],al
  40ba75:	00 00                	add    BYTE PTR [rax],al
  40ba77:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
  40ba7b:	00 c4                	add    ah,al
  40ba7d:	0a 00                	or     al,BYTE PTR [rax]
  40ba7f:	00 40 c4             	add    BYTE PTR [rax-0x3c],al
  40ba82:	ff                   	(bad)  
  40ba83:	ff a3 01 00 00 00    	jmp    QWORD PTR [rbx+0x1]
  40ba89:	42 0e                	rex.X (bad) 
  40ba8b:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40ba91:	8e 03                	mov    es,WORD PTR [rbx]
  40ba93:	45 0e                	rex.RB (bad) 
  40ba95:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40ba9b:	8c 05 44 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e44],es        # ffffffff8670c8e5 <_end+0xffffffff860ff145>
  40baa1:	06                   	(bad)  
  40baa2:	41 0e                	rex.B (bad) 
  40baa4:	38 83 07 4a 0e 80    	cmp    BYTE PTR [rbx-0x7ff1b5f9],al
  40baaa:	01 03                	add    DWORD PTR [rbx],eax
  40baac:	79 01                	jns    40baaf <__GNU_EH_FRAME_HDR+0xdef>
  40baae:	0a 0e                	or     cl,BYTE PTR [rsi]
  40bab0:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40bab3:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40bab6:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40bab9:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40babc:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40babf:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bac2:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40bac5:	00 00                	add    BYTE PTR [rax],al
  40bac7:	00 3c 00             	add    BYTE PTR [rax+rax*1],bh
  40baca:	00 00                	add    BYTE PTR [rax],al
  40bacc:	0c 05                	or     al,0x5
  40bace:	00 00                	add    BYTE PTR [rax],al
  40bad0:	a0 c5 ff ff c2 00 00 	movabs al,ds:0x4000000c2ffffc5
  40bad7:	00 04 
  40bad9:	49 bf 40 00 42 0e 10 	movabs r15,0x42028d100e420040
  40bae0:	8d 02 42 
  40bae3:	0e                   	(bad)  
  40bae4:	18 8c 03 41 0e 20 86 	sbb    BYTE PTR [rbx+rax*1-0x79dff1bf],cl
  40baeb:	04 41                	add    al,0x41
  40baed:	0e                   	(bad)  
  40baee:	28 83 05 4d 0e 30    	sub    BYTE PTR [rbx+0x300e4d05],al
  40baf4:	02 5c 0a 0e          	add    bl,BYTE PTR [rdx+rcx*1+0xe]
  40baf8:	28 44 0e 20          	sub    BYTE PTR [rsi+rcx*1+0x20],al
  40bafc:	41 0e                	rex.B (bad) 
  40bafe:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bb01:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bb04:	08 48 0b             	or     BYTE PTR [rax+0xb],cl
  40bb07:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
  40bb0b:	00 54 0b 00          	add    BYTE PTR [rbx+rcx*1+0x0],dl
  40bb0f:	00 30                	add    BYTE PTR [rax],dh
  40bb11:	c6                   	(bad)  
  40bb12:	ff                   	(bad)  
  40bb13:	ff                   	(bad)  
  40bb14:	bf 01 00 00 00       	mov    edi,0x1
  40bb19:	42 0e                	rex.X (bad) 
  40bb1b:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40bb21:	8e 03                	mov    es,WORD PTR [rbx]
  40bb23:	45 0e                	rex.RB (bad) 
  40bb25:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40bb2b:	8c 05 44 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e44],es        # ffffffff8670c975 <_end+0xffffffff860ff1d5>
  40bb31:	06                   	(bad)  
  40bb32:	41 0e                	rex.B (bad) 
  40bb34:	38 83 07 4c 0e 80    	cmp    BYTE PTR [rbx-0x7ff1b3f9],al
  40bb3a:	01 03                	add    DWORD PTR [rbx],eax
  40bb3c:	93                   	xchg   ebx,eax
  40bb3d:	01 0a                	add    DWORD PTR [rdx],ecx
  40bb3f:	0e                   	(bad)  
  40bb40:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40bb43:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40bb46:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40bb49:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40bb4c:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bb4f:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bb52:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40bb55:	00 00                	add    BYTE PTR [rax],al
  40bb57:	00 3c 00             	add    BYTE PTR [rax+rax*1],bh
  40bb5a:	00 00                	add    BYTE PTR [rax],al
  40bb5c:	9c                   	pushf  
  40bb5d:	05 00 00 a0 c7       	add    eax,0xc7a00000
  40bb62:	ff                   	(bad)  
  40bb63:	ff c2                	inc    edx
  40bb65:	00 00                	add    BYTE PTR [rax],al
  40bb67:	00 04 5c             	add    BYTE PTR [rsp+rbx*2],al
  40bb6a:	bf 40 00 42 0e       	mov    edi,0xe420040
  40bb6f:	10 8d 02 42 0e 18    	adc    BYTE PTR [rbp+0x180e4202],cl
  40bb75:	8c 03                	mov    WORD PTR [rbx],es
  40bb77:	41 0e                	rex.B (bad) 
  40bb79:	20 86 04 41 0e 28    	and    BYTE PTR [rsi+0x280e4104],al
  40bb7f:	83 05 4d 0e 30 02 5c 	add    DWORD PTR [rip+0x2300e4d],0x5c        # 270c9d3 <_end+0x20ff233>
  40bb86:	0a 0e                	or     cl,BYTE PTR [rsi]
  40bb88:	28 44 0e 20          	sub    BYTE PTR [rsi+rcx*1+0x20],al
  40bb8c:	41 0e                	rex.B (bad) 
  40bb8e:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bb91:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bb94:	08 48 0b             	or     BYTE PTR [rax+0xb],cl
  40bb97:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
  40bb9b:	00 e4                	add    ah,ah
  40bb9d:	0b 00                	or     eax,DWORD PTR [rax]
  40bb9f:	00 30                	add    BYTE PTR [rax],dh
  40bba1:	c8 ff ff bf          	enter  0xffff,0xbf
  40bba5:	01 00                	add    DWORD PTR [rax],eax
  40bba7:	00 00                	add    BYTE PTR [rax],al
  40bba9:	42 0e                	rex.X (bad) 
  40bbab:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40bbb1:	8e 03                	mov    es,WORD PTR [rbx]
  40bbb3:	45 0e                	rex.RB (bad) 
  40bbb5:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40bbbb:	8c 05 44 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e44],es        # ffffffff8670ca05 <_end+0xffffffff860ff265>
  40bbc1:	06                   	(bad)  
  40bbc2:	41 0e                	rex.B (bad) 
  40bbc4:	38 83 07 4c 0e 80    	cmp    BYTE PTR [rbx-0x7ff1b3f9],al
  40bbca:	01 03                	add    DWORD PTR [rbx],eax
  40bbcc:	93                   	xchg   ebx,eax
  40bbcd:	01 0a                	add    DWORD PTR [rdx],ecx
  40bbcf:	0e                   	(bad)  
  40bbd0:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40bbd3:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40bbd6:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40bbd9:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40bbdc:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bbdf:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bbe2:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40bbe5:	00 00                	add    BYTE PTR [rax],al
  40bbe7:	00 3c 00             	add    BYTE PTR [rax+rax*1],bh
  40bbea:	00 00                	add    BYTE PTR [rax],al
  40bbec:	2c 06                	sub    al,0x6
  40bbee:	00 00                	add    BYTE PTR [rax],al
  40bbf0:	a0 c9 ff ff c2 00 00 	movabs al,ds:0x4000000c2ffffc9
  40bbf7:	00 04 
  40bbf9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  40bbfa:	bf 40 00 42 0e       	mov    edi,0xe420040
  40bbff:	10 8d 02 42 0e 18    	adc    BYTE PTR [rbp+0x180e4202],cl
  40bc05:	8c 03                	mov    WORD PTR [rbx],es
  40bc07:	41 0e                	rex.B (bad) 
  40bc09:	20 86 04 41 0e 28    	and    BYTE PTR [rsi+0x280e4104],al
  40bc0f:	83 05 4d 0e 30 02 5c 	add    DWORD PTR [rip+0x2300e4d],0x5c        # 270ca63 <_end+0x20ff2c3>
  40bc16:	0a 0e                	or     cl,BYTE PTR [rsi]
  40bc18:	28 44 0e 20          	sub    BYTE PTR [rsi+rcx*1+0x20],al
  40bc1c:	41 0e                	rex.B (bad) 
  40bc1e:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bc21:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bc24:	08 48 0b             	or     BYTE PTR [rax+0xb],cl
  40bc27:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
  40bc2b:	00 6c 06 00          	add    BYTE PTR [rsi+rax*1+0x0],ch
  40bc2f:	00 30                	add    BYTE PTR [rax],dh
  40bc31:	ca ff ff             	retf   0xffff
  40bc34:	49 01 00             	add    QWORD PTR [r8],rax
  40bc37:	00 04 82             	add    BYTE PTR [rdx+rax*4],al
  40bc3a:	bf 40 00 42 0e       	mov    edi,0xe420040
  40bc3f:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40bc45:	8e 03                	mov    es,WORD PTR [rbx]
  40bc47:	42 0e                	rex.X (bad) 
  40bc49:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40bc4f:	8c 05 41 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e41],es        # ffffffff8670ca96 <_end+0xffffffff860ff2f6>
  40bc55:	06                   	(bad)  
  40bc56:	41 0e                	rex.B (bad) 
  40bc58:	38 83 07 47 0e 60    	cmp    BYTE PTR [rbx+0x600e4707],al
  40bc5e:	02 e2                	add    ah,dl
  40bc60:	0a 0e                	or     cl,BYTE PTR [rsi]
  40bc62:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40bc65:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40bc68:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40bc6b:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40bc6e:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bc71:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bc74:	08 43 0b             	or     BYTE PTR [rbx+0xb],al
  40bc77:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
  40bc7b:	00 bc 06 00 00 30 cb 	add    BYTE PTR [rsi+rax*1-0x34d00000],bh
  40bc82:	ff                   	(bad)  
  40bc83:	ff 49 01             	dec    DWORD PTR [rcx+0x1]
  40bc86:	00 00                	add    BYTE PTR [rax],al
  40bc88:	04 95                	add    al,0x95
  40bc8a:	bf 40 00 42 0e       	mov    edi,0xe420040
  40bc8f:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40bc95:	8e 03                	mov    es,WORD PTR [rbx]
  40bc97:	42 0e                	rex.X (bad) 
  40bc99:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40bc9f:	8c 05 41 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e41],es        # ffffffff8670cae6 <_end+0xffffffff860ff346>
  40bca5:	06                   	(bad)  
  40bca6:	41 0e                	rex.B (bad) 
  40bca8:	38 83 07 47 0e 60    	cmp    BYTE PTR [rbx+0x600e4707],al
  40bcae:	02 e2                	add    ah,dl
  40bcb0:	0a 0e                	or     cl,BYTE PTR [rsi]
  40bcb2:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40bcb5:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40bcb8:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40bcbb:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40bcbe:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bcc1:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bcc4:	08 43 0b             	or     BYTE PTR [rbx+0xb],al
  40bcc7:	00 54 00 00          	add    BYTE PTR [rax+rax*1+0x0],dl
  40bccb:	00 0c 07             	add    BYTE PTR [rdi+rax*1],cl
  40bcce:	00 00                	add    BYTE PTR [rax],al
  40bcd0:	30 cc                	xor    ah,cl
  40bcd2:	ff                   	(bad)  
  40bcd3:	ff 4e 02             	dec    DWORD PTR [rsi+0x2]
  40bcd6:	00 00                	add    BYTE PTR [rax],al
  40bcd8:	04 a8                	add    al,0xa8
  40bcda:	bf 40 00 42 0e       	mov    edi,0xe420040
  40bcdf:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40bce5:	8e 03                	mov    es,WORD PTR [rbx]
  40bce7:	42 0e                	rex.X (bad) 
  40bce9:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40bcef:	8c 05 41 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e41],es        # ffffffff8670cb36 <_end+0xffffffff860ff396>
  40bcf5:	06                   	(bad)  
  40bcf6:	41 0e                	rex.B (bad) 
  40bcf8:	38 83 07 47 0e 80    	cmp    BYTE PTR [rbx-0x7ff1b8f9],al
  40bcfe:	01 03                	add    DWORD PTR [rbx],eax
  40bd00:	dd 01                	fld    QWORD PTR [rcx]
  40bd02:	0a 0e                	or     cl,BYTE PTR [rsi]
  40bd04:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40bd07:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40bd0a:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40bd0d:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40bd10:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bd13:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bd16:	08 48 0b             	or     BYTE PTR [rax+0xb],cl
  40bd19:	00 00                	add    BYTE PTR [rax],al
  40bd1b:	00 00                	add    BYTE PTR [rax],al
  40bd1d:	00 00                	add    BYTE PTR [rax],al
  40bd1f:	00 24 00             	add    BYTE PTR [rax+rax*1],ah
  40bd22:	00 00                	add    BYTE PTR [rax],al
  40bd24:	64 07                	fs (bad) 
  40bd26:	00 00                	add    BYTE PTR [rax],al
  40bd28:	f8                   	clc    
  40bd29:	cf                   	iret   
  40bd2a:	ff                   	(bad)  
  40bd2b:	ff 9e 00 00 00 04    	call   FWORD PTR [rsi+0x4000000]
  40bd31:	bb bf 40 00 41       	mov    ebx,0x410040bf
  40bd36:	0e                   	(bad)  
  40bd37:	10 83 02 47 0e 40    	adc    BYTE PTR [rbx+0x400e4702],al
  40bd3d:	02 86 0a 0e 10 41    	add    al,BYTE PTR [rsi+0x41100e0a]
  40bd43:	0e                   	(bad)  
  40bd44:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40bd47:	00 2c 00             	add    BYTE PTR [rax+rax*1],ch
  40bd4a:	00 00                	add    BYTE PTR [rax],al
  40bd4c:	8c 07                	mov    WORD PTR [rdi],es
  40bd4e:	00 00                	add    BYTE PTR [rax],al
  40bd50:	70 d0                	jo     40bd22 <__GNU_EH_FRAME_HDR+0x1062>
  40bd52:	ff                   	(bad)  
  40bd53:	ff                   	(bad)  
  40bd54:	fe 08                	dec    BYTE PTR [rax]
  40bd56:	00 00                	add    BYTE PTR [rax],al
  40bd58:	04 bf                	add    al,0xbf
  40bd5a:	bf 40 00 41 0e       	mov    edi,0xe410040
  40bd5f:	10 86 02 41 0e 18    	adc    BYTE PTR [rsi+0x180e4102],al
  40bd65:	83 03 4f             	add    DWORD PTR [rbx],0x4f
  40bd68:	0e                   	(bad)  
  40bd69:	50                   	push   rax
  40bd6a:	03 b7 01 0a 0e 18    	add    esi,DWORD PTR [rdi+0x180e0a01]
  40bd70:	41 0e                	rex.B (bad) 
  40bd72:	10 41 0e             	adc    BYTE PTR [rcx+0xe],al
  40bd75:	08 46 0b             	or     BYTE PTR [rsi+0xb],al
  40bd78:	4c 00 00             	rex.WR add BYTE PTR [rax],r8b
  40bd7b:	00 bc 07 00 00 40 d9 	add    BYTE PTR [rdi+rax*1-0x26c00000],bh
  40bd82:	ff                   	(bad)  
  40bd83:	ff 8e 00 00 00 04    	dec    DWORD PTR [rsi+0x4000000]
  40bd89:	da bf 40 00 42 0e    	fidivr DWORD PTR [rdi+0xe420040]
  40bd8f:	10 8d 02 42 0e 18    	adc    BYTE PTR [rbp+0x180e4202],cl
  40bd95:	8c 03                	mov    WORD PTR [rbx],es
  40bd97:	44 0e                	rex.R (bad) 
  40bd99:	20 86 04 41 0e 28    	and    BYTE PTR [rsi+0x280e4104],al
  40bd9f:	83 05 47 0e 30 64 0a 	add    DWORD PTR [rip+0x64300e47],0xa        # 6470cbed <_end+0x640ff44d>
  40bda6:	0e                   	(bad)  
  40bda7:	28 41 0e             	sub    BYTE PTR [rcx+0xe],al
  40bdaa:	20 41 0e             	and    BYTE PTR [rcx+0xe],al
  40bdad:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bdb0:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bdb3:	08 46 0b             	or     BYTE PTR [rsi+0xb],al
  40bdb6:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  40bdb7:	0a 0e                	or     cl,BYTE PTR [rsi]
  40bdb9:	28 41 0e             	sub    BYTE PTR [rcx+0xe],al
  40bdbc:	20 41 0e             	and    BYTE PTR [rcx+0xe],al
  40bdbf:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40bdc2:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bdc5:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40bdc8:	2c 00                	sub    al,0x0
  40bdca:	00 00                	add    BYTE PTR [rax],al
  40bdcc:	14 0e                	adc    al,0xe
  40bdce:	00 00                	add    BYTE PTR [rax],al
  40bdd0:	80 d9 ff             	sbb    cl,0xff
  40bdd3:	ff                   	(bad)  
  40bdd4:	7d 00                	jge    40bdd6 <__GNU_EH_FRAME_HDR+0x1116>
  40bdd6:	00 00                	add    BYTE PTR [rax],al
  40bdd8:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
  40bddb:	10 8c 02 41 0e 18 86 	adc    BYTE PTR [rdx+rax*1-0x79e7f1bf],cl
  40bde2:	03 43 0e             	add    eax,DWORD PTR [rbx+0xe]
  40bde5:	20 83 04 02 60 0a    	and    BYTE PTR [rbx+0xa600204],al
  40bdeb:	0e                   	(bad)  
  40bdec:	18 41 0e             	sbb    BYTE PTR [rcx+0xe],al
  40bdef:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40bdf2:	08 47 0b             	or     BYTE PTR [rdi+0xb],al
  40bdf5:	00 00                	add    BYTE PTR [rax],al
  40bdf7:	00 3c 00             	add    BYTE PTR [rax+rax*1],bh
  40bdfa:	00 00                	add    BYTE PTR [rax],al
  40bdfc:	3c 08                	cmp    al,0x8
  40bdfe:	00 00                	add    BYTE PTR [rax],al
  40be00:	20 5d ff             	and    BYTE PTR [rbp-0x1],bl
  40be03:	ff 0c 08             	dec    DWORD PTR [rax+rcx*1]
  40be06:	00 00                	add    BYTE PTR [rax],al
  40be08:	04 e7                	add    al,0xe7
  40be0a:	bf 40 00 42 0e       	mov    edi,0xe420040
  40be0f:	10 8c 02 41 0e 18 86 	adc    BYTE PTR [rdx+rax*1-0x79e7f1bf],cl
  40be16:	03 46 0e             	add    eax,DWORD PTR [rsi+0xe]
  40be19:	20 83 04 4c 0e 80    	and    BYTE PTR [rbx-0x7ff1b3fc],al
  40be1f:	05 03 60 02 0a       	add    eax,0xa026003
  40be24:	0e                   	(bad)  
  40be25:	20 41 0e             	and    BYTE PTR [rcx+0xe],al
  40be28:	18 41 0e             	sbb    BYTE PTR [rcx+0xe],al
  40be2b:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40be2e:	08 41 0b             	or     BYTE PTR [rcx+0xb],al
  40be31:	00 00                	add    BYTE PTR [rax],al
  40be33:	00 00                	add    BYTE PTR [rax],al
  40be35:	00 00                	add    BYTE PTR [rax],al
  40be37:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  40be3a:	00 00                	add    BYTE PTR [rax],al
  40be3c:	84 0e                	test   BYTE PTR [rsi],cl
  40be3e:	00 00                	add    BYTE PTR [rax],al
  40be40:	f0 64 ff             	lock fs (bad) 
  40be43:	ff 26                	jmp    QWORD PTR [rsi]
  40be45:	00 00                	add    BYTE PTR [rax],al
  40be47:	00 00                	add    BYTE PTR [rax],al
  40be49:	44 0e                	rex.R (bad) 
  40be4b:	10 5d 0e             	adc    BYTE PTR [rbp+0xe],bl
  40be4e:	08 00                	or     BYTE PTR [rax],al
  40be50:	44 00 00             	add    BYTE PTR [rax],r8b
  40be53:	00 9c 0e 00 00 78 d9 	add    BYTE PTR [rsi+rcx*1-0x26880000],bl
  40be5a:	ff                   	(bad)  
  40be5b:	ff 65 00             	jmp    QWORD PTR [rbp+0x0]
  40be5e:	00 00                	add    BYTE PTR [rax],al
  40be60:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
  40be63:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
  40be69:	8e 03                	mov    es,WORD PTR [rbx]
  40be6b:	45 0e                	rex.RB (bad) 
  40be6d:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
  40be73:	8c 05 48 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e48],es        # ffffffff8670ccc1 <_end+0xffffffff860ff521>
  40be79:	06                   	(bad)  
  40be7a:	48 0e                	rex.W (bad) 
  40be7c:	38 83 07 4d 0e 40    	cmp    BYTE PTR [rbx+0x400e4d07],al
  40be82:	72 0e                	jb     40be92 <__GNU_EH_FRAME_HDR+0x11d2>
  40be84:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
  40be87:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
  40be8a:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
  40be8d:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
  40be90:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
  40be93:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
  40be96:	08 00                	or     BYTE PTR [rax],al
  40be98:	14 00                	adc    al,0x0
  40be9a:	00 00                	add    BYTE PTR [rax],al
  40be9c:	e4 0e                	in     al,0xe
  40be9e:	00 00                	add    BYTE PTR [rax],al
  40bea0:	a0 d9 ff ff 02 00 00 	movabs al,ds:0x2ffffd9
  40bea7:	00 00 
  40bea9:	00 00                	add    BYTE PTR [rax],al
  40beab:	00 00                	add    BYTE PTR [rax],al
  40bead:	00 00                	add    BYTE PTR [rax],al
	...

000000000040beb0 <__FRAME_END__>:
  40beb0:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .gcc_except_table:

000000000040beb4 <.gcc_except_table>:
  40beb4:	ff                   	(bad)  
  40beb5:	ff 01                	inc    DWORD PTR [rcx]
  40beb7:	09 63 05             	or     DWORD PTR [rbx+0x5],esp
  40beba:	6d                   	ins    DWORD PTR es:[rdi],dx
  40bebb:	00 80 01 05 00 00    	add    BYTE PTR [rax+0x501],al
  40bec1:	ff                   	(bad)  
  40bec2:	ff 01                	inc    DWORD PTR [rcx]
  40bec4:	41 bf 01 05 95 0c    	mov    r15d,0xc950501
  40beca:	00 e5                	add    ch,ah
  40becc:	01 05 e4 0a 00 c0    	add    DWORD PTR [rip+0xffffffffc0000ae4],eax        # ffffffffc040c9b6 <_end+0xffffffffbfdff216>
  40bed2:	03 05 98 0b 00 a8    	add    eax,DWORD PTR [rip+0xffffffffa8000b98]        # ffffffffa840ca70 <_end+0xffffffffa7dff2d0>
  40bed8:	04 05                	add    al,0x5
  40beda:	df 0a                	fisttp WORD PTR [rdx]
  40bedc:	00 8a 05 23 a7 0a    	add    BYTE PTR [rdx+0xaa72305],cl
  40bee2:	00 d7                	add    bh,dl
  40bee4:	08 05 df 0a 00 81    	or     BYTE PTR [rip+0xffffffff81000adf],al        # ffffffff8140c9c9 <_end+0xffffffff80dff229>
  40beea:	09 a1 01 a7 0a 00    	or     DWORD PTR [rcx+0xaa701],esp
  40bef0:	c5 0a 05             	(bad)  
  40bef3:	00 00                	add    BYTE PTR [rax],al
  40bef5:	d8 0a                	fmul   DWORD PTR [rdx]
  40bef7:	02 df                	add    bl,bh
  40bef9:	0a 00                	or     al,BYTE PTR [rax]
  40befb:	93                   	xchg   ebx,eax
  40befc:	0b 05 00 00 9d 0c    	or     eax,DWORD PTR [rip+0xc9d0000]        # cddbf02 <_end+0xc7ce762>
  40bf02:	05 df 0a 00 ff       	add    eax,0xff000adf
  40bf07:	ff 01                	inc    DWORD PTR [rcx]
  40bf09:	0c cf                	or     al,0xcf
  40bf0b:	02 05 c6 05 00 8f    	add    al,BYTE PTR [rip+0xffffffff8f0005c6]        # ffffffff8f40c4d7 <_end+0xffffffff8edfed37>
  40bf11:	04 d6                	add    al,0xd6
  40bf13:	01 00                	add    DWORD PTR [rax],eax
  40bf15:	00 ff                	add    bh,bh
  40bf17:	ff 01                	inc    DWORD PTR [rcx]
  40bf19:	16                   	(bad)  
  40bf1a:	f5                   	cmc    
  40bf1b:	01 05 00 00 83 07    	add    DWORD PTR [rip+0x7830000],eax        # 7c3bf21 <_end+0x762e781>
  40bf21:	05 87 0b 00 9b       	add    eax,0x9b000b87
  40bf26:	0b 05 00 00 a5 0b    	or     eax,DWORD PTR [rip+0xba50000]        # be5bf2c <_end+0xb84e78c>
  40bf2c:	05 87 0b 00 ff       	add    eax,0xff000b87
  40bf31:	ff 01                	inc    DWORD PTR [rcx]
  40bf33:	15 5d 05 be 02       	adc    eax,0x2be055d
  40bf38:	00 74 05 da          	add    BYTE PTR [rbp+rax*1-0x26],dh
  40bf3c:	02 00                	add    al,BYTE PTR [rax]
  40bf3e:	c1 01 05             	rol    DWORD PTR [rcx],0x5
  40bf41:	84 02                	test   BYTE PTR [rdx],al
  40bf43:	00 fa                	add    dl,bh
  40bf45:	01 44 00 00          	add    DWORD PTR [rax+rax*1+0x0],eax
  40bf49:	ff                   	(bad)  
  40bf4a:	ff 01                	inc    DWORD PTR [rcx]
  40bf4c:	0f 23 05             	mov    db0,rbp
  40bf4f:	00 00                	add    BYTE PTR [rax],al
  40bf51:	86 01                	xchg   BYTE PTR [rcx],al
  40bf53:	05 aa 01 00 bd       	add    eax,0xbd0001aa
  40bf58:	01 05 00 00 ff ff    	add    DWORD PTR [rip+0xffffffffffff0000],eax        # 3fbf5e <_init-0x589a>
  40bf5e:	01 0f                	add    DWORD PTR [rdi],ecx
  40bf60:	23 05 00 00 86 01    	and    eax,DWORD PTR [rip+0x1860000]        # 1c6bf66 <_end+0x165e7c6>
  40bf66:	05 aa 01 00 bd       	add    eax,0xbd0001aa
  40bf6b:	01 05 00 00 ff ff    	add    DWORD PTR [rip+0xffffffffffff0000],eax        # 3fbf71 <_init-0x5887>
  40bf71:	01 0f                	add    DWORD PTR [rdi],ecx
  40bf73:	23 05 00 00 86 01    	and    eax,DWORD PTR [rip+0x1860000]        # 1c6bf79 <_end+0x165e7d9>
  40bf79:	05 aa 01 00 bd       	add    eax,0xbd0001aa
  40bf7e:	01 05 00 00 ff ff    	add    DWORD PTR [rip+0xffffffffffff0000],eax        # 3fbf84 <_init-0x5874>
  40bf84:	01 0f                	add    DWORD PTR [rdi],ecx
  40bf86:	38 22                	cmp    BYTE PTR [rdx],ah
  40bf88:	00 00                	add    BYTE PTR [rax],al
  40bf8a:	83 02 05             	add    DWORD PTR [rdx],0x5
  40bf8d:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40bf8e:	02 00                	add    al,BYTE PTR [rax]
  40bf90:	c4 02 05 00 00       	vpshufb ymm8,ymm15,YMMWORD PTR [r8]
  40bf95:	ff                   	(bad)  
  40bf96:	ff 01                	inc    DWORD PTR [rcx]
  40bf98:	0f 38 22             	(bad)  
  40bf9b:	00 00                	add    BYTE PTR [rax],al
  40bf9d:	83 02 05             	add    DWORD PTR [rdx],0x5
  40bfa0:	ac                   	lods   al,BYTE PTR ds:[rsi]
  40bfa1:	02 00                	add    al,BYTE PTR [rax]
  40bfa3:	c4 02 05 00 00       	vpshufb ymm8,ymm15,YMMWORD PTR [r8]
  40bfa8:	ff                   	(bad)  
  40bfa9:	ff 01                	inc    DWORD PTR [rcx]
  40bfab:	0f 52 22             	rsqrtps xmm4,XMMWORD PTR [rdx]
  40bfae:	00 00                	add    BYTE PTR [rax],al
  40bfb0:	83 04 05 ac 04 00 c4 	add    DWORD PTR [rax*1-0x3bfffb54],0x4
  40bfb7:	04 
  40bfb8:	05 00 00 ff ff       	add    eax,0xffff0000
  40bfbd:	01 00                	add    DWORD PTR [rax],eax
  40bfbf:	ff                   	(bad)  
  40bfc0:	ff 01                	inc    DWORD PTR [rcx]
  40bfc2:	17                   	(bad)  
  40bfc3:	30 05 dd 11 00 a1    	xor    BYTE PTR [rip+0xffffffffa10011dd],al        # ffffffffa140d1a6 <_end+0xffffffffa0dffa06>
  40bfc9:	01 e6                	add    esi,esp
  40bfcb:	02 dd                	add    bl,ch
  40bfcd:	11 00                	adc    DWORD PTR [rax],eax
  40bfcf:	f0 09 1a             	lock or DWORD PTR [rdx],ebx
  40bfd2:	dd 11                	fst    QWORD PTR [rcx]
  40bfd4:	00 f9                	add    cl,bh
  40bfd6:	11 05 00 00 ff ff    	adc    DWORD PTR [rip+0xffffffffffff0000],eax        # 3fbfdc <_init-0x581c>
  40bfdc:	01 09                	add    DWORD PTR [rcx],ecx
  40bfde:	49 05 76 00 89 01    	rex.WB add rax,0x1890076
  40bfe4:	05 00 00 ff ff       	add    eax,0xffff0000
  40bfe9:	01 80 01 35 05 00    	add    DWORD PTR [rax+0x53501],eax
  40bfef:	00 51 05             	add    BYTE PTR [rcx+0x5],dl
  40bff2:	df 0f                	fisttp WORD PTR [rdi]
  40bff4:	00 6d 05             	add    BYTE PTR [rbp+0x5],ch
  40bff7:	ef                   	out    dx,eax
  40bff8:	0f 00 8c 01 05 e7 0f 	str    WORD PTR [rcx+rax*1+0xfe705]
  40bfff:	00 
  40c000:	b3 01                	mov    bl,0x1
  40c002:	05 f7 0d 00 c7       	add    eax,0xc7000df7
  40c007:	01 78 84             	add    DWORD PTR [rax-0x7c],edi
  40c00a:	10 00                	adc    BYTE PTR [rax],al
  40c00c:	98                   	cwde   
  40c00d:	03 27                	add    esp,DWORD PTR [rdi]
  40c00f:	fc                   	cld    
  40c010:	0f 00 c7             	sldt   edi
  40c013:	03 c6                	add    eax,esi
  40c015:	01 f7                	add    edi,esi
  40c017:	0f 00                	(bad)  
  40c019:	b9 05 33 cb 0c       	mov    ecx,0xccb3305
  40c01e:	00 9e 06 0f fc 0f    	add    BYTE PTR [rsi+0xffc0f06],bl
  40c024:	00 dd                	add    ch,bl
  40c026:	06                   	(bad)  
  40c027:	17                   	(bad)  
  40c028:	fc                   	cld    
  40c029:	0d 00 9e 07 05       	or     eax,0x5079e00
  40c02e:	c5 0f 00             	(bad)  
  40c031:	ae                   	scas   al,BYTE PTR es:[rdi]
  40c032:	07                   	(bad)  
  40c033:	05 ca 0f 00 c0       	add    eax,0xc0000fca
  40c038:	07                   	(bad)  
  40c039:	05 e5 0e 00 ea       	add    eax,0xea000ee5
  40c03e:	07                   	(bad)  
  40c03f:	05 ae 0f 00 e2       	add    eax,0xe2000fae
  40c044:	09 05 fc 0f 00 92    	or     DWORD PTR [rip+0xffffffff92000ffc],eax        # ffffffff9240d046 <_end+0xffffffff91dff8a6>
  40c04a:	0a 05 d7 0f 00 a7    	or     al,BYTE PTR [rip+0xffffffffa7000fd7]        # ffffffffa740d027 <_end+0xffffffffa6dff887>
  40c050:	0a 05 cf 0f 00 b9    	or     al,BYTE PTR [rip+0xffffffffb9000fcf]        # ffffffffb940d025 <_end+0xffffffffb8dff885>
  40c056:	0a 05 e0 0e 00 e3    	or     al,BYTE PTR [rip+0xffffffffe3000ee0]        # ffffffffe340cf3c <_end+0xffffffffe2dff79c>
  40c05c:	0a 05 84 0e 00 c6    	or     al,BYTE PTR [rip+0xffffffffc6000e84]        # ffffffffc640cee6 <_end+0xffffffffc5dff746>
  40c062:	0c 05                	or     al,0x5
  40c064:	cb                   	retf   
  40c065:	0c 00                	or     al,0x0
  40c067:	f2                   	repnz
  40c068:	0d                   	.byte 0xd
  40c069:	05                   	.byte 0x5
	...

Disassembly of section .init_array:

000000000060cdd8 <__frame_dummy_init_array_entry>:
  60cdd8:	30 24 40             	xor    BYTE PTR [rax+rax*2],ah
  60cddb:	00 00                	add    BYTE PTR [rax],al
  60cddd:	00 00                	add    BYTE PTR [rax],al
  60cddf:	00 30                	add    BYTE PTR [rax],dh
  60cde1:	23 40 00             	and    eax,DWORD PTR [rax+0x0]
  60cde4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .fini_array:

000000000060cde8 <__do_global_dtors_aux_fini_array_entry>:
  60cde8:	10 24 40             	adc    BYTE PTR [rax+rax*2],ah
  60cdeb:	00 00                	add    BYTE PTR [rax],al
  60cded:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .jcr:

000000000060cdf0 <__JCR_END__>:
	...

Disassembly of section .dynamic:

000000000060cdf8 <_DYNAMIC>:
  60cdf8:	01 00                	add    DWORD PTR [rax],eax
  60cdfa:	00 00                	add    BYTE PTR [rax],al
  60cdfc:	00 00                	add    BYTE PTR [rax],al
  60cdfe:	00 00                	add    BYTE PTR [rax],al
  60ce00:	01 00                	add    DWORD PTR [rax],eax
  60ce02:	00 00                	add    BYTE PTR [rax],al
  60ce04:	00 00                	add    BYTE PTR [rax],al
  60ce06:	00 00                	add    BYTE PTR [rax],al
  60ce08:	01 00                	add    DWORD PTR [rax],eax
  60ce0a:	00 00                	add    BYTE PTR [rax],al
  60ce0c:	00 00                	add    BYTE PTR [rax],al
  60ce0e:	00 00                	add    BYTE PTR [rax],al
  60ce10:	3b 07                	cmp    eax,DWORD PTR [rdi]
  60ce12:	00 00                	add    BYTE PTR [rax],al
  60ce14:	00 00                	add    BYTE PTR [rax],al
  60ce16:	00 00                	add    BYTE PTR [rax],al
  60ce18:	01 00                	add    DWORD PTR [rax],eax
  60ce1a:	00 00                	add    BYTE PTR [rax],al
  60ce1c:	00 00                	add    BYTE PTR [rax],al
  60ce1e:	00 00                	add    BYTE PTR [rax],al
  60ce20:	4a 07                	rex.WX (bad) 
  60ce22:	00 00                	add    BYTE PTR [rax],al
  60ce24:	00 00                	add    BYTE PTR [rax],al
  60ce26:	00 00                	add    BYTE PTR [rax],al
  60ce28:	01 00                	add    DWORD PTR [rax],eax
  60ce2a:	00 00                	add    BYTE PTR [rax],al
  60ce2c:	00 00                	add    BYTE PTR [rax],al
  60ce2e:	00 00                	add    BYTE PTR [rax],al
  60ce30:	67 07                	addr32 (bad) 
  60ce32:	00 00                	add    BYTE PTR [rax],al
  60ce34:	00 00                	add    BYTE PTR [rax],al
  60ce36:	00 00                	add    BYTE PTR [rax],al
  60ce38:	0c 00                	or     al,0x0
  60ce3a:	00 00                	add    BYTE PTR [rax],al
  60ce3c:	00 00                	add    BYTE PTR [rax],al
  60ce3e:	00 00                	add    BYTE PTR [rax],al
  60ce40:	f8                   	clc    
  60ce41:	17                   	(bad)  
  60ce42:	40 00 00             	add    BYTE PTR [rax],al
  60ce45:	00 00                	add    BYTE PTR [rax],al
  60ce47:	00 0d 00 00 00 00    	add    BYTE PTR [rip+0x0],cl        # 60ce4d <_DYNAMIC+0x55>
  60ce4d:	00 00                	add    BYTE PTR [rax],al
  60ce4f:	00 44 98 40          	add    BYTE PTR [rax+rbx*4+0x40],al
  60ce53:	00 00                	add    BYTE PTR [rax],al
  60ce55:	00 00                	add    BYTE PTR [rax],al
  60ce57:	00 19                	add    BYTE PTR [rcx],bl
  60ce59:	00 00                	add    BYTE PTR [rax],al
  60ce5b:	00 00                	add    BYTE PTR [rax],al
  60ce5d:	00 00                	add    BYTE PTR [rax],al
  60ce5f:	00 d8                	add    al,bl
  60ce61:	cd 60                	int    0x60
  60ce63:	00 00                	add    BYTE PTR [rax],al
  60ce65:	00 00                	add    BYTE PTR [rax],al
  60ce67:	00 1b                	add    BYTE PTR [rbx],bl
  60ce69:	00 00                	add    BYTE PTR [rax],al
  60ce6b:	00 00                	add    BYTE PTR [rax],al
  60ce6d:	00 00                	add    BYTE PTR [rax],al
  60ce6f:	00 10                	add    BYTE PTR [rax],dl
  60ce71:	00 00                	add    BYTE PTR [rax],al
  60ce73:	00 00                	add    BYTE PTR [rax],al
  60ce75:	00 00                	add    BYTE PTR [rax],al
  60ce77:	00 1a                	add    BYTE PTR [rdx],bl
  60ce79:	00 00                	add    BYTE PTR [rax],al
  60ce7b:	00 00                	add    BYTE PTR [rax],al
  60ce7d:	00 00                	add    BYTE PTR [rax],al
  60ce7f:	00 e8                	add    al,ch
  60ce81:	cd 60                	int    0x60
  60ce83:	00 00                	add    BYTE PTR [rax],al
  60ce85:	00 00                	add    BYTE PTR [rax],al
  60ce87:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  60ce8a:	00 00                	add    BYTE PTR [rax],al
  60ce8c:	00 00                	add    BYTE PTR [rax],al
  60ce8e:	00 00                	add    BYTE PTR [rax],al
  60ce90:	08 00                	or     BYTE PTR [rax],al
  60ce92:	00 00                	add    BYTE PTR [rax],al
  60ce94:	00 00                	add    BYTE PTR [rax],al
  60ce96:	00 00                	add    BYTE PTR [rax],al
  60ce98:	f5                   	cmc    
  60ce99:	fe                   	(bad)  
  60ce9a:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  60ce9d:	00 00                	add    BYTE PTR [rax],al
  60ce9f:	00 98 02 40 00 00    	add    BYTE PTR [rax+0x4002],bl
  60cea5:	00 00                	add    BYTE PTR [rax],al
  60cea7:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 60cead <_DYNAMIC+0xb5>
  60cead:	00 00                	add    BYTE PTR [rax],al
  60ceaf:	00 d0                	add    al,dl
  60ceb1:	08 40 00             	or     BYTE PTR [rax+0x0],al
  60ceb4:	00 00                	add    BYTE PTR [rax],al
  60ceb6:	00 00                	add    BYTE PTR [rax],al
  60ceb8:	06                   	(bad)  
	...
  60cec1:	03 40 00             	add    eax,DWORD PTR [rax+0x0]
  60cec4:	00 00                	add    BYTE PTR [rax],al
  60cec6:	00 00                	add    BYTE PTR [rax],al
  60cec8:	0a 00                	or     al,BYTE PTR [rax]
  60ceca:	00 00                	add    BYTE PTR [rax],al
  60cecc:	00 00                	add    BYTE PTR [rax],al
  60cece:	00 00                	add    BYTE PTR [rax],al
  60ced0:	4e 08 00             	rex.WRX or BYTE PTR [rax],r8b
  60ced3:	00 00                	add    BYTE PTR [rax],al
  60ced5:	00 00                	add    BYTE PTR [rax],al
  60ced7:	00 0b                	add    BYTE PTR [rbx],cl
  60ced9:	00 00                	add    BYTE PTR [rax],al
  60cedb:	00 00                	add    BYTE PTR [rax],al
  60cedd:	00 00                	add    BYTE PTR [rax],al
  60cedf:	00 18                	add    BYTE PTR [rax],bl
  60cee1:	00 00                	add    BYTE PTR [rax],al
  60cee3:	00 00                	add    BYTE PTR [rax],al
  60cee5:	00 00                	add    BYTE PTR [rax],al
  60cee7:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 60ceed <_DYNAMIC+0xf5>
	...
  60cef5:	00 00                	add    BYTE PTR [rax],al
  60cef7:	00 03                	add    BYTE PTR [rbx],al
	...
  60cf01:	d0 60 00             	shl    BYTE PTR [rax+0x0],1
  60cf04:	00 00                	add    BYTE PTR [rax],al
  60cf06:	00 00                	add    BYTE PTR [rax],al
  60cf08:	02 00                	add    al,BYTE PTR [rax]
  60cf0a:	00 00                	add    BYTE PTR [rax],al
  60cf0c:	00 00                	add    BYTE PTR [rax],al
  60cf0e:	00 00                	add    BYTE PTR [rax],al
  60cf10:	50                   	push   rax
  60cf11:	04 00                	add    al,0x0
  60cf13:	00 00                	add    BYTE PTR [rax],al
  60cf15:	00 00                	add    BYTE PTR [rax],al
  60cf17:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  60cf1a:	00 00                	add    BYTE PTR [rax],al
  60cf1c:	00 00                	add    BYTE PTR [rax],al
  60cf1e:	00 00                	add    BYTE PTR [rax],al
  60cf20:	07                   	(bad)  
  60cf21:	00 00                	add    BYTE PTR [rax],al
  60cf23:	00 00                	add    BYTE PTR [rax],al
  60cf25:	00 00                	add    BYTE PTR [rax],al
  60cf27:	00 17                	add    BYTE PTR [rdi],dl
  60cf29:	00 00                	add    BYTE PTR [rax],al
  60cf2b:	00 00                	add    BYTE PTR [rax],al
  60cf2d:	00 00                	add    BYTE PTR [rax],al
  60cf2f:	00 a8 13 40 00 00    	add    BYTE PTR [rax+0x4013],ch
  60cf35:	00 00                	add    BYTE PTR [rax],al
  60cf37:	00 07                	add    BYTE PTR [rdi],al
  60cf39:	00 00                	add    BYTE PTR [rax],al
  60cf3b:	00 00                	add    BYTE PTR [rax],al
  60cf3d:	00 00                	add    BYTE PTR [rax],al
  60cf3f:	00 a0 12 40 00 00    	add    BYTE PTR [rax+0x4012],ah
  60cf45:	00 00                	add    BYTE PTR [rax],al
  60cf47:	00 08                	add    BYTE PTR [rax],cl
  60cf49:	00 00                	add    BYTE PTR [rax],al
  60cf4b:	00 00                	add    BYTE PTR [rax],al
  60cf4d:	00 00                	add    BYTE PTR [rax],al
  60cf4f:	00 08                	add    BYTE PTR [rax],cl
  60cf51:	01 00                	add    DWORD PTR [rax],eax
  60cf53:	00 00                	add    BYTE PTR [rax],al
  60cf55:	00 00                	add    BYTE PTR [rax],al
  60cf57:	00 09                	add    BYTE PTR [rcx],cl
  60cf59:	00 00                	add    BYTE PTR [rax],al
  60cf5b:	00 00                	add    BYTE PTR [rax],al
  60cf5d:	00 00                	add    BYTE PTR [rax],al
  60cf5f:	00 18                	add    BYTE PTR [rax],bl
  60cf61:	00 00                	add    BYTE PTR [rax],al
  60cf63:	00 00                	add    BYTE PTR [rax],al
  60cf65:	00 00                	add    BYTE PTR [rax],al
  60cf67:	00 fe                	add    dh,bh
  60cf69:	ff                   	(bad)  
  60cf6a:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  60cf6d:	00 00                	add    BYTE PTR [rax],al
  60cf6f:	00 a0 11 40 00 00    	add    BYTE PTR [rax+0x4011],ah
  60cf75:	00 00                	add    BYTE PTR [rax],al
  60cf77:	00 ff                	add    bh,bh
  60cf79:	ff                   	(bad)  
  60cf7a:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  60cf7d:	00 00                	add    BYTE PTR [rax],al
  60cf7f:	00 04 00             	add    BYTE PTR [rax+rax*1],al
  60cf82:	00 00                	add    BYTE PTR [rax],al
  60cf84:	00 00                	add    BYTE PTR [rax],al
  60cf86:	00 00                	add    BYTE PTR [rax],al
  60cf88:	f0 ff                	lock (bad) 
  60cf8a:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  60cf8d:	00 00                	add    BYTE PTR [rax],al
  60cf8f:	00 1e                	add    BYTE PTR [rsi],bl
  60cf91:	11 40 00             	adc    DWORD PTR [rax+0x0],eax
	...

Disassembly of section .got:

000000000060cff8 <.got>:
	...

Disassembly of section .got.plt:

000000000060d000 <_GLOBAL_OFFSET_TABLE_>:
  60d000:	f8                   	clc    
  60d001:	cd 60                	int    0x60
	...
  60d017:	00 36                	add    BYTE PTR [rsi],dh
  60d019:	18 40 00             	sbb    BYTE PTR [rax+0x0],al
  60d01c:	00 00                	add    BYTE PTR [rax],al
  60d01e:	00 00                	add    BYTE PTR [rax],al
  60d020:	46 18 40 00          	rex.RX sbb BYTE PTR [rax+0x0],r8b
  60d024:	00 00                	add    BYTE PTR [rax],al
  60d026:	00 00                	add    BYTE PTR [rax],al
  60d028:	56                   	push   rsi
  60d029:	18 40 00             	sbb    BYTE PTR [rax+0x0],al
  60d02c:	00 00                	add    BYTE PTR [rax],al
  60d02e:	00 00                	add    BYTE PTR [rax],al
  60d030:	66 18 40 00          	data16 sbb BYTE PTR [rax+0x0],al
  60d034:	00 00                	add    BYTE PTR [rax],al
  60d036:	00 00                	add    BYTE PTR [rax],al
  60d038:	76 18                	jbe    60d052 <_GLOBAL_OFFSET_TABLE_+0x52>
  60d03a:	40 00 00             	add    BYTE PTR [rax],al
  60d03d:	00 00                	add    BYTE PTR [rax],al
  60d03f:	00 86 18 40 00 00    	add    BYTE PTR [rsi+0x4018],al
  60d045:	00 00                	add    BYTE PTR [rax],al
  60d047:	00 96 18 40 00 00    	add    BYTE PTR [rsi+0x4018],dl
  60d04d:	00 00                	add    BYTE PTR [rax],al
  60d04f:	00 a6 18 40 00 00    	add    BYTE PTR [rsi+0x4018],ah
  60d055:	00 00                	add    BYTE PTR [rax],al
  60d057:	00 b6 18 40 00 00    	add    BYTE PTR [rsi+0x4018],dh
  60d05d:	00 00                	add    BYTE PTR [rax],al
  60d05f:	00 c6                	add    dh,al
  60d061:	18 40 00             	sbb    BYTE PTR [rax+0x0],al
  60d064:	00 00                	add    BYTE PTR [rax],al
  60d066:	00 00                	add    BYTE PTR [rax],al
  60d068:	d6                   	(bad)  
  60d069:	18 40 00             	sbb    BYTE PTR [rax+0x0],al
  60d06c:	00 00                	add    BYTE PTR [rax],al
  60d06e:	00 00                	add    BYTE PTR [rax],al
  60d070:	e6 18                	out    0x18,al
  60d072:	40 00 00             	add    BYTE PTR [rax],al
  60d075:	00 00                	add    BYTE PTR [rax],al
  60d077:	00 f6                	add    dh,dh
  60d079:	18 40 00             	sbb    BYTE PTR [rax+0x0],al
  60d07c:	00 00                	add    BYTE PTR [rax],al
  60d07e:	00 00                	add    BYTE PTR [rax],al
  60d080:	06                   	(bad)  
  60d081:	19 40 00             	sbb    DWORD PTR [rax+0x0],eax
  60d084:	00 00                	add    BYTE PTR [rax],al
  60d086:	00 00                	add    BYTE PTR [rax],al
  60d088:	16                   	(bad)  
  60d089:	19 40 00             	sbb    DWORD PTR [rax+0x0],eax
  60d08c:	00 00                	add    BYTE PTR [rax],al
  60d08e:	00 00                	add    BYTE PTR [rax],al
  60d090:	26 19 40 00          	sbb    DWORD PTR es:[rax+0x0],eax
  60d094:	00 00                	add    BYTE PTR [rax],al
  60d096:	00 00                	add    BYTE PTR [rax],al
  60d098:	36 19 40 00          	sbb    DWORD PTR ss:[rax+0x0],eax
  60d09c:	00 00                	add    BYTE PTR [rax],al
  60d09e:	00 00                	add    BYTE PTR [rax],al
  60d0a0:	46 19 40 00          	rex.RX sbb DWORD PTR [rax+0x0],r8d
  60d0a4:	00 00                	add    BYTE PTR [rax],al
  60d0a6:	00 00                	add    BYTE PTR [rax],al
  60d0a8:	56                   	push   rsi
  60d0a9:	19 40 00             	sbb    DWORD PTR [rax+0x0],eax
  60d0ac:	00 00                	add    BYTE PTR [rax],al
  60d0ae:	00 00                	add    BYTE PTR [rax],al
  60d0b0:	66 19 40 00          	sbb    WORD PTR [rax+0x0],ax
  60d0b4:	00 00                	add    BYTE PTR [rax],al
  60d0b6:	00 00                	add    BYTE PTR [rax],al
  60d0b8:	76 19                	jbe    60d0d3 <_GLOBAL_OFFSET_TABLE_+0xd3>
  60d0ba:	40 00 00             	add    BYTE PTR [rax],al
  60d0bd:	00 00                	add    BYTE PTR [rax],al
  60d0bf:	00 86 19 40 00 00    	add    BYTE PTR [rsi+0x4019],al
  60d0c5:	00 00                	add    BYTE PTR [rax],al
  60d0c7:	00 96 19 40 00 00    	add    BYTE PTR [rsi+0x4019],dl
  60d0cd:	00 00                	add    BYTE PTR [rax],al
  60d0cf:	00 a6 19 40 00 00    	add    BYTE PTR [rsi+0x4019],ah
  60d0d5:	00 00                	add    BYTE PTR [rax],al
  60d0d7:	00 b6 19 40 00 00    	add    BYTE PTR [rsi+0x4019],dh
  60d0dd:	00 00                	add    BYTE PTR [rax],al
  60d0df:	00 c6                	add    dh,al
  60d0e1:	19 40 00             	sbb    DWORD PTR [rax+0x0],eax
  60d0e4:	00 00                	add    BYTE PTR [rax],al
  60d0e6:	00 00                	add    BYTE PTR [rax],al
  60d0e8:	d6                   	(bad)  
  60d0e9:	19 40 00             	sbb    DWORD PTR [rax+0x0],eax
  60d0ec:	00 00                	add    BYTE PTR [rax],al
  60d0ee:	00 00                	add    BYTE PTR [rax],al
  60d0f0:	e6 19                	out    0x19,al
  60d0f2:	40 00 00             	add    BYTE PTR [rax],al
  60d0f5:	00 00                	add    BYTE PTR [rax],al
  60d0f7:	00 f6                	add    dh,dh
  60d0f9:	19 40 00             	sbb    DWORD PTR [rax+0x0],eax
  60d0fc:	00 00                	add    BYTE PTR [rax],al
  60d0fe:	00 00                	add    BYTE PTR [rax],al
  60d100:	06                   	(bad)  
  60d101:	1a 40 00             	sbb    al,BYTE PTR [rax+0x0]
  60d104:	00 00                	add    BYTE PTR [rax],al
  60d106:	00 00                	add    BYTE PTR [rax],al
  60d108:	16                   	(bad)  
  60d109:	1a 40 00             	sbb    al,BYTE PTR [rax+0x0]
  60d10c:	00 00                	add    BYTE PTR [rax],al
  60d10e:	00 00                	add    BYTE PTR [rax],al
  60d110:	26 1a 40 00          	sbb    al,BYTE PTR es:[rax+0x0]
  60d114:	00 00                	add    BYTE PTR [rax],al
  60d116:	00 00                	add    BYTE PTR [rax],al
  60d118:	36 1a 40 00          	sbb    al,BYTE PTR ss:[rax+0x0]
  60d11c:	00 00                	add    BYTE PTR [rax],al
  60d11e:	00 00                	add    BYTE PTR [rax],al
  60d120:	46 1a 40 00          	rex.RX sbb r8b,BYTE PTR [rax+0x0]
  60d124:	00 00                	add    BYTE PTR [rax],al
  60d126:	00 00                	add    BYTE PTR [rax],al
  60d128:	56                   	push   rsi
  60d129:	1a 40 00             	sbb    al,BYTE PTR [rax+0x0]
  60d12c:	00 00                	add    BYTE PTR [rax],al
  60d12e:	00 00                	add    BYTE PTR [rax],al
  60d130:	66 1a 40 00          	data16 sbb al,BYTE PTR [rax+0x0]
  60d134:	00 00                	add    BYTE PTR [rax],al
  60d136:	00 00                	add    BYTE PTR [rax],al
  60d138:	76 1a                	jbe    60d154 <_GLOBAL_OFFSET_TABLE_+0x154>
  60d13a:	40 00 00             	add    BYTE PTR [rax],al
  60d13d:	00 00                	add    BYTE PTR [rax],al
  60d13f:	00 86 1a 40 00 00    	add    BYTE PTR [rsi+0x401a],al
  60d145:	00 00                	add    BYTE PTR [rax],al
  60d147:	00 96 1a 40 00 00    	add    BYTE PTR [rsi+0x401a],dl
  60d14d:	00 00                	add    BYTE PTR [rax],al
  60d14f:	00 a6 1a 40 00 00    	add    BYTE PTR [rsi+0x401a],ah
  60d155:	00 00                	add    BYTE PTR [rax],al
  60d157:	00 b6 1a 40 00 00    	add    BYTE PTR [rsi+0x401a],dh
  60d15d:	00 00                	add    BYTE PTR [rax],al
  60d15f:	00 c6                	add    dh,al
  60d161:	1a 40 00             	sbb    al,BYTE PTR [rax+0x0]
  60d164:	00 00                	add    BYTE PTR [rax],al
  60d166:	00 00                	add    BYTE PTR [rax],al
  60d168:	d6                   	(bad)  
  60d169:	1a 40 00             	sbb    al,BYTE PTR [rax+0x0]
  60d16c:	00 00                	add    BYTE PTR [rax],al
  60d16e:	00 00                	add    BYTE PTR [rax],al
  60d170:	e6 1a                	out    0x1a,al
  60d172:	40 00 00             	add    BYTE PTR [rax],al
  60d175:	00 00                	add    BYTE PTR [rax],al
  60d177:	00 f6                	add    dh,dh
  60d179:	1a 40 00             	sbb    al,BYTE PTR [rax+0x0]
  60d17c:	00 00                	add    BYTE PTR [rax],al
  60d17e:	00 00                	add    BYTE PTR [rax],al
  60d180:	06                   	(bad)  
  60d181:	1b 40 00             	sbb    eax,DWORD PTR [rax+0x0]
  60d184:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .data:

000000000060d1a0 <__data_start>:
	...

000000000060d1a8 <__dso_handle>:
	...

000000000060d1c0 <SHA256::K>:
  60d1c0:	98                   	cwde   
  60d1c1:	2f                   	(bad)  
  60d1c2:	8a 42 91             	mov    al,BYTE PTR [rdx-0x6f]
  60d1c5:	44 37                	rex.R (bad) 
  60d1c7:	71 cf                	jno    60d198 <_GLOBAL_OFFSET_TABLE_+0x198>
  60d1c9:	fb                   	sti    
  60d1ca:	c0                   	(bad)  
  60d1cb:	b5 a5                	mov    ch,0xa5
  60d1cd:	db b5 e9 5b c2 56    	(bad)  [rbp+0x56c25be9]
  60d1d3:	39 f1                	cmp    ecx,esi
  60d1d5:	11 f1                	adc    ecx,esi
  60d1d7:	59                   	pop    rcx
  60d1d8:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  60d1d9:	82                   	(bad)  
  60d1da:	3f                   	(bad)  
  60d1db:	92                   	xchg   edx,eax
  60d1dc:	d5                   	(bad)  
  60d1dd:	5e                   	pop    rsi
  60d1de:	1c ab                	sbb    al,0xab
  60d1e0:	98                   	cwde   
  60d1e1:	aa                   	stos   BYTE PTR es:[rdi],al
  60d1e2:	07                   	(bad)  
  60d1e3:	d8 01                	fadd   DWORD PTR [rcx]
  60d1e5:	5b                   	pop    rbx
  60d1e6:	83 12 be             	adc    DWORD PTR [rdx],0xffffffbe
  60d1e9:	85 31                	test   DWORD PTR [rcx],esi
  60d1eb:	24 c3                	and    al,0xc3
  60d1ed:	7d 0c                	jge    60d1fb <SHA256::K+0x3b>
  60d1ef:	55                   	push   rbp
  60d1f0:	74 5d                	je     60d24f <SHA256::K+0x8f>
  60d1f2:	be 72 fe b1 de       	mov    esi,0xdeb1fe72
  60d1f7:	80 a7 06 dc 9b 74 f1 	and    BYTE PTR [rdi+0x749bdc06],0xf1
  60d1fe:	9b                   	fwait
  60d1ff:	c1 c1 69             	rol    ecx,0x69
  60d202:	9b                   	fwait
  60d203:	e4 86                	in     al,0x86
  60d205:	47 be ef c6 9d c1    	rex.RXB mov r14d,0xc19dc6ef
  60d20b:	0f cc                	bswap  esp
  60d20d:	a1 0c 24 6f 2c e9 2d 	movabs eax,ds:0x84aa2de92c6f240c
  60d214:	aa 84 
  60d216:	74 4a                	je     60d262 <SHA256::K+0xa2>
  60d218:	dc a9 b0 5c da 88    	fsubr  QWORD PTR [rcx-0x7725a350]
  60d21e:	f9                   	stc    
  60d21f:	76 52                	jbe    60d273 <SHA256::K+0xb3>
  60d221:	51                   	push   rcx
  60d222:	3e 98                	ds cwde 
  60d224:	6d                   	ins    DWORD PTR es:[rdi],dx
  60d225:	c6                   	(bad)  
  60d226:	31 a8 c8 27 03 b0    	xor    DWORD PTR [rax-0x4ffcd838],ebp
  60d22c:	c7                   	(bad)  
  60d22d:	7f 59                	jg     60d288 <SHA256::K+0xc8>
  60d22f:	bf f3 0b e0 c6       	mov    edi,0xc6e00bf3
  60d234:	47 91                	rex.RXB xchg r9d,eax
  60d236:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  60d237:	d5                   	(bad)  
  60d238:	51                   	push   rcx
  60d239:	63 ca                	movsxd ecx,edx
  60d23b:	06                   	(bad)  
  60d23c:	67 29 29             	sub    DWORD PTR [ecx],ebp
  60d23f:	14 85                	adc    al,0x85
  60d241:	0a b7 27 38 21 1b    	or     dh,BYTE PTR [rdi+0x1b213827]
  60d247:	2e fc                	cs cld 
  60d249:	6d                   	ins    DWORD PTR es:[rdi],dx
  60d24a:	2c 4d                	sub    al,0x4d
  60d24c:	13 0d 38 53 54 73    	adc    ecx,DWORD PTR [rip+0x73545338]        # 73b5258a <_end+0x73544dea>
  60d252:	0a 65 bb             	or     ah,BYTE PTR [rbp-0x45]
  60d255:	0a 6a 76             	or     ch,BYTE PTR [rdx+0x76]
  60d258:	2e c9                	cs leave 
  60d25a:	c2 81 85             	ret    0x8581
  60d25d:	2c 72                	sub    al,0x72
  60d25f:	92                   	xchg   edx,eax
  60d260:	a1 e8 bf a2 4b 66 1a 	movabs eax,ds:0x70a81a664ba2bfe8
  60d267:	a8 70 
  60d269:	8b 4b c2             	mov    ecx,DWORD PTR [rbx-0x3e]
  60d26c:	a3 51 6c c7 19 e8 92 	movabs ds:0x24d192e819c76c51,eax
  60d273:	d1 24 
  60d275:	06                   	(bad)  
  60d276:	99                   	cdq    
  60d277:	d6                   	(bad)  
  60d278:	85 35 0e f4 70 a0    	test   DWORD PTR [rip+0xffffffffa070f40e],esi        # ffffffffa0d1c68c <_end+0xffffffffa070eeec>
  60d27e:	6a 10                	push   0x10
  60d280:	16                   	(bad)  
  60d281:	c1 a4 19 08 6c 37 1e 	shl    DWORD PTR [rcx+rbx*1+0x1e376c08],0x4c
  60d288:	4c 
  60d289:	77 48                	ja     60d2d3 <__TMC_END__+0x13>
  60d28b:	27                   	(bad)  
  60d28c:	b5 bc                	mov    ch,0xbc
  60d28e:	b0 34                	mov    al,0x34
  60d290:	b3 0c                	mov    bl,0xc
  60d292:	1c 39                	sbb    al,0x39
  60d294:	4a aa                	rex.WX stos BYTE PTR es:[rdi],al
  60d296:	d8 4e 4f             	fmul   DWORD PTR [rsi+0x4f]
  60d299:	ca 9c 5b             	retf   0x5b9c
  60d29c:	f3 6f                	rep outs dx,DWORD PTR ds:[rsi]
  60d29e:	2e 68 ee 82 8f 74    	cs push 0x748f82ee
  60d2a4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  60d2a5:	63 a5 78 14 78 c8    	movsxd esp,DWORD PTR [rbp-0x3787eb88]
  60d2ab:	84 08                	test   BYTE PTR [rax],cl
  60d2ad:	02 c7                	add    al,bh
  60d2af:	8c fa                	mov    edx,?
  60d2b1:	ff                   	(bad)  
  60d2b2:	be 90 eb 6c 50       	mov    esi,0x506ceb90
  60d2b7:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  60d2b8:	f7 a3 f9 be f2 78    	mul    DWORD PTR [rbx+0x78f2bef9]
  60d2be:	71 c6                	jno    60d286 <SHA256::K+0xc6>

Disassembly of section .bss:

000000000060d2c0 <std::cin@@GLIBCXX_3.4>:
	...

000000000060d3d8 <vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21>:
	...

000000000060d460 <typeinfo for std::length_error@@GLIBCXX_3.4>:
	...

000000000060d480 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4>:
	...

000000000060d4a0 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21>:
	...

000000000060d520 <vtable for __cxxabiv1::__function_type_info@@CXXABI_1.3>:
	...

000000000060d560 <std::cout@@GLIBCXX_3.4>:
	...

000000000060d680 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4>:
	...

000000000060d700 <vtable for __cxxabiv1::__pointer_type_info@@CXXABI_1.3>:
	...

000000000060d748 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21>:
	...

000000000060d798 <completed.7594>:
	...

000000000060d799 <std::__ioinit>:
  60d799:	00 00                	add    BYTE PTR [rax],al
  60d79b:	00 00                	add    BYTE PTR [rax],al
  60d79d:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	47                   	rex.RXB
   1:	43                   	rex.XB
   2:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   5:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   8:	75 6e                	jne    78 <_init-0x401780>
   a:	74 75                	je     81 <_init-0x401777>
   c:	20 35 2e 34 2e 30    	and    BYTE PTR [rip+0x302e342e],dh        # 302e3440 <_end+0x2fcd5ca0>
  12:	2d 36 75 62 75       	sub    eax,0x75627536
  17:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  18:	74 75                	je     8f <_init-0x401769>
  1a:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1d:	36 2e 30 34 2e       	ss xor BYTE PTR cs:[rsi+rbp*1],dh
  22:	31 32                	xor    DWORD PTR [rdx],esi
  24:	29 20                	sub    DWORD PTR [rax],esp
  26:	35 2e 34 2e 30       	xor    eax,0x302e342e
  2b:	20 32                	and    BYTE PTR [rdx],dh
  2d:	30 31                	xor    BYTE PTR [rcx],dh
  2f:	36 30 36             	xor    BYTE PTR ss:[rsi],dh
  32:	30 39                	xor    BYTE PTR [rcx],bh
	...
